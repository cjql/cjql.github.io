<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Words</title>
      <link href="/Words/"/>
      <url>/Words/</url>
      
        <content type="html"><![CDATA[<p>分治加记忆是最好的动态规划。<br><a id="more"></a>  </p><h1 id="semantics"><a href="#semantics" class="headerlink" title="semantics"></a>semantics</h1><h2 id="redundant"><a href="#redundant" class="headerlink" title="redundant"></a>redundant</h2><p>The adj redundant has 2 senses (first 1 from tagged texts)</p><ol><li>(2) excess, extra, redundant, spare, supererogatory, superfluous, supernumerary, surplus – (more than is needed, desired, or required; “trying to lose excess weight”; “found some extra change lying on the dresser”; “yet another book on heraldry might be thought redundant”; “skills made redundant by technological advance”; “sleeping in the spare room”; “supernumerary ornamentation”; “it was supererogatory of her to gloat”; “delete superfluous (or unnecessary) words”; “extra ribs as well as other supernumerary internal parts”; “surplus cheese distributed to the needy”)<br>INDIRECT (VIA unnecessary) -&gt; necessary – (absolutely essential)<br>RELATED TO-&gt;(noun) redundance#1</li></ol><ul><li>redundancy, redundance – (the attribute of being superfluous and unneeded; “the use of industrial robots created redundancy among workers”)<br>RELATED TO-&gt;(noun) redundancy#1</li><li>redundancy – (repetition of messages to reduce the probability of errors in transmission)<br>RELATED TO-&gt;(noun) redundancy#3</li><li>redundancy – ((electronics) a system design that duplicates components to provide alternatives in case one component fails)<br>RELATED TO-&gt;(noun) redundancy#2</li><li>redundancy, redundance – (the attribute of being superfluous and unneeded; “the use of industrial robots created redundancy among workers”)<br>RELATED TO-&gt;(noun) redundancy#4</li><li>redundancy – (repetition of an act needlessly)</li></ul><ol start="2"><li>pleonastic, redundant, tautologic, tautological – (repetition of same sense in different words; “<code>a true fact&#39; and</code>a free gift’ are pleonastic expressions”; “the phrase `a beginner who has just started’ is tautological”; “at the risk of being redundant I return to my original proposition”- J.B.Conant)<br>INDIRECT (VIA prolix) -&gt; concise – (expressing much in few words; “a concise explanation”)<br>RELATED TO-&gt;(noun) redundancy#2</li></ol><ul><li>redundancy, redundance – (the attribute of being superfluous and unneeded; “the use of industrial robots created redundancy among workers”)<br>RELATED TO-&gt;(noun) redundancy#4</li><li>redundancy – (repetition of an act needlessly)<h2 id="anarchist"><a href="#anarchist" class="headerlink" title="anarchist"></a>anarchist</h2>1 sense of anarchist<br>Sense 1<br>anarchist, nihilist, syndicalist – (an advocate of anarchism)</li><li>radical – (a person who has radical ideas or opinions)<ul><li>anarchist, nihilist, syndicalist – (an advocate of anarchism)</li><li>Bolshevik, Marxist, red, bolshie, bolshy – (emotionally charged terms used to refer to extreme radicals or revolutionaries)</li><li>extremist – (a person who holds extreme views)</li><li>leveler, leveller – (a radical who advocates the abolition of political or economic or social inequalities)</li><li>revolutionist, revolutionary, subversive, subverter – (a radical supporter of political or social revolution)</li><li>terrorist – (a radical who employs terror as a political weapon; usually organizes with other terrorists in small cells; often uses religion as a cover for terrorist activities)</li><li>Trotskyite, Trotskyist, Trot – (radicals who support Trotsky’s theory that socialism must be established throughout the world by continuing revolution)</li><li>Wobbly – (a member of the Industrial Workers of the World)</li><li>Young Turk – (a young radical who agitates for reform)<h2 id="jocund"><a href="#jocund" class="headerlink" title="jocund"></a>jocund</h2>1 sense of jocund                                                       </li></ul></li></ul><p>Sense 1<br>gay, jocund, jolly, jovial, merry, mirthful – (full of or showing high-spirited merriment; “when hearts were young and gay”; “a poet could not but be gay, in such a jocund company”- Wordsworth; “the jolly crowd at the reunion”; “jolly old Saint Nick”; “a jovial old gentleman”; “have a merry Christmas”; “peals of merry laughter”; “a mirthful laugh”)</p><pre><code>- joyous (vs. joyless) -- (full of or characterized by joy; &quot;felt a joyous abandon&quot;; &quot;joyous laughter&quot;)</code></pre><p>INDIRECT (VIA joyous) -&gt; joyless – (not experiencing or inspiring joy; “a joyless man”; “a joyless occasion”; “joyless evenings”)<br>RELATED TO-&gt;(noun) jocundity#1</p><pre><code>- jocundity, jocularity -- (a feeling facetious merriment)</code></pre><h2 id="prowl"><a href="#prowl" class="headerlink" title="prowl"></a>prowl</h2><p>1 sense of prowl                                                        </p><p>Sense 1<br>prowl – (the act of prowling (walking about in a stealthy manner))</p><ul><li>walk, walking – (the act of traveling by foot; “walking is a healthy form of exercise”)<ul><li>ambulation – (walking about; “the hospital encouraged early ambulation”)</li><li>sleepwalking, somnambulism, somnambulation, noctambulism, noctambulation – (walking by a person who is asleep)</li><li>gait – (a person’s manner of walking)</li><li>march, marching – (the act of marching; walking with regular steps (especially in a procession of some kind); “it was a long march”; “we heard the sound of marching”)</li><li>plodding, plod – (the act of walking with a slow heavy gait; “I could recognize his plod anywhere”)</li><li>prowl – (the act of prowling (walking about in a stealthy manner))</li><li>shamble, shambling, shuffle, shuffling – (walking with a slow dragging motion without lifting your feet; “from his shambling I assumed he was very old”)</li><li>wading – (walking with your feet in shallow water)</li></ul></li></ul><p>2 senses of prowl                                                       </p><p>Sense 1<br>prowl – (move about in or as if in a predatory manner; “The suspicious stranger prowls the streets of the town”)</p><ul><li>walk – (use one’s feet to advance; advance by steps; “Walk, don’t run!”; “We walked instead of driving”; “She walks with a slight limp”; “The patient cannot walk yet”; “Walk over to the cabinet”)<ul><li>tramp down, trample, tread down – (walk on and flatten; “tramp down the grass”; “trample the flowers”)</li><li>lollop – (walk clumsily and with a bounce)</li><li>tap – (walk with a tapping sound)</li><li>stumble, falter, bumble – (walk unsteadily; “The drunk man stumbled about”)</li><li>spacewalk – (move in space outside a space craft)</li><li>foot, leg it, hoof, hoof it – (walk; “let’s hoof it to the disco”)</li><li>toe – (walk so that the toes assume an indicated position or direction; “She toes inwards”)</li><li>traipse, shlep – (walk or tramp about)</li><li>perambulate, walk about, walk around – (walk with no particular goal; “we were walking around in the garden”; “after breakfast, she walked about in the park”)</li><li>ambulate – (walk about; not be bedridden or incapable of walking)</li><li>sneak, mouse, creep, pussyfoot – (to go stealthily or furtively; “..stead of sneaking around spying on the neighbor’s house”)</li><li>wade – (walk (through relatively shallow water); “Can we wade across the river to the other side?”; “Wade the pond”)</li><li>tittup, swagger, ruffle, prance, strut, sashay, cock – (to walk with a lofty proud gait, often in an attempt to impress others; “He struts around like a rooster in a hen house”)</li><li>sleepwalk, somnambulate – (walk in one’s sleep)</li><li>slink – (walk stealthily; “I saw a cougar slinking toward its prey”)</li><li>limp, gimp, hobble, hitch – (walk impeded by some physical limitation or injury; “The old woman hobbles down to the store every day”)</li><li>shuffle, scuffle, shamble – (walk by dragging one’s feet; “he shuffled out of the room”; “We heard his feet shuffling down the hall”)</li><li>stroll, saunter – (walk leisurely and with no apparent aim)</li><li>amble, mosey – (walk leisurely)</li><li>prowl – (move about in or as if in a predatory manner; “The suspicious stranger prowls the streets of the town”)</li><li>skulk – (move stealthily; “The lonely man skulks down the main street all day”)</li><li>toddle, coggle, totter, dodder, paddle, waddle – (walk unsteadily; “small children toddle”)</li><li>promenade – (take a leisurely walk; “The ladies promenaded along the beach”)</li><li>march – (walk fast, with regular or measured steps; walk with a stride; “He marched into the classroom and announced the exam”; “The soldiers marched across the border”)</li><li>stride – (walk with long steps; “He strode confidently across the hall”)</li><li>hike – (walk a long way, as for pleasure or physical exercise; “We were hiking in Colorado”; “hike the Rockies”)</li><li>slog, footslog, plod, trudge, pad, tramp – (walk heavily and firmly, as when weary, or through mud; “Mules plodded in a circle around a grindstone”)</li><li>tiptoe, tip, tippytoe – (walk on one’s toes)</li><li>stalk – (walk stiffly)</li><li>flounce – (walk emphatically)</li><li>stagger, reel, keel, lurch, swag, careen – (walk as if unable to control one’s movements; “The drunken man staggered into the room”)</li><li>stagger, flounder – (walk with great difficulty; “He staggered along in the heavy snow”)</li><li>stomp, stamp, stump – (walk heavily; “The men stomped through the snow in their heavy boots”)</li><li>lumber, pound – (move heavily or clumsily; “The heavy man lumbered across the room”)</li><li>pace – (walk with slow or fast paces; “He paced up and down the hall”)</li><li>tread, trample – (tread or stomp heavily or roughly; “The soldiers trampled across the fields”)</li><li>slouch – (walk slovenly)</li><li>mince – (walk daintily; “She minced down the street”)</li><li>clump, clomp – (walk clumsily)</li><li>march, process – (march in a procession; “They processed into the dining room”)</li><li>step – (walk a short distance to a specified place or in a specified manner; “step over to the blackboard”)</li></ul></li></ul><p>Sense 2<br>prowl, lurch – (loiter about, with no apparent aim)</p><ul><li>loiter, lounge, footle, lollygag, loaf, lallygag, hang around, mess about, tarry, linger, lurk, mill about, mill around – (be about; “The high school students like to loiter in the Central Square”; “Who is this man that is hanging around the department?”)<ul><li>prowl, lurch – (loiter about, with no apparent aim)<h2 id="exasperate"><a href="#exasperate" class="headerlink" title="exasperate"></a>exasperate</h2>3 senses of exasperate                                                  </li></ul></li></ul><p>Sense 1<br>exacerbate, exasperate, aggravate – (exasperate or irritate)</p><ul><li>anger – (make angry; “The news angered him”)<ul><li>combust – (cause to become violent or angry; “Riots combusted Pakistan after the U.S. air attacks on Afghanistan”)</li><li>miff – (cause to be annoyed; “His behavior really miffed me”)</li><li>gall, irk – (irritate or vex; “It galls me that we lost the suit”)</li><li>infuriate, exasperate, incense – (make furious)</li><li>madden – (make mad; “His behavior is maddening”)</li><li>pique, offend – (cause to feel resentment or indignation; “Her tactless remark offended me”)</li><li>enrage – (put into a rage; make violently angry)</li><li>exacerbate, exasperate, aggravate – (exasperate or irritate)</li></ul></li></ul><p>Sense 2<br>infuriate, exasperate, incense – (make furious)</p><ul><li>anger – (make angry; “The news angered him”)<ul><li>combust – (cause to become violent or angry; “Riots combusted Pakistan after the U.S. air attacks on Afghanistan”)</li><li>miff – (cause to be annoyed; “His behavior really miffed me”)</li><li>gall, irk – (irritate or vex; “It galls me that we lost the suit”)</li><li>infuriate, exasperate, incense – (make furious)</li><li>madden – (make mad; “His behavior is maddening”)</li><li>pique, offend – (cause to feel resentment or indignation; “Her tactless remark offended me”)</li><li>enrage – (put into a rage; make violently angry)</li><li>exacerbate, exasperate, aggravate – (exasperate or irritate)</li></ul></li></ul><p>Sense 3<br>worsen, aggravate, exacerbate, exasperate – (make worse; “This drug aggravates the pain”)</p><ul><li>change, alter, modify – (cause to change; make different; cause a transformation; “The advent of the automobile may have altered the growth pattern of the city”; “The discussion has changed my thinking about the issue”)<ul><li>awaken, wake, waken, rouse, wake up, arouse – (cause to become awake or conscious; “He was roused by the drunken men in the street”; “Please wake me at 6 AM.”)</li><li>cause to sleep – (make fall asleep; “The soft music caused us to fall asleep”)</li><li>affect – (act physically on; have an effect upon)</li><li>refresh, freshen, refreshen – (make fresh again)</li><li>inseminate, fecundate, fertilize, fertilise – (introduce semen into (a female))</li><li>indispose – (cause to feel unwell; “She was indisposed”)</li><li>cry – (bring into a particular state by crying; “The little boy cried himself to sleep”)</li><li>etiolate – (make pale or sickly; “alcohol etiolates your skin”)</li><li>brutalize, brutalise, animalize, animalise – (make brutal, unfeeling, or inhuman; “Life in the camps had brutalized him”)</li><li>convert – (change the nature, purpose, or function of something; “convert lead into gold”; “convert hotels into jails”; “convert slaves to laborers”)</li><li>opalize, opalise – (make opalescent)</li><li>arterialize, arterialise – (change venous blood into arterial blood)</li><li>make, get – (give certain properties to something; “get someone mad”; “She made us look silly”; “He made a fool of himself at the meeting”; “Don’t make this into a big deal”; “This invention will make you a millionaire”; “Make yourself clear”)</li><li>counterchange, transpose, interchange – (cause to change places; “interchange this screw for one of a smaller size”)</li><li>vascularize, vascularise – (make vascular; “the yolk sac is gradually vascularized”)</li><li>decrepitate – (to roast or calcine so as to cause to crackle or until crackling stops; “decrepitate salts”)</li><li>suburbanize, suburbanise – (make suburban in character; “highly suburbanized cities”)</li><li>revolutionize, revolutionise, overturn – (change radically; “E-mail revolutionized communication in academe”)</li><li>etiolate – (bleach and alter the natural development of (a green plant) by excluding sunlight)</li><li>barbarize, barbarise – (make crude or savage in behavior or speech; “his years in prison have barbarized the young man”)</li><li>alkalinize, alkalinise – (make (a substance) alkaline; “The oxide is alkalized”)</li><li>mythologize, mythologise, mythicize, mythicise – (make into a myth; “The Europeans have mythicized Rte. 66”)</li><li>allegorize, allegorise – (make into an allegory; “The story was allegorized over time”)</li><li>demythologize, demythologise – (remove the mythical element from (writings); “the Bible should be demythologized and examined for its historical value”)</li><li>bring, land – (bring into a different state; “this may land you in jail”)</li><li>coarsen – (make less subtle or refined; “coarsen one’s ideals”)</li><li>affect, impact, bear upon, bear on, touch on, touch – (have an effect upon; “Will the new rules affect me?”)</li><li>alchemize, alchemise – (alter (elements) by alchemy)</li><li>alcoholize, alcoholise – (make alcoholic, as by fermenting; “alcoholize prunes”)</li><li>shape, form – (give shape or form to; “shape the dough”; “form the young child’s character”)</li><li>round off, round down, round out, round – (express as a round number; “round off the amount”)</li><li>suspend – (cause to be held in suspension in a fluid; “suspend the particles”)</li><li>sober – (cause to become sober; “A sobering thought”)</li><li>reconstruct – (cause somebody to adapt or reform socially or politically)</li><li>increase – (make bigger or more; “The boss finally increased her salary”; “The university increased the number of students it admitted”)</li><li>ease up, ease off, let up – (reduce pressure or intensity; “he eased off the gas pedal and the car slowed down”)</li><li>assimilate – (make similar; “This country assimilates immigrants very quickly”)</li><li>dissimilate – (make dissimilar; cause to become less similar)</li><li>commute, convert, exchange – (exchange a penalty for a less severe one)</li><li>vitalize, vitalise – (give life to; “The eggs are vitalized”)</li><li>unclutter, clear – (rid of obstructions; “Clear your desk”)</li><li>activate – (make active or more active; “activate an old file”)</li><li>activate – (make (substances) radioactive)</li><li>activate, aerate – (aerate (sewage) so as to favor the growth of organisms that decompose organic matter)</li><li>activate – (make more adsorptive; “activate a metal”)</li><li>inactivate, deactivate – (make inactive; “they deactivated the file”)</li><li>deaden, blunt – (make less lively, intense, or vigorous; impair in vigor, force, activity, or sensation; “Terror blunted her feelings”; “deaden a sound”)</li><li>remodel, reconstruct, redo – (do over, as of (part of) a house; “We are remodeling these rooms”)</li><li>edit, redact – (prepare for publication or presentation by correcting, revising, or adapting; “Edit a book on lexical semantics”; “she edited the letters of the politician so as to omit the most personal passages”)</li><li>edit, cut, edit out – (cut and assemble the components of; “edit film”; “cut recording tape”)</li><li>tame, chasten, subdue – (correct by punishment or discipline)</li><li>chasten, moderate, temper – (restrain or temper)</li><li>better, improve, amend, ameliorate, meliorate – (to make better; “The editor improved the manuscript with his changes”)</li><li>worsen, aggravate, exacerbate, exasperate – (make worse; “This drug aggravates the pain”)</li><li>wet – (cause to become wet; “Wet your face”)</li><li>dry, dry out – (remove the moisture from and make dry; “dry clothes”; “dry hair”)</li><li>lubricate – (make slippery or smooth through the application of a lubricant; “lubricate the key”)</li><li>strengthen, beef up, fortify – (make strong or stronger; “This exercise will strengthen your upper body”; “strengthen the relations between the two countries”)</li><li>spike, lace, fortify – (add alcohol to (beverages); “the punch is spiked!”)</li><li>weaken – (lessen the strength of; “The fever weakened his body”)</li><li>blunt – (make less sharp; “blunt the knives”)</li><li>oxidize, oxidise, oxidate – (add oxygen to or combine with oxygen)</li><li>unite, unify, merge – (join or combine; “We merged our resources”)</li><li>age – (make older; “The death of his child aged him tremendously”)</li><li>ripen, mature – (cause to ripen or develop fully; “The sun ripens the fruit”; “Age matures a good wine”)</li><li>antique, antiquate – (give an antique appearance to; “antique furniture”)</li><li>antiquate – (make obsolete or old-fashioned)</li><li>develop, make grow – (cause to grow and differentiate in ways conforming to its natural development; “The perfect climate here develops the grain”; “He developed a new kind of apple”)</li><li>soften – (make soft or softer; “This liquid will soften your laundry”)</li><li>damage – (inflict damage upon; “The snow damaged the roof”; “She damaged the car when she hit the tree”)</li><li>ossify – (cause to become hard and bony; “The disease ossified the tissue”)</li><li>acerbate – (make sour or bitter)</li><li>stabilize, stabilise – (make stable and keep from fluctuating or put into an equilibrium; “The drug stabilized her blood pressure”; “stabilize prices”)</li><li>destabilize, destabilise – (make unstable; “Terrorism destabilized the government”)</li><li>sensitize, sensitise, sensify, sensibilize, sensibilise – (make sensitive or aware; “He was not sensitized to her emotional needs”)</li><li>desensitize, desensitise – (make insensitive; “His military training desensitized him”)</li><li>habituate, accustom – (make psychologically or physically used (to something); “She became habituated to the background music”)</li><li>disorder, disarray – (bring disorder to)</li><li>discolor – (cause to lose or change color; “The detergent discolored my shirts”)</li><li>color, colorize, colorise, colourise, colourize, colour, color in, colour in – (add color to; “The child colored the drawings”; “Fall colored the trees”; “colorize black and white film”)</li><li>stain – (produce or leave stains; “Red wine stains the table cloth”)</li><li>hue – (take on color or become colored; “In highlights it hued to a dull silver-grey”)</li><li>uglify – (make ugly)</li><li>untune – (cause to be out of tune; “Don’t untune that string!”)</li><li>adjust, set, correct – (alter or regulate so as to achieve accuracy or conform to a standard; “Adjust the clock, please”; “correct the alignment of the front wheels”)</li><li>set – (put into a certain state; cause to be in a certain state; “set the house afire”)</li><li>disqualify, unfit, indispose – (make unfit or unsuitable; “Your income disqualifies you”)</li><li>domesticate, domesticize, domesticise, reclaim, tame – (overcome the wildness of; make docile and tractable; “He tames lions for the circus”; “reclaim falcons”)</li><li>widen – (make wider; “widen the road”)</li><li>dehydrogenate – (remove hydrogen from)</li><li>hydrogenate – (combine or treat with or expose to hydrogen; add hydrogen to the molecule of (an unsaturated organic compound))</li><li>oxygenize, oxygenise – (change (a compound) by increasing the proportion of the electronegative part; or change (an element or ion) from a lower to a higher positive valence: remove one or more electrons from (an atom, ion, or molecule))</li><li>darken – (make dark or darker; “darken a room”)</li><li>brighten, lighten up, lighten – (make lighter or brighter; “The paint will brighten the room”)</li><li>blur, blear – (make dim or indistinct; “The drug blurs my vision”)</li><li>obscure, bedim, overcloud – (make obscure or unclear; “The distinction was obscured”)</li><li>obscure, blot out, obliterate, veil, hide – (make undecipherable or imperceptible by obscuring or concealing; “a hidden message”; “a veiled threat”)</li><li>cook – (transform by heating; “The apothecary cooked the medicinal mixture in a big iron kettle”)</li><li>slenderize, slenderise – (make slender or appear to be slender; “slenderizing skirts”)</li><li>crack – (cause to become cracked; “heat and light cracked the back of the leather chair”)</li><li>dissolve, dismiss – (declare void; “The President dissolved the parliament and called for new elections”)</li><li>end, terminate – (bring to an end or halt; “She ended their friendship when she found out that he had once been convicted of a crime”; “The attack on Poland terminated the relatively peaceful period after WW I”)</li><li>demist, defog – (free from mist; “demist the car windows”)</li><li>condense, concentrate, contract – (compress or concentrate; “Congress condensed the three-year plan into a six-month plan”)</li><li>cool, chill, cool down – (make cool or cooler; “Chill the food”)</li><li>heat, heat up – (make hot or hotter; “the sun heats the oceans”; “heat the water on the stove”)</li><li>warm – (make warm or warmer; “The blanket will warm you”)</li><li>boil – (bring to, or maintain at, the boiling point; “boil this liquid until it evaporates”)</li><li>freeze – (cause to freeze; “Freeze the leftover food”)</li><li>blister – (cause blisters to from on; “the tight shoes and perspiration blistered her feet”)</li><li>switch, change over, shift – (make a shift in or exchange of; “First Joe led; then we switched”)</li><li>transpose – (change key; “Can you transpose this fugue into G major?”)</li><li>convert, change over – (change from one system to another or to a new plan or policy; “We converted from 220 to 110 Volt”)</li><li>transform – (increase or decrease (an alternating current or voltage))</li><li>transform – (change (a bacterial cell) into a genetically distinct cell by the introduction of DNA from another cell of the same or closely related species)</li><li>transform – (convert (one form of energy) to another; “transform energy to light”)</li><li>transmute – (alter the nature of (elements))</li><li>transform, transmute, transubstantiate – (change or alter in form, appearance, or nature; “This experience transformed her completely”; “She transformed the clay into a beautiful sculpture”; “transubstantiate one element into another”)</li><li>ash – (convert into ashes)</li><li>translate, transform – (change from one form or medium into another; “Braque translated collage into oil”)</li><li>reform, reclaim, regenerate, rectify – (bring, lead, or force to abandon a wrong or evil course of life, conduct, and adopt a right one; “The Church reformed me”; “reform your conduct”)</li><li>convert – (cause to adopt a new or different faith; “The missionaries converted the Indian population”)</li><li>Islamize, Islamise – (cause to conform to Islamic law; “Islamize the dietary laws”)</li><li>turn back, invert, reverse – (turn inside out or upside down)</li><li>invert – (make an inversion (in a musical composition); “here the theme is inverted”)</li><li>customize, customise – (make according to requirements; “customize a car”)</li><li>personalize, personalise, individualize, individualise – (make personal or more personal; “personalized service”)</li><li>depersonalize, depersonalise, objectify – (make impersonal or present as an object; “Will computers depersonalize human interactions?”; “Pornography objectifies women”)</li><li>sharpen – (raise the pitch of (musical notes))</li><li>flatten, drop – (lower the pitch of (musical notes))</li><li>disintegrate – (cause to undergo fission or lose particles)</li><li>magnetize, magnetise – (make magnetic; “The strong magnet magnetized the iron shavings”)</li><li>demagnetize, demagnetise, degauss – (make nonmagnetic; take away the magnetic properties (of); “demagnetize the iron shavings”; “they degaussed the ship”)</li><li>simplify – (make simpler or easier or reduce in complexity or extent; “We had to simplify the instructions”; “this move will simplify our lives”)</li><li>complicate, refine, rarify, elaborate – (make more complex, intricate, or richer; “refine a design or pattern”)</li><li>refine – (make more precise or increase the discriminatory powers of; “refine a method of analysis”; “refine the constant in the equation”)</li><li>complicate, perplex – (make more complicated; “There was a new development that complicated the matter”)</li><li>supercharge, pressurize, pressurise – (increase the pressure on a gas or liquid)</li><li>centralize, centralise, concentrate – (make central; “The Russian government centralized the distribution of food”)</li><li>decentralize, deconcentrate, decentralise – (make less central; “After the revolution, food distribution was decentralized”)</li><li>socialize, socialise – (make conform to socialist ideas and philosophies; “Health care should be socialized!”)</li><li>fix, prepare, set up, ready, gear up, set – (make ready or suitable or equip in advance for a particular purpose or for some use, event, etc; “Get the children ready for school!”; “prepare for war”; “I was fixing to leave town after I paid the hotel bill”)</li><li>internationalize, internationalise – (make international in character; “We internationalized the committee”)</li><li>communize, communise, bolshevize, bolshevise – (make Communist or bring in accord with Communist principles; “communize the government”)</li><li>Europeanize, Europeanise – (make (continental) European in customs, character, or ideas)</li><li>Europeanize, Europeanise – (denationalize and subject (a territory) to the supervision of an agency of a European community of nations)</li><li>bestialize, bestialise – (make brutal and depraved; give animal-like qualities to)</li><li>Americanize, Americanise – (make American in character; “The year in the US has completely Americanized him”)</li><li>Frenchify – (make French in appearance or character; “let’s Frenchify the restaurant and charge more money”)</li><li>civilize, civilise – (raise from a barbaric to a civilized state; “The wild child found wandering in the forest was gradually civilized”)</li><li>nationalize, nationalise – (put under state control or ownership; “Mitterand nationalized the banks”)</li><li>denationalize, denationalise – (put under private control or ownership; “The steel industry was denationalized”)</li><li>naturalize, naturalise – (make into a citizen; “The French family was naturalized last year”)</li><li>denaturalize, denaturalise – (strip of the rights and duties of citizenship; “The former Nazi was denaturalized”)</li><li>naturalize, naturalise – (make more natural or lifelike)</li><li>denaturalize, denaturalise – (make less natural or unnatural)</li><li>even, even out – (become even or more even; “even out the surface”)</li><li>equal, match, equalize, equalise, equate – (make equal, uniform, corresponding, or matching; “let’s equalize the duties among all employees in this office”; “The company matched the discount policy of its competitors”)</li><li>stiffen – (make stiff or stiffer; “Stiffen the cream by adding gelatine”)</li><li>loosen, loose – (make loose or looser; “loosen the tension on a rope”)</li><li>tighten, fasten – (make tight or tighter; “Tighten the wire”)</li><li>transitivize, transitivise – (make transitive; “adding `out’ to many verbs transitivizes them”)</li><li>detransitivize, detransitivise, intransitivize, intransitivise – (intransitivize; “removing the object will intransitivize the verbs”)</li><li>thicken, inspissate – (make thick or thicker; “Thicken the sauce”; “inspissate the tar so that it becomes pitch”)</li><li>full – (make (a garment) fuller by pleating or gathering)</li><li>diversify – (make (more) diverse; “diversify a course of study”)</li><li>deaden – (make vapid or deprive of spirit; “deadened wine”)</li><li>check, retard, delay – (slow the growth or development of; “The brain damage will retard the child’s language development”)</li><li>decrease, lessen, minify – (make smaller; “He decreased his staff”)</li><li>liquefy, liquify, liquidize, liquidise – (make (a solid substance) liquid, as by heating; “liquefy the silver”)</li><li>solvate – (cause a solvation in (a substance))</li><li>dissolve – (cause to fade away; “dissolve a shot or a picture”)</li><li>validate – (make valid or confirm the validity of; “validate a ticket”)</li><li>invalidate, void, vitiate – (take away the legal force of or render ineffective; “invalidate a contract”)</li><li>empty – (make void or empty of contents; “Empty the box”; “The alarm emptied the building”)</li><li>fill, fill up, make full – (make full, also in a metaphorical sense; “fill a container”; “fill the child with pride”)</li><li>saturate – (cause (a chemical compound, vapour, solution, magnetic material) to unite with the greatest possible amount of another substance)</li><li>clot, coagulate – (cause to change from a liquid to a solid or thickened state)</li><li>louden – (cause to become loud)</li><li>normalize, normalise, renormalize, renormalise – (make normal or cause to conform to a norm or standard; “normalize relations with China”; “normalize the temperature”; “normalize the spelling”)</li><li>morph – (cause to change shape in a computer animation; “The computer programmer morphed the image”)</li><li>neutralize, neutralise – (make chemically neutral; “She neutralized the solution”)</li><li>commercialize, commercialise, market – (make commercial; “Some Amish people have commercialized their way of life”)</li><li>purify, purge, sanctify – (make pure or free from sin or guilt; “he left the monastery purified”)</li><li>mechanize, mechanise – (make mechanical; “mechanize the procedure”)</li><li>automatize, automatise, automate – (make automatic or control or operate automatically; “automatize the production”; “automate the movement of the robot”)</li><li>automatize, automatise – (turn into an automaton)</li><li>mechanize, mechanise – (make monotonous; make automatic or routine; “If your work becomes too mechanized, change jobs!”)</li><li>harmonize, harmonise, chord – (bring into consonance, harmony, or accord while making music or singing)</li><li>polarize, polarise – (cause to vibrate in a definite pattern; “polarize light waves”)</li><li>glorify – (bestow glory upon; “The victory over the enemy glorified the Republic”)</li><li>contaminate – (make radioactive by adding radioactive material; “Don’t drink the water–it’s contaminated”)</li><li>devalue – (lower the value or quality of; “The tear devalues the painting”)</li><li>insulate – (protect from heat, cold, or noise by surrounding with insulating material; “We had his bedroom insulated before winter came”)</li><li>calcify – (convert into lime; “the salts calcified the rock”)</li><li>urbanize, urbanise – (make more industrial or city-like; “The area was urbanized after many people moved in”)</li><li>urbanize, urbanise – (impart urban habits, ways of life, or responsibilities upon; “Birds are being urbanized by people in outdoor cafes feeding them”)</li><li>emulsify – (cause to become an emulsion; make into an emulsion)</li><li>demulsify – (cause to demulsify)</li><li>decarboxylate – (remove a carboxyl group from (a chemical compound))</li><li>nazify – (cause or force to adopt Nazism or a Nazi character; “Hitler nazified Germany in the 1930’s”; “The arts were nazified everywhere in Germany”)</li><li>fertilize, fecundate, fertilise – (make fertile or productive; “The course fertilized her imagination”)</li><li>clarify – (make clear by removing impurities or solids, as by heating; “clarify the butter”; “clarify beer”)</li><li>embrittle – (make brittle)</li><li>mark – (make or leave a mark on; “the scouts marked the trail”; “ash marked the believers’ foreheads”)</li><li>barb – (provide with barbs; “barbed wire”)</li><li>nick – (divide or reset the tail muscles of; “nick horses”)</li><li>disable, disenable, incapacitate – (make unable to perform a certain action; “disable this command on your computer”)</li><li>enable – (render capable or able for some task; “This skill will enable you to find a job on Wall Street”; “The rope enables you to secure yourself when you climb the mountain”)</li><li>de-emphasize, de-emphasise, destress – (reduce the emphasis)</li><li>tender, tenderize, tenderise – (make tender or more tender as by marinating, pounding, or applying a tenderizer; “tenderize meat”)</li><li>charge – (cause formation of a net electrical charge in or on; “charge a conductor”)</li><li>sweeten – (make sweeter, more pleasant, or more agreeable; “sweeten a deal”)</li><li>iodinate – (cause to combine with iodine; “iodinate thyroxine”)</li><li>ionate – (add ions to)</li><li>archaize, archaise – (give an archaic appearance of character to; “archaized craftwork”)</li><li>inform – (give character or essence to; “The principles that inform modern teaching”)</li><li>officialize, officialise – (make official; “We officialized our relationship”)</li><li>occidentalize, occidentalise, westernize, westernise – (make western in character; “The country was Westernized after it opened up”)</li><li>orientalize, orientalise – (make oriental in character; “orientalize your garden”)</li><li>acetylate, acetylize, acetylise – (introduce an acetyl group into (a chemical compound))</li><li>achromatize, achromatise – (remove color from; “achromatize the lenses”)</li><li>parallel, collimate – (make or place parallel to something; “They paralleled the ditch to the highway”)</li><li>camp – (give an artificially banal or sexual quality to)</li><li>classicize, classicise – (make classic or classical)</li><li>conventionalize, conventionalise – (make conventional or adapt to conventions; “conventionalized behavior”)</li><li>decimalize, decimalise – (change from fractions to decimals; “Stock prices will be decimalized in the year 2000”)</li><li>dizzy – (make dizzy or giddy; “a dizzying pace”)</li><li>poison, envenom – (add poison to; “Her husband poisoned her drink in order to kill her”)</li><li>exteriorize, exteriorise, externalize, externalise, objectify – (make external or objective, or give reality to; “language externalizes our thoughts”)</li><li>glamorize, glamourise, glamourize, glamorise – (make glamorous and attractive; “This new wallpaper really glamorizes the living room!”)</li><li>introvert – (turn inside; “He introverted his feelings”)</li><li>laicize, laicise – (reduce to lay status; “laicize the parochial schools”)</li><li>politicize, politicise – (give a political character to; “politicize the discussion”)</li><li>radicalize – (make more radical in social or political outlook; “Her work in the developing world radicalized her”)</li><li>proof – (activate by mixing with water and sometimes sugar or milk; “proof yeast”)</li><li>romanticize, romanticise – (make romantic in style; “The designer romanticized the little black dress”)</li><li>rusticate – (lend a rustic character to; “rusticate the house in the country”)</li><li>sauce – (add zest or flavor to, make more interesting; “sauce the roast”)</li><li>shallow, shoal – (make shallow; “The silt shallowed the canal”)</li><li>tense – (increase the tension on; “alternately relax and tense your calf muscle”; “tense the rope manually before tensing the spring”)</li><li>steepen – (make steeper; “The landslides have steepened the mountain sides”)</li><li>scramble – (make unintelligible; “scramble the message so that nobody can understand it”)</li><li>unscramble – (make intelligible; “Can you unscramble the message?”)</li><li>unsex – (remove the qualities typical of one’s sex; “She unsexed herself”)</li><li>vitrify – (change into glass or a glass-like substance by applying heat)</li><li>pall – (cause to become flat; “pall the beer”)</li><li>saponify – (convert into soap by hydrolizing an ester into an acid and alcohol as a result of treating it with an alkali; “saponify oils and fats”)</li><li>extend, expand – (expand the influence of; “The King extended his rule to the Eastern part of the continent”)</li><li>suspend, set aside – (make inoperative or stop; “suspend payments on the loan”)</li><li>muddy – (make turbid; “muddy the water”)</li><li>transform – (subject to a mathematical transformation)</li><li>lift, raise, elevate – (raise in rank or condition; “The new law lifted many people from poverty”)</li><li>harshen – (make harsh or harsher; “Winter harshened the look of the city”)</li><li>dinge – (make dingy)</li><li>demonize, demonise – (make into a demon; “Power had demonized him”)</li><li>devilize, devilise, diabolize, diabolise – (turn into a devil or make devilish; “Man devilized by war”)</li><li>etherealize, etherialise – (make ethereal)</li><li>immaterialize, immaterialise, unsubstantialize, unsubstantialise – (render immaterial or incorporeal)</li><li>animize, animise, animate – (give lifelike qualities to; “animated cartoons”)</li><li>clear – (make clear, bright, light, or translucent; “The water had to be cleared through filtering”)</li><li>dynamize, dynamise – (make (a drug) effective; “dynamized medicine”)</li><li>dynamize, dynamise – (make more dynamic; “She was dynamized by her desire to go to grad school”)</li><li>rarefy, sublimate, subtilize – (make more subtle or refined)</li><li>volatilize, volatilise – (make volatile; cause to pass off in a vapor)</li><li>uniformize, uniformise – (make uniform; “the data have been uniformized”)</li><li>symmetrize, symmetrise – (make symmetric; “symmetrized waves”)</li><li>immortalize, immortalise, eternize, eternise, eternalize, eternalise – (make famous forever; “This melody immortalized its composer”)</li><li>denature – (make (alcohol) unfit for drinking without impairing usefulness for other purposes)</li><li>denature – (modify (as a native protein) especially by heat, acid, alkali, or ultraviolet radiation so that all of the original properties are removed or diminished)</li><li>denature – (add nonfissionable material to (fissionable material) so as to make unsuitable for use in an atomic bomb)</li><li>sanitize, sanitise – (make less offensive or more acceptable by removing objectionable features; “sanitize a document before releasing it to the press”; “sanitize history”; “sanitize the language in a book”)</li><li>verbify – (make into a verb; “‘mouse’ has been verbified by computer users”)</li><li>shift – (move from one setting or context to another; “shift the emphasis”; “shift one’s attention”)</li><li>sputter – (cause to undergo a process in which atoms are removed; “The solar wind protons must sputter away the surface atoms of the dust”)</li><li>draw – (bring or lead someone to a certain action or condition; “She was drawn to despair”; “The President refused to be drawn into delivering an ultimatum”; “The session was drawn to a close”)</li><li>make – (change from one form into another; “make water into wine”; “make lead into gold”; “make clay into bricks”)</li><li>dope – (add impurities to (a semiconductor) in order to produce or modify its properties; “The resistors have been doped”)</li><li>prostrate – (render helpless or defenseless; “They prostrated the enemy”)</li><li>excite – (produce a magnetic field in; “excite the neurons”)</li><li>excite, energize, energise – (raise to a higher energy level; “excite the atoms”)</li><li>shake – (bring to a specified condition by or as if by shaking; “He was shaken from his dreams”; “shake the salt out of the salt shaker”)</li><li>outmode – (make unfashionable, outdated, or obsolete; “Modern ways of cooking have outmoded the hearth”)</li><li>spice, spice up – (make more interesting or flavorful; “Spice up the evening by inviting a belly dancer”)</li><li>shorten – (make short or shorter; “shorten the skirt”; “shorten the rope by a few inches”)</li><li>think – (bring into a given condition by mental preoccupation; “She thought herself into a state of panic over the final exam”)</li><li>make – (cause to be enjoyable or pleasurable; “make my day”)</li><li>deflate – (produce deflation in; “The new measures deflated the economy”)</li><li>inflate – (cause prices to rise by increasing the available currency or credit; “The war inflated the economy”)</li><li>reflate – (economics: raise demand, expand the money supply, or raise prices, after a period of deflation; “These measures reflated the economy”)</li><li>digitize, digitise, digitalize, digitalise – (put into digital form, as for use in a computer; “he bought a device to digitize the data”)</li><li>gelatinize, gelatinise – (convert into gelatinous form or jelly; “hot water will gelatinize starch”)</li><li>recombine – (cause genetic recombination; “should scientists recombine DNA?”)</li><li>feminize, feminise, effeminize, erreminise, womanize – (to give a (more) feminine, effeminate, or womanly quality or appearance to; “This hairdo feminizes the man”)</li><li>masculinize, masculinise, virilize, virilise – (produce virilism in or cause to assume masculine characteristics, as through a hormonal imbalance or hormone therapy; “the drugs masculinized the teenage girl”)</li><li>masculinize – (give a masculine appearance or character to; “Fashion designers have masculinized women’s looks in the 1990s”)</li><li>disharmonize, dissonate – (cause to sound harsh and unpleasant)</li><li>sexualize, sexualise – (make sexual, endow with sex, attribute sex to; “The god was sexualized and married to another god”; “Some languages sexualize all nouns and do not have a neuter gender”)</li><li>schematize, schematise – (give conventional form to; “some art forms schematise designs into geometrical patterns”)</li><li>patent – (make open to sight or notice; “His behavior has patented an embarrassing fact about him”)</li><li>constitutionalize, constitutionalise – (incorporate into a constitution, make constitutional; “A woman’s right to an abortion was constitutionalized in the 1970’s”)</li><li>rationalize, rationalise – (remove irrational quantities from; “This function can be rationalized”)</li><li>plasticize, plasticise – (make plastic, as by the addition of a plasticizer; “plasticized PVC”)</li><li>rarefy – (lessen the density or solidity of; “The bones are rarefied”)</li><li>paganize, paganise – (make pagan in character; “The Church paganized Christianity”)</li><li>incandesce – (cause to become incandescent or glow; “the lamp was incandesced”)</li><li>deaminate, deaminize – (remove the amino radical (usually by hydrolysis) from an amino compound; to perform deamination)</li><li>angulate – (make or become angular)</li><li>circularize – (make circular)</li><li>sensitize, sensitise – (make (a material) sensitive to light, often of a particular colour, by coating it with a photographic emulsion; “sensitize the photographic film”)</li><li>sensitize, sensitise – (make sensitive to a drug or allergen; “Long-term exposure to this medicine may sensitize you to the allergen”)</li><li>depolarize, depolarise – (eliminate the polarization of)</li><li>intensify – (make the chemically affected part of (a negative) denser or more opaque in order produce a stronger contrast between light and dark)</li><li>isomerize, isomerise – (cause to change into an isomer)</li><li>legitimate – (make (an illegitimate child) legitimate; declare the legitimacy of (someone); “They legitimized their natural child”)</li><li>evaporate, vaporise – (cause to change into a vapor; “The chemist evaporated the water”)</li><li>industrialize, industrialise – (organize the production of into an industry; “The Chinese industrialized textile production”)</li><li>opacify – (make opaque; “The glass was opacified more greater privacy”)</li><li>opsonize – (make (cells) more susceptible to the action of phagocytes)</li><li>militarize, militarise – (adopt for military use; “militarize the Civil Service”)</li><li>nationalize, nationalise – (make national in character or scope; “His heroic deeds were nationalized by the press”)</li><li>recommend – (make attractive or acceptable; “Honesty recommends any person”)</li><li>sentimentalize, sentimentalise – (make (someone or something) sentimental or imbue with sentimental qualities; “Too much poetry sentimentalizes the mind”; “These experiences have sentimentalized her”)</li><li>solemnize, solemnise – (make solemn and grave; “This ceremony solemnized our hearts”)</li><li>territorialize, territorialise – (place on a territorial basis; “The railways were territorialized”)</li><li>transaminate – (change (an amino group) by transferring it from one compound to another)</li><li>transfigure, glorify, spiritualize – (elevate or idealize, in allusion to Christ’s transfiguration)</li><li>unsanctify – (remove the sanctification from or make unsanctified)</li><li>vesiculate – (cause to become vesicular or full of air cells; “vesiculate an organ”)</li><li>visualize, visualise – (make visible; “With this machine, ultrasound can be visualized”)</li><li>variegate – (change the appearance of, especially by marking with different colors)</li><li>ventilate – (furnish with an opening to allow air to circulate or gas to escape; “The architect did not think about ventilating the storage space”)</li><li>vivify – (make more striking or animated; “his remarks always vivify an otherwise dull story”)</li><li>vulgarise, vulgarize – (debase and make vulgar; “The Press has vulgarized Love and Marriage”)</li><li>supple – (make pliant and flexible; “These boots are not yet suppled by frequent use”)</li><li>professionalize, professionalise – (make professional or give a professional character to; “Philosophy has not always been professionalized and used to be a subject pursued only by amateurs”)</li><li>smut – (make obscene; “This line in the play smuts the entire act”)</li><li>still – (make motionless)</li><li>weaponize – (make into or use as a weapon or a potential weapon; “Will modern physicists weaponize String Theory?”)</li><li>eroticize, sex up – (give erotic or sexy character to; “eroticize the ads”)</li><li>piggyback – (bring into alignment with; “an amendment to piggyback the current law”)</li><li>confuse, blur, obscure, obnubilate – (make unclear, indistinct, or blurred; “Her remarks confused the debate”; “Their words obnubilate their intentions”)</li><li>confuse – (make unclear or incomprehensible; “The new tax return forms only confuse”)</li><li>tone down, moderate, tame – (make less strong or intense; soften; “Tone down that aggressive letter”; “The author finally tamed some of his potentially offensive statements”)</li><li>obfuscate – (make obscure or unclear)</li><li>synchronize, synchronise – (make (motion picture sound) exactly simultaneous with the action; “synchronize this film”)</li><li>mince, soften, moderate – (make less severe or harsh; “He moderated his tone when the students burst out in tears”)</li><li>militarize, militarise – (lend a military character to (a country), as by building up a military force; “militarize Germany again after the war”)</li><li>break down, crush – (make ineffective; “Martin Luther King tried to break down racial discrimination”)</li><li>fatten, fat, flesh out, fill out, plump, plump out, fatten out, fatten up – (make fat or plump; “We will plump out that poor starving child”)</li><li>touch, disturb – (tamper with; “Don’t touch my CDs!”)</li><li>dull – (make dull in appearance; “Age had dulled the surface”)</li><li>dull, blunt – (make dull or blunt; “Too much cutting dulls the knife’s edge”)</li><li>sharpen – (make sharp or sharper; “sharpen the knives”)</li><li>coarsen – (make or become coarse or coarser; “coarsen the surface”; “Their minds coarsened”)</li><li>loosen – (make less dense; “loosen the soil”)</li><li>untie, undo, loosen – (cause to become loose; “undo the shoelace”; “untie the knot”; “loosen the necktie”)</li><li>barb – (provide with barbs; “barbed wire”)</li><li>string – (provide with strings; “string my guitar”)</li><li>straighten, straighten out – (make straight)</li><li>bring – (cause to come into a particular state or condition; “Long hard years of on the job training had brought them to their competence”; “bring water to the boiling point”)</li><li>mix, mingle, commix, unify, amalgamate – (to bring or combine together or with something else; “resourcefully he mingled music and dance”)</li><li>charge – (fill or load to capacity; “charge the wagon with hay”)</li><li>put – (cause to be in a certain state; cause to be in a certain relation; “That song put me in awful good humor”)</li><li>clean, make clean – (make clean by removing dirt, filth, or unwanted substances from; “Clean the stove!”; “The dentist cleaned my teeth”)</li><li>dirty, soil, begrime, grime, colly, bemire – (make soiled, filthy, or dirty; “don’t soil your clothes when you play outside!”)</li><li>lower, depress – (cause to drop or sink; “The lack of rain had depressed the water level in the reservoir”)</li><li>deform – (make formless; “the heat deformed the plastic sculpture”)</li><li>break, break up – (destroy the completeness of a set of related items; “The book dealer would not break the set”)</li><li>alter – (make an alteration to; “This dress needs to be altered”)</li><li>decorate, adorn, grace, ornament, embellish, beautify – (make more attractive by adding ornament, colour, etc.; “Decorate the room for the party”; “beautify yourself for the special day”)</li><li>humanize, humanise – (make more humane; “The mayor tried to humanize life in the big city”)</li><li>humble – (cause to be unpretentious; “This experience will humble him”)</li><li>estrange, alienate, alien, disaffect – (arouse hostility or indifference in where there had formerly been love, affection, or friendliness; “She alienated her friends when she became fanatically religious”)</li><li>right – (put in or restore to an upright position; “They righted the sailboat that had capsized”)</li><li>desensitize, desensitise – (cause not to be sensitive; “The war desensitized many soldiers”; “The photographic plate was desensitized”)</li><li>deodorize, deodorise, deodourise – (eliminate the odor from; “This stick will deodorize your armpits”)</li><li>develop – (make visible by means of chemical solutions; “Please develop this roll of film for me”)</li><li>blur – (to make less distinct or clear; “The haze blurs the hills”)</li><li>blind – (make blind by putting the eyes out; “The criminals were punished and blinded”)</li><li>change intensity – (increase or decrease in intensity)</li><li>change taste – (alter the flavor of)</li><li>capture – (bring about the capture of an elementary particle or celestial body and causing it enter a new orbit; “This nucleus has captured the slow-moving neutrons”; “The star captured a comet”)</li><li>lend, impart, bestow, contribute, add, bring – (bestow a quality on; “Her presence lends a certain cachet to the company”; “The music added a lot to the play”; “She brings a special atmosphere to our meetings”; “This adds a light note to the program”)</li><li>restore, reinstate, reestablish – (bring back into original existence, use, function, or position; “restore law and order”; “reestablish peace in the region”; “restore the emperor to the throne”)</li><li>liberalize, liberalise – (make liberal or more liberal, of laws and rules)</li><li>right, compensate, redress, correct – (make reparations or amends for; “right a wrongs done to the victims of the Holocaust”)</li><li>democratize, democratise – (introduce democratic reforms; of nations)</li><li>neutralize – (make politically neutral and thus inoffensive; “The treaty neutralized the small republic”)</li><li>corrupt, pervert, subvert, demoralize, demoralise, debauch, debase, profane, vitiate, deprave, misdirect – (corrupt morally or by intemperance or sensuality; “debauch the young people with wine and women”; “Socrates was accused of corrupting young men”; “Do school counselors subvert young children?”; “corrupt the morals”)</li><li>relax, loosen – (make less severe or strict; “The government relaxed the curfew after most of the rebels were caught”)</li><li>unite, unify – (bring together for a common purpose or action or ideology or in a shared situation; “the Democratic Patry platform united several splinter groups”)</li><li>flocculate – (cause to become a fluffy or lumpy aggregate; “The chemist flocculated the suspended material”)</li><li>turn – (cause to change or turn into something different;assume new characteristics; “The princess turned the frog into a prince by kissing him”; “The alchemists tried to turn lead into gold”)</li><li>make possible – (make accessible; “This answer opens the door to new objections”)</li><li>cohere – (cause to form a united, orderly, and aesthetically consistent whole; “Religion can cohere social groups”)<h2 id="animus"><a href="#animus" class="headerlink" title="animus"></a>animus</h2></li></ul></li></ul><p>1 sense of animus                                                       </p><p>Sense 1<br>animosity, animus, bad blood – (a feeling of ill will arousing active hostility)</p><ul><li>hostility, enmity, ill will – (the feeling of a hostile person; “he could no longer contain his hostility”)<ul><li>animosity, animus, bad blood – (a feeling of ill will arousing active hostility)</li><li>class feeling – (feelings of envy and resentment of one social or economic class for toward another)</li><li>antagonism – (an actively expressed feeling of dislike and hostility)</li><li>aggression, aggressiveness – (a feeling of hostility that arouses thoughts of attack)</li><li>belligerence, belligerency – (hostile or warlike attitude or nature)</li><li>resentment, bitterness, gall, rancor, rancour – (a feeling of deep and bitter anger and ill-will)</li></ul></li></ul><h2 id="epilogue"><a href="#epilogue" class="headerlink" title="epilogue"></a>epilogue</h2><p>2 senses of epilogue                                                    </p><p>Sense 1<br>epilogue, epilog – (a short speech (often in verse) addressed directly to the audience by an actor at the end of a play)</p><ul><li>conclusion, end, close, closing, ending – (the last section of a communication; “in conclusion I want to say…”)<ul><li>anticlimax, bathos – (a change from a serious subject to a disappointing one)</li><li>epilogue, epilog – (a short passage added at the end of a literary work; “the epilogue told what eventually happened to the main characters”)</li><li>epilogue, epilog – (a short speech (often in verse) addressed directly to the audience by an actor at the end of a play)</li><li>peroration – ((rhetoric) the concluding section of an oration; “he summarized his main points in his peroration”)</li><li>finale, coda – (the closing section of a musical composition)</li></ul></li></ul><p>Sense 2<br>epilogue, epilog – (a short passage added at the end of a literary work; “the epilogue told what eventually happened to the main characters”)</p><ul><li>conclusion, end, close, closing, ending – (the last section of a communication; “in conclusion I want to say…”)<ul><li>anticlimax, bathos – (a change from a serious subject to a disappointing one)</li><li>epilogue, epilog – (a short passage added at the end of a literary work; “the epilogue told what eventually happened to the main characters”)</li><li>epilogue, epilog – (a short speech (often in verse) addressed directly to the audience by an actor at the end of a play)</li><li>peroration – ((rhetoric) the concluding section of an oration; “he summarized his main points in his peroration”)</li><li>finale, coda – (the closing section of a musical composition)</li></ul></li></ul><h2 id="iridescent"><a href="#iridescent" class="headerlink" title="iridescent"></a>iridescent</h2><p>2 senses of iridescent                                                  </p><p>Sense 1<br>changeable, chatoyant, iridescent, shot – (varying in color when seen in different lights or from different angles; “changeable taffeta”; “chatoyant (or shot) silk”; “a dragonfly hovered, vibrating and iridescent”)<br>        RELATED TO-&gt;(noun) iridescence#1</p><pre><code>- opalescence, iridescence -- (the visual property of something having a milky brightness and a play of colors from the surface)RELATED TO-&gt;(verb) iridesce#1- iridesce -- (be iridescent; &quot;The corals iridesced under the surface of the clear water&quot;)INDIRECT (VIA colorful) -&gt; colorless, colourless -- (weak in color; not colorful)</code></pre><p>Sense 2<br>iridescent, nacreous, opalescent, opaline, pearlescent – (having a play of lustrous rainbow-like colors; “an iridescent oil slick”; “nacreous (or pearlescent) clouds looking like mother-of-pearl”; “a milky opalescent (or opaline) luster”)<br>       RELATED TO-&gt;(noun) iridescence#1</p><pre><code> - opalescence, iridescence -- (the visual property of something having a milky brightness and a play of colors from the surface)RELATED TO-&gt;(verb) iridesce#1 - iridesce -- (be iridescent; &quot;The corals iridesced under the surface of the clear water&quot;) INDIRECT (VIA bright) -&gt; dull -- (emitting or reflecting very little light; &quot;a dull glow&quot;; &quot;dull silver badly in need of a polish&quot;; &quot;a dull sky&quot;)</code></pre><h2 id="surfeit"><a href="#surfeit" class="headerlink" title="surfeit"></a>surfeit</h2><p>3 senses of surfeit                                                     </p><p>Sense 1<br>surfeit, excess, overabundance – (the state of being more than full)</p><ul><li>fullness – (the condition of being filled to capacity)<ul><li>repletion, satiety, satiation – (the state of being satisfactorily full and unable to take on more)</li><li>surfeit, excess, overabundance – (the state of being more than full)</li><li>solidity – (state of having the interior filled with matter)</li><li>infestation – (the state of being invaded or overrun by parasites)</li></ul></li></ul><p>Sense 2<br>glut, oversupply, surfeit – (the quality of being so overabundant that prices fall)</p><ul><li>overabundance, overmuch, overmuchness, superabundance – (a quantity that is more than what is appropriate; “four-year-olds have an overabundance of energy”; “we received an inundation of email”)<ul><li>excess, surplus, surplusage, nimiety – (a quantity much larger than is needed)</li><li>glut, oversupply, surfeit – (the quality of being so overabundant that prices fall)</li><li>bellyful – (an undesirable overabundance; “a bellyful of your complaints”)</li></ul></li></ul><p>Sense 3<br>repletion, surfeit – (eating until excessively full)</p><ul><li>eating, feeding – (the act of consuming food)<ul><li>mycophagy – (the practice of eating fungi (especially mushrooms collected in the wild))</li><li>bite, chomp – (the act of gripping or chewing off with the teeth and jaws)</li><li>browse, browsing – (the act of feeding by continual nibbling)</li><li>coprophagy, coprophagia – (eating feces; in human a symptom of some kinds of insanity)</li><li>dining – (the act of eating dinner)</li><li>engorgement – (eating ravenously or voraciously to satiation)</li><li>feasting, banqueting – (eating an elaborate meal (often accompanied by entertainment))</li><li>geophagy, geophagia, pica – (eating earth or clay or chalk; occurs in some primitive tribes or sometimes in cases of nutritional deficiency)</li><li>graze, grazing – (the act of grazing)</li><li>lunching – (the act of eating lunch)</li><li>repletion, surfeit – (eating until excessively full)</li><li>supping – (ingestion of liquid food with a spoon or by drinking)</li><li>tasting, savoring, savouring, relishing, degustation – (taking a small amount into the mouth to test its quality; “cooking was fine but it was the savoring that he enjoyed most”)</li><li>necrophagia, necrophagy – (feeding on corpses or carrion)</li><li>omophagia – (the eating of raw food)</li><li>scatophagy – (the eating of excrement or other filth)</li></ul></li></ul><p>2 senses of surfeit                                                     </p><p>Sense 1<br>surfeit, cloy – (supply or feed to surfeit)</p><ul><li>supply, provide, render, furnish – (provide or furnish with; “We provided the room with an electrical heater”)<ul><li>hydrate – (supply water or liquid to in order to maintain a healthy balance; “the bicyclists must be hydrated frequently”)</li><li>charge – (energize a battery by passing a current through it in the direction opposite to discharge; “I need to charge my car battery”)</li><li>date – (provide with a dateline; mark with a date; “She wrote the letter on Monday but she dated it Saturday so as not to reveal that she procrastinated”)</li><li>feed – (feed into; supply; “Her success feeds her vanity”)</li><li>calk – (provide with calks; “calk horse shoes”)</li><li>fund – (provide a fund for the redemption of principal or payment of interest)</li><li>stint, skimp, scant – (supply sparingly and with restricted quantities; “sting with the allowance”)</li><li>terrace, terrasse – (provide (a house) with a terrace; “We terrassed the country house”)</li><li>dado – (provide with a dado; “The owners wanted to dado their dining room”)</li><li>innervate – (supply nerves to (some organ or body part))</li><li>offer – (make available or accessible, provide or furnish; “The conference center offers a health spa”; “The hotel offers private meeting rooms”)</li><li>signalize, signalise – (provide with traffic signals; “signalize a busy intersection”)</li><li>extend, offer – (make available; provide; “extend a loan”; “The bank offers a good deal on new mortgages”)</li><li>stock – (provide or furnish with a stock of something; “stock the larder with meat”)</li><li>stock, buy in – (stock up on to keep for future use or sale; “let’s stock coffee as long as prices are low”)</li><li>caption – (provide with a caption, as of a photograph or a drawing)</li><li>tube – (provide with a tube or insert a tube into)</li><li>ticket – (provide with a ticket for passage or admission; “Ticketed passengers can board now”)</li><li>stock – (supply with livestock; “stock a farm”)</li><li>stock – (supply with fish; “stock a lake”)</li><li>rim – (furnish with a rim; “rim a hat”)</li><li>fret – (provide (a musical instrument) with frets; “fret a guitar”)</li><li>step – (furnish with steps; “The architect wants to step the terrace”)</li><li>rail – (provide with rails; “The yard was railed”)</li><li>grate – (furnish with a grate; “a grated fireplace”)</li><li>capitalize, capitalise – (supply with capital, as of a business by using a combination of capital used by investors and debt capital provided by lenders)</li><li>alphabetize – (provide with an alphabet; “Cyril and Method alphabetized the Slavic languages”)</li><li>wharf – (provide with a wharf; “Wharf the mouth of the river”)</li><li>air-cool, air-condition – (equip with an apparatus for controlling the humidity and temperature; “Our house is not air-conditioned”)</li><li>uniform – (provide with uniforms; “The guards were uniformed”)</li><li>railroad – (supply with railroad lines; “railroad the West”)</li><li>partner – (provide with a partner)</li><li>bewhisker, whisker – (furnish with whiskers; “a whiskered jersey”)</li><li>subtitle – (supply (a movie) with subtitles)</li><li>headline – (provide (a newspaper page or a story) with a headline)</li><li>match – (provide funds complementary to; “The company matched the employees’ contributions”)</li><li>hobnail – (supply with hobnails)</li><li>wive – (provide with a wife; marry (someone) to a wife)</li><li>victual – (supply with food; “The population was victualed during the war”)</li><li>surfeit, cloy – (supply or feed to surfeit)</li><li>heat – (provide with heat; “heat the house”)</li><li>seat – (provide with seats; “seat a concert hall”)</li><li>seat – (put a seat on a chair)</li><li>ramp – (furnish with a ramp; “The ramped auditorium”)</li><li>arm – (supply with arms; “The U.S. armed the freedom fighters in Afghanistan”)</li><li>interleave – (provide (books) with blank leaves)</li><li>glass, glaze – (furnish with glass; “glass the windows”)</li><li>crenel, crenelate, crenellate – (supply with battlements)</li><li>causeway – (provide with a causeway; “A causewayed swamp”)</li><li>canal, canalize, canalise – (provide (a city) with a canal)</li><li>bush – (provide with a bushing)</li><li>brattice – (supply with a brattice, to ventilate mines)</li><li>furnish – (provide or equip with furniture; “We furnished the house in the Biedermeyer style”)</li><li>slat – (equip or bar with slats; “Slat the windows”)</li><li>berth – (provide with a berth)</li><li>bed – (furnish with a bed; “The inn keeper could bed all the new arrivals”)</li><li>computerize, computerise – (provide with computers; “Our office is fully computerized now”)</li><li>costume – (furnish with costumes; as for a film or play)</li><li>bottom – (provide with a bottom or a seat; “bottom the chairs”)</li><li>rafter – (provide (a ceiling) with rafters)</li><li>tool – (furnish with tools)</li><li>key – (provide with a key; “We were keyed after the locks were changed in the building”)</li><li>fuel – (provide with a combustible substance that provides energy; “fuel aircraft, ships, and cars”)</li><li>provision, purvey – (supply with provisions)</li><li>yield, give, afford – (be the cause or source of; “He gave me a lot of trouble”; “Our meeting afforded much interesting information”)</li><li>equip, fit, fit out, outfit – (provide with (something) usually for a specific purpose; “The expedition was equipped with proper clothing, food, and other necessities”)</li><li>transistorize, transistorise – (equip (an electronic circuit or device) with transistors)</li><li>upholster – (provide furniture with padding, springs, webbing, and covers)</li><li>cleat – (provide with cleats; “cleat running shoes for better traction”)</li><li>coal – (supply with coal)</li><li>corbel – (furnish with a corbel)</li><li>cornice – (furnish with a cornice)</li><li>constitutionalize – (provide with a constitution, as of a country; “The United States were constitutionalized in the late 18th century”)</li><li>copper-bottom – (provide with a copper bottom; “copper-bottom a frying pan”)</li><li>curtain – (provide with drapery; “curtain the bedrooms”)</li><li>gate – (supply with a gate; “The house was gated”)</li><li>index – (provide with an index; “index the book”)</li><li>joint, articulate – (provide with a joint; “the carpenter jointed two pieces of wood”)</li><li>pour – (supply in large amounts or quantities; “We poured money into the education of our children”)</li><li>pump – (supply in great quantities; “Pump money into a project”)</li><li>fuel, fire – (provide with fuel; “Oil fires the furnace”)</li><li>flood, oversupply, glut – (supply with an excess of; “flood the market with tennis shoes”; “Glut the country with cheap imports from the Orient”)</li><li>toggle – (provide with a toggle or toggles)</li><li>patch – (provide with a patch; also used metaphorically; “The field was patched with snow”)</li><li>water – (provide with water; “We watered the buffalo”)</li><li>leverage – (provide with leverage; “We need to leverage this company”)</li><li>tap – (furnish with a tap or spout, so as to be able to draw liquid from it; “tap a cask of wine”)</li><li>top – (provide with a top; “the towers were topped with conical roofs”)</li><li>reflectorize, reflectorise – (provide with reflectors, such as chemicals; “the driveway was reflectorized for safety reasons”)</li><li>retrofit – (provide with parts, devices, or equipment not available or in use at the time of the original manufacture; “They car companies retrofitted all the old models with new carburetors”)</li><li>border, edge – (provide with a border or edge; “edge the tablecloth with embroidery”)</li><li>machicolate – (supply with projecting galleries; “machicolate the castle walls”)</li><li>sanitate – (provide with sanitary facilities or appliances)</li><li>hat – (furnish with a hat)</li><li>theme – (provide with a particular theme or motive; “the restaurant often themes its menus”)</li><li>kern – (furnish with a kern)</li><li>shelter – (provide shelter for; “After the earthquake, the government could not provide shelter for the thousands of homeless people”)</li></ul></li></ul><p>Sense 2<br>surfeit – (indulge (one’s appetite) to satiety)</p><ul><li>indulge, luxuriate – (enjoy to excess; “She indulges in ice cream”)<ul><li>surfeit – (indulge (one’s appetite) to satiety)</li></ul></li></ul><h2 id="glutton"><a href="#glutton" class="headerlink" title="glutton"></a>glutton</h2><p>2 senses of glutton                                                     </p><p>Sense 1<br>glutton, gourmand, gourmandizer, trencherman – (a person who is devoted to eating and drinking to excess)  </p><ul><li>eater, feeder – (someone who consumes food for nourishment)  <ul><li>devourer – (someone who eats greedily or voraciously)  </li><li>omnivore – (a person who eats all kinds of foods)  </li><li>diner – (a person eating a meal (especially in a restaurant))  </li><li>dunker – (an eater who dips food into a liquid before eating it; “he was a dunker–he couldn’t eat a doughnut without a cup of coffee to dunk it in”)  </li><li>glutton, gourmand, gourmandizer, trencherman – (a person who is devoted to eating and drinking to excess)  </li><li>gobbler – (a hasty eater who swallows large mouthfuls)  </li><li>luncher – (someone who is eating lunch)  </li><li>mouth – (a person conceived as a consumer of food; “he has four mouths to feed”)  </li><li>mycophagist, micophage – (a person or animal who eats fungi (especially mushrooms))  </li><li>nosher, snacker – (someone who eats lightly or eats snacks between meals)  </li><li>picnicker, picknicker – (a person who is picnicking)  </li><li>scoffer, gorger – (someone who eats food rapidly and greedily)  </li><li>vegetarian – (eater of fruits and grains and nuts; someone who eats no meat or fish or (often) any animal products)<br>Sense 2<br>glutton, Gulo gulo, wolverine – (musteline mammal of northern Eurasia)  </li></ul></li><li>musteline mammal, mustelid, musteline – (fissiped fur-bearing carnivorous mammals)  <ul><li>weasel – (small carnivorous mammal with short legs and elongated body and neck)  </li><li>mink – (slender-bodied semiaquatic mammal having partially webbed feet; valued for its fur)  </li><li>polecat, fitch, foulmart, foumart, Mustela putorius – (dark brown mustelid of woodlands of Eurasia that gives off an unpleasant odor when threatened)  </li><li>black-footed ferret, ferret, Mustela nigripes – (musteline mammal of prairie regions of United States; nearly extinct)  </li><li>otter – (freshwater carnivorous mammal having webbed and clawed feet and dark brown fur)  </li><li>sea otter, Enhydra lutris – (large marine otter of northern Pacific coasts having very thick dark brown fur)  </li><li>skunk, polecat, wood pussy – (American musteline mammal typically ejecting an intensely malodorous fluid when startled; in some classifications put in a separate subfamily Mephitinae)  </li><li>badger – (sturdy carnivorous burrowing mammal with strong claws widely distributed in the northern hemisphere)  </li><li>ratel, honey badger, Mellivora capensis – (nocturnal badger-like carnivore of wooded regions of Africa and southern Asia)  </li><li>wolverine, carcajou, skunk bear, Gulo luscus – (stocky shaggy-coated North American carnivorous mammal)  </li><li>glutton, Gulo gulo, wolverine – (musteline mammal of northern Eurasia)  </li><li>grison, Grison vittatus, Galictis vittatus – (carnivore of Central America and South America resembling a weasel with a greyish-white back and dark underparts)  </li><li>marten, marten cat – (agile slender-bodied arboreal mustelids somewhat larger than weasels)  </li><li>tayra, taira, Eira barbara – (long-tailed arboreal mustelid of Central America and South America)  <h2 id="abjure"><a href="#abjure" class="headerlink" title="abjure"></a>abjure</h2></li></ul></li></ul><p>1 sense of abjure                                                       </p><p>Sense 1<br>abjure, recant, forswear, retract, resile – (formally reject or disavow a formerly held belief, usually under pressure; “He retracted his earlier statements about his religion”; “She abjured her beliefs”)  </p><ul><li>renounce, repudiate – (cast off or disown; “She renounced her husband”; “The parents repudiated their son”)  <ul><li>apostatize, apostatise, tergiversate – (abandon one’s beliefs or allegiances)  </li><li>abjure, recant, forswear, retract, resile – (formally reject or disavow a formerly held belief, usually under pressure; “He retracted his earlier statements about his religion”; “She abjured her beliefs”)  </li><li>swallow, take back, unsay, withdraw – (take back what one has said; “He swallowed his words”)  </li><li>refute, rebut – (overthrow by argument, evidence, or proof; “The speaker refuted his opponent’s arguments”)  </li><li>deny – (refuse to accept or believe; “He denied his fatal illness”)  </li></ul></li></ul><h2 id="corroborate"><a href="#corroborate" class="headerlink" title="corroborate"></a>corroborate</h2><p>2 of 3 senses of corroborate                                            </p><p>Sense 2<br>validate, corroborate – (give evidence for)  </p><ul><li>confirm, reassert – (strengthen or make more firm; “The witnesses confirmed the victim’s account”)  <ul><li>uphold, maintain – (support against an opponent; “The appellate court upheld the verdict”)  </li><li>justify, warrant – (show to be reasonable or provide adequate ground for; “The emergency does not warrant all of us buying guns”; “The end justifies the means”)  </li><li>verify – (attach or append a legal verification to (a pleading or petition))  </li><li>validate, corroborate – (give evidence for)  </li><li>reconfirm – (confirm again; “You must reconfirm your flight reservations”)  </li></ul></li></ul><p>Sense 3<br>corroborate, underpin, bear out, support – (support with evidence or authority or make more certain or confirm; “The stories and claims were born out by the evidence”)  </p><ul><li>match, fit, correspond, check, jibe, gibe, tally, agree – (be compatible, similar or consistent; coincide in their characteristics; “The two stories don’t agree in many details”; “The handwriting checks with the signature on the check”; “The suspect’s fingerprints don’t match those on the gun”)  <ul><li>consist – (be consistent in form, tenor, or character; be congruous; “Desires are to be satisfied only so far as consists with an approved end”)  </li><li>look – (accord in appearance with; “You don’t look your age!”)  </li><li>answer – (match or correspond; “The drawing of the suspect answers to the description the victim gave”)  </li><li>coincide – (be the same; “our views on this matter coincided”)  </li><li>align – (align with; be or come into adjustment)  </li><li>correlate – (to bear a reciprocal or mutual relation; “Do these facts correlate?”)  </li><li>parallel – (be parallel to; “Their roles are paralleled by ours”)  </li><li>twin, duplicate, parallel – (duplicate or match; “The polished surface twinned his face and chest in reverse”)  </li><li>square – (be compatible with; “one idea squares with another”)  </li><li>corroborate, underpin, bear out, support – (support with evidence or authority or make more certain or confirm; “The stories and claims were born out by the evidence”)  </li><li>resemble – (appear like; be similar or bear a likeness to; “She resembles her mother very much”; “This paper resembles my own work”)  </li><li>meet, fit, conform to – (satisfy a condition or restriction; “Does this paper meet the requirements for the degree?”)  </li><li>homologize – (be homologous; “A person’s arms homologize with a quadruped’s forelimbs”)  </li><li>befit, suit, beseem – (accord or comport with; “This kind of behavior does not suit a young woman!”)  </li><li>harmonize, harmonise, consort, accord, concord, fit in, agree – (go together; “The colors don’t harmonize”; “Their ideas concorded”)  </li><li>pattern – (form a pattern; “These sentences pattern like the ones we studied before”)  </li><li>adhere – (be compatible or in accordance with; “You must adhere to the rules”)  </li><li>rhyme, rime – (be similar in sound, especially with respect to the last syllable; “hat and cat rhyme”)  </li></ul></li></ul><h2 id="niblle"><a href="#niblle" class="headerlink" title="niblle"></a>niblle</h2><p>2 senses of nibble                                                      </p><p>Sense 1<br>nybble, nibble – (a small byte)  </p><ul><li>computer memory unit – (a unit for measuring computer memory)  <ul><li>nybble, nibble – (a small byte)  </li><li>byte – (a sequence of 8 bits (enough to represent one character of alphanumeric data) processed as a single unit of information)  </li><li>sector – (the minimum track length that can be assigned to store information; unless otherwise specified a sector of data consists of 512 bytes)  </li><li>block – ((computer science) a sector or group of sectors that function as the smallest data unit permitted; “since blocks are often defined as a single sector, the terms <code>block&#39; and</code>sector’ are sometimes used interchangeably”)  </li><li>allocation unit – (a group of sectors on a magnetic disk that can be reserved for the use of a particular file)  </li><li>partition – ((computer science) the part of a hard disk that is dedicated to a particular operating system or application and accessed as a single unit)  </li><li>word – (a word is a string of bits stored in computer memory; “large computers use words up to 64 bits long”)  </li><li>kilobyte, K, KB – (a unit of information equal to one thousand (1024) bytes)  </li><li>megabyte, MB – (a unit of information equal to one million (1,048,576) bytes)  </li><li>gigabyte, G, GB – (a unit of information equal to one billion (1,073,741,824) bytes or 1024 megabytes)  </li><li>terabyte, T, TB – (a unit of information equal to a trillion (1,099,511,627,776) bytes or 1024 gigabytes)  </li><li>petabyte – (a unit of information equal to 1,024 terabytes)  </li></ul></li></ul><p>Sense 2<br>nibble – (gentle biting)  </p><ul><li>bite, chomp – (the act of gripping or chewing off with the teeth and jaws)  <ul><li>munch – (a large bite; “he tried to talk between munches on the sandwich”)  </li><li>nibble – (gentle biting)  </li><li>nip, pinch – (a small sharp bite or snip)  </li></ul></li></ul><h2 id="inception"><a href="#inception" class="headerlink" title="inception"></a>inception</h2><p>1 sense of inception                                                    </p><p>Sense 1<br>origin, origination, inception – (an event that is a beginning; a first part or stage of subsequent events)  </p><ul><li>beginning – (the event consisting of the start of something; “the beginning of the war”)  <ul><li>casus belli – (an event used to justify starting a war)  </li><li>emergence, egress, issue – (the becoming visible; “not a day’s difference between the emergence of the andrenas and the opening of the willow catkins”)  </li><li>origin, origination, inception – (an event that is a beginning; a first part or stage of subsequent events)  </li><li>genesis, generation – (a coming into being)  </li><li>ground floor – (becoming part of a venture at the beginning (regarded as position of advantage); “he got in on the ground floor”)  </li><li>emergence, outgrowth, growth – (the gradual beginning or coming forth; “figurines presage the emergence of sculpture in Greece”)  </li><li>start – (the beginning of anything; “it was off to a good start”)  </li><li>creation, conception – (the event that occurred at the beginning of something; “from its creation the plan was doomed to failure”)  </li></ul></li></ul><h1 id="morphs"><a href="#morphs" class="headerlink" title="morphs"></a>morphs</h1><h2 id="accele"><a href="#accele" class="headerlink" title="accele"></a>accele</h2><p>accelerando<br>accelerate<br>accelerated<br>acceleration<br>acceleration unit<br>accelerative<br>accelerator<br>accelerator factor<br>accelerator pedal<br>acceleratory<br>accelerometer<br>angular acceleration<br>centripetal acceleration<br>charge-exchange accelerator<br>cockcroft-walton accelerator<br>cockcroft and walton accelerator<br>electron accelerator<br>induction accelerator<br>linear accelerator<br>microwave linear accelerator<br>particle accelerator<br>proaccelerin<br>prothrombin accelerator<br>proton accelerator  </p><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p>blue ribbon committee<br>citizens committee<br>commit<br>commit suicide<br>commitment<br>committal<br>committal service<br>committal to memory<br>committal to writing<br>committed<br>committedness<br>committee<br>committee for state security<br>committee meeting<br>committee member<br>committeeman<br>committeewoman<br>ethics committee<br>finance committee<br>international olympic committee<br>noncommittal<br>political action committee<br>recommit<br>security intelligence review committee<br>select committee<br>standing committee<br>steering committee<br>subcommittee<br>uncommitted<br>vigilance committee<br>ways and means committee<br>welcoming committee  </p><h2 id="salv"><a href="#salv" class="headerlink" title="salv"></a>salv</h2><p>el salvador<br>el salvadoran colon<br>el salvadoran monetary unit<br>family salvadoraceae<br>family salviniaceae<br>genus salvadora<br>genus salvelinus<br>genus salvia<br>genus salvinia<br>mentholated salve<br>republic of el salvador<br>salvador<br>salvador dali<br>salvadora<br>salvadora family<br>salvadora persica<br>salvadoraceae<br>salvadoran<br>salvadoran capital<br>salvadorean<br>salvadorian<br>salvage<br>salvageable<br>salvager<br>salvation<br>salvation army<br>salve<br>salvelinus<br>salvelinus alpinus<br>salvelinus fontinalis<br>salvelinus namaycush<br>salver<br>salverform<br>salvia<br>salvia azurea<br>salvia clarea<br>salvia divinorum<br>salvia farinacea<br>salvia lancifolia<br>salvia leucophylla<br>salvia lyrata<br>salvia officinalis<br>salvia pratensis<br>salvia reflexa<br>salvia sclarea<br>salvia spathacea<br>salvia verbenaca<br>salvific<br>salving<br>salvinia<br>salvinia auriculata<br>salvinia rotundifolia<br>salviniaceae<br>salvinorin<br>salvo<br>salvor<br>san salvador  </p><h2 id="euver"><a href="#euver" class="headerlink" title="euver"></a>euver</h2><p>airplane maneuver<br>flight maneuver<br>heimlich maneuver<br>heimlich manoeuvere<br>maneuver<br>maneuverability<br>maneuverable<br>maneuverer<br>manoeuver<br>outmaneuver<br>tactical maneuver  </p><h2 id="voke"><a href="#voke" class="headerlink" title="voke"></a>voke</h2><p>convoke<br>evoke<br>evoked<br>evoked potential<br>invoke<br>provoke<br>provoked<br>provoker<br>revoke<br>unprovoked  </p><h2 id="apoc"><a href="#apoc" class="headerlink" title="apoc"></a>apoc</h2><p>apocalypse<br>apocalyptic<br>apocalyptical<br>apocarpous<br>apochromatic<br>apocope<br>apocrine<br>apocrine gland<br>apocrypha<br>apocryphal<br>apocynaceae<br>apocynaceous<br>apocynum<br>apocynum androsaemifolium<br>apocynum cannabinum<br>apocynum pumilum<br>family apocynaceae<br>genus apocynum  </p>]]></content>
      
      
      
        <tags>
            
            <tag> 记忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顶级目录</title>
      <link href="/%E9%A1%B6%E7%BA%A7%E7%9B%AE%E5%BD%95/"/>
      <url>/%E9%A1%B6%E7%BA%A7%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>本站概览。<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 目录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编号之美</title>
      <link href="/%E7%BC%96%E5%8F%B7%E4%B9%8B%E7%BE%8E/"/>
      <url>/%E7%BC%96%E5%8F%B7%E4%B9%8B%E7%BE%8E/</url>
      
        <content type="html"><![CDATA[<p>编号是最好的体系架构机制。<br><a id="more"></a><br>GBT_13745-2009_学科分类与代码.pdf<br>9999：一级目录<br>9998：二级目录<br>9997：思维与方法论：知识整理、代码大全、命名规范<br>9996：学习路线<br>8000：计算机<br>7900：算法与数据结构<br>7800：计算机基础<br>7000：英语<br>6000：金融<br>5000：数学与逻辑</p><h3 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h3><p>9997：</p><h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><p>2099：算法与数据结构 数理统计 逻辑学 2098LeetCode<br>2080：计算机组成原理与结构体系<br>2070：操作系统<br>2060：数据库<br>2050：网络 FLASK<br>2040：语言 Python SQL<br>2039：API 文件操作<br>2035：应用框架 NLTK 爬虫<br>2032：IDE<br>2031：通用工具<br>2030：面试<br>2020：个人项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">要点、点评、收获</span><br><span class="line">需求分析</span><br><span class="line">给定常量是什么</span><br><span class="line">输入是什么</span><br><span class="line">输出是什么</span><br><span class="line">边界是什么</span><br><span class="line">源码</span><br><span class="line">error</span><br></pre></td></tr></table></figure></p><p>2010：个人脚本</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><h3 id="金融"><a href="#金融" class="headerlink" title="金融"></a>金融</h3><h3 id="地理"><a href="#地理" class="headerlink" title="地理"></a>地理</h3><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 方法论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>《计算机网络》概览。<br><a id="more"></a></p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP</a><br><a href="https://www.w3cschool.cn/http/a96bxfml.html" target="_blank" rel="noopener">https://www.w3cschool.cn/http/a96bxfml.html</a><br><a href="https://devdocs.io/http/" target="_blank" rel="noopener">https://devdocs.io/http/</a></p><ul><li>HTTP协议（HyperText Transfer Protocol，超文本传输协议）是用于从WWW服务器传输超文本到本地浏览器的传送协议。</li><li>它可以使浏览器更加高效，减少网络传输。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示（如文本先于图形）等。</li><li>Python爬虫开发，主要是和HTTP协议打交道。 <h2 id="HTTP请求过程"><a href="#HTTP请求过程" class="headerlink" title="HTTP请求过程"></a>HTTP请求过程</h2></li><li>HTTP协议采取的是请求响应模型及其示图。</li><li>HTTP协议永远都是客户端发起请求，服务器回送响应。</li><li>HTTP协议是一个无状态的协议，同一个客户端的这次请求和上次请求没有对应关系。</li><li>一次HTTP操作称为一个事务，其执行过程可分为四步：<br><strong> 首先客户端与服务器需要建立连接，例如单击某个超链接，HTTP的工作就开始了。</strong> 建立连接后，客户端发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息，包括请求修饰符、客户机信息和可能的内容。<br><strong> 服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息，包括服务器信息、实体信息和可能的内容。</strong> 客户端接收服务器所返回的信息，通过浏览器将信息显示在用户的显示屏上，然后客户端与服务器断开连接。<br>如果以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端，在显示屏输出，这些过程是由HTTP协议自己完成的。 <h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。在浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。HTTP状态码主要是是为了标识此次HTTP请求的运行状态。<br>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。</li><li>200——请求成功。</li><li>301——资源（网页等）被永久转移到其他URL。</li><li>404——请求的资源（网页等）不存在。</li><li>500——内部服务器错误。<br>HTTP头信息<br>[<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers</a> mozilla]</li></ul><h2 id="IPC几种通信方式-进程间的通信方式"><a href="#IPC几种通信方式-进程间的通信方式" class="headerlink" title="IPC几种通信方式(进程间的通信方式)"></a>IPC几种通信方式(进程间的通信方式)</h2><p>管道(pipe)<br>管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。<br>管道是单向的、先进先出的、无结构的、固定大小的字节流，它把一个进程的标准输出和另一个进程的标准输入连接在一起。写进程在管道的尾端写入数据，读进程在管道的首端读出数据。数据读出后将从管道中移走，其它读进程都不能再读到这些数据。<br>管道有三种<br><em>普通管道。有两个限制：一是只支持半双工通信方式，即只能单向传输；二是只能在父子进程之间使用；</em>流管道。去除第一个限制，支持双向传输；<br>*命名管道。去除第二个限制，可以在不相关进程之间进行通信。<br>命名管道(namedpipe)<br>命名管道也是半双工的通信方式，它克服了管道没有名字的限制，并且它允许无亲缘关系进程间的通信。命令管道在文件系统中有对应的文件名，命名管道通过命令mkfifo或系统调用mkfifo来创建。MicrosoftSQLServer数据库默认安装后的本地连接使用的就是命名管道。MySQL在Window环境下，如果需要两个进程在同一台服务器上通信可以使用命名管道，通过–enable-named-pipe选项设置。<br>信号量(semophore)<br>信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。<br>消息队列(messagequeue)<br>消息队列是由消息的链表结构实现，存放在内核中并由消息队列标识符标识。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。<br>信号(sinal)<br>信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。除了用于进程通信外，进程还可以发送信号给进程本身。<br>共享内存(sharedmemory)<br>共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的IPC方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量配合使用，来实现进程间的同步和通信。MySQL内部通信也使用了共享内存的方式，可以通过配置文件添加–shared-memory实现<br>套接字(socket)<br>也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识整理术语表</title>
      <link href="/%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%E6%9C%AF%E8%AF%AD%E8%A1%A8/"/>
      <url>/%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%E6%9C%AF%E8%AF%AD%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>自整理体系、按字母排序和分条显示讲的内容是完全一样的，只是呈现的方式不同。只看自整理体系即可。参看<a href="https://cjql.github.io/archive/method/知识整理.jpg">知识整理思维导图</a>。<br><a id="more"></a>  </p><h1 id="自整理体系"><a href="#自整理体系" class="headerlink" title="自整理体系"></a>自整理体系</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><a href="#政策">政策</a> <a href="#学习">学习</a> <a href="#环境可寻找">环境可寻找</a>  </p><h2 id="知识整理全过程"><a href="#知识整理全过程" class="headerlink" title="知识整理全过程"></a>知识整理全过程</h2><p><a href="#知识获取和记录">知识获取和记录</a> <a href="#记录保存和管理">记录保存和管理</a> <a href="#知识交换">知识交换</a> <a href="#知识移交">知识移交</a> <a href="#"></a><br><a href="#验证">验证</a> <a href="#概念验证">概念验证</a> <a href="#行动前审查">行动前审查</a> <a href="#同行协助">同行协助</a> <a href="#同行审查">同行审查</a> <a href="#知识审计">知识审计</a> <a href="#"></a><br><a href="#内容管理">内容管理</a> <a href="#知识整合">知识整合</a> <a href="#铺开">铺开</a> <a href="#嵌入">嵌入</a> <a href="#治理">治理</a> <a href="#知识保留">知识保留</a> <a href="#编码知识">编码知识</a> <a href="#资源映射">资源映射</a> <a href="#回顾">回顾</a> <a href="#基于搜索的应用">基于搜索的应用</a> <a href="#任务后检视">任务后检视</a>  </p><h2 id="知识整理存储平台"><a href="#知识整理存储平台" class="headerlink" title="知识整理存储平台"></a>知识整理存储平台</h2><p><a href="#分类">分类</a> <a href="#分类面">分类面</a> <a href="#企业分类管理系统">企业分类管理系统</a> <a href="#自动分类工具">自动分类工具</a> <a href="#标签云">标签云</a> <a href="#标记系统">标记系统</a><br><a href="#博客">博客</a> <a href="#目的社区">目的社区</a> <a href="#门户">门户</a> <a href="#Yammer黄页">Yammer黄页</a> <a href="#问答论坛">问答论坛</a> <a href="#维基">维基</a> <a href="#维基马拉松">维基马拉松</a>  </p><h2 id="知识类型"><a href="#知识类型" class="headerlink" title="知识类型"></a>知识类型</h2><p><a href="#大数据">大数据</a> <a href="#数据">数据</a> <a href="#元数据">元数据</a> <a href="#信息">信息</a> <a href="#显性知识">显性知识</a> <a href="#隐性知识">隐性知识</a>  </p><h2 id="知识整理成果"><a href="#知识整理成果" class="headerlink" title="知识整理成果"></a>知识整理成果</h2><p><a href="#3-Report">3 Report</a> <a href="#知识库">知识库</a> <a href="#知识地图">知识地图</a> <a href="#知识组织">知识组织</a> <a href="#知识咖啡馆">知识咖啡馆</a> <a href="#知识管理">知识管理</a> <a href="#知识管理框架">知识管理框架</a> <a href="#知识管理计划">知识管理计划</a> <a href="#战略知识领域">战略知识领域</a><br><a href="#经验教训数据库">经验教训数据库</a> <a href="#经验教训管理系统">经验教训管理系统</a>  </p><h2 id="知识整理实践"><a href="#知识整理实践" class="headerlink" title="知识整理实践"></a>知识整理实践</h2><p><a href="#失败展览会">失败展览会</a> <a href="#知识展览会">知识展览会</a><br><a href="#收益映射">收益映射</a> <a href="#最佳实践包装">最佳实践包装</a> <a href="#试点">试点</a> <a href="#实践所有者">实践所有者</a> <a href="#对话">对话</a> <a href="#社交媒体">社交媒体</a> <a href="#社交网络分析">社交网络分析</a> <a href="#社会认同">社会认同</a> <a href="#实践社区">实践社区</a> <a href="#创新">创新</a> <a href="#胜任力">胜任力</a> <a href="#商业智能">商业智能</a> <a href="#公司健忘症">公司健忘症</a>  </p><h2 id="知识整理人才"><a href="#知识整理人才" class="headerlink" title="知识整理人才"></a>知识整理人才</h2><p><a href="#找人">找人</a> <a href="#合伙">合伙</a> <a href="#人力资本">人力资本</a> <a href="#接力棒传递">接力棒传递</a><br><a href="#知识管理拥护者">知识管理拥护者</a> <a href="#知识拥有者">知识拥有者</a> <a href="#知识经纪人">知识经纪人</a> <a href="#知识经理">知识经理</a> <a href="#"></a><br><a href="#知识分析师">知识分析师</a> <a href="#知识工程师">知识工程师</a> <a href="#信息架构师">信息架构师</a> <a href="#专业支持律师">专业支持律师</a> <a href="#"></a><br><a href="#企业搜索专家">企业搜索专家</a> <a href="#企业分类学家">企业分类学家</a> <a href="#主题专家">主题专家</a> <a href="#专家系统">专家系统</a> <a href="#学习历史学家">学习历史学家</a>  </p><h2 id="知识整理文化"><a href="#知识整理文化" class="headerlink" title="知识整理文化"></a>知识整理文化</h2><p><a href="#文化">文化</a> <a href="#无形资产">无形资产</a> <a href="#知识">知识</a> <a href="#知识资产">知识资产</a> <a href="#知识资产创造流程">知识资产创造流程</a>  </p><h1 id="按字母顺序排列的表格"><a href="#按字母顺序排列的表格" class="headerlink" title="按字母顺序排列的表格"></a>按字母顺序排列的表格</h1><table><thead><tr><th>中文名</th><th>英文名</th><th>释义  </th></tr></thead><tbody><tr><td>3 Report</td><td></td><td>一种结构化文档，遵循审查、分析和记录关于产品故障与产品设计改进知识的过程。  </td></tr><tr><td>包装</td><td>Packaging</td><td>将知识编纂、合成一致的格式，这样就可以提供给知识客户，以方便最大限度地再利用。  </td></tr><tr><td>标签云</td><td>Tag cloud</td><td>资源集合中的一群常用的关键词，字体的大小象征着该关键词的使用频率。  </td></tr><tr><td>标记系统</td><td>Tagging System</td><td>一种系统，允许用户将自己的关键词添加到信息或知识资源。  </td></tr><tr><td>博客</td><td>Blog</td><td>一种在线软件应用，可写作并发布简短的文章，按时间顺序显示条目。可用来记录项目和活动发生时的知识与见解。  </td></tr><tr><td>编码知识</td><td>Codified Knowledge</td><td>编码知识是以文本、视频或图片形式记录的知识，也称为显性知识。  </td></tr><tr><td>大数据</td><td>Big Data</td><td>一个广义的术语，指处理和挖掘多源的、非常大的数据集，为业务获得有意义和可行的见解。  </td></tr><tr><td>创新</td><td>Innovation</td><td>通过创造新知识，实现和验证想法、试验和解决问题，推出有显著改进的产品、流程和服务。  </td></tr><tr><td>对话</td><td>Dialogue</td><td>会话的一种方式，强调探讨不同的观点并实现相互理解，不一定达成协议。  </td></tr><tr><td>分类</td><td>Taxonomy</td><td>一个结构化、受控的词汇表，用来描述文档或讨论的所属领域。分类是元数据的一部分，用于支持相关内容的搜索和检索。分类也可用来描述关联个人和社区的专业知识主题。  </td></tr><tr><td>分类面</td><td>Taxonomy Facet</td><td>分类的一个元素，它关注知识资源的具体属性，例如文档的类型、参考的活动和涉及的实体。  </td></tr><tr><td>公司健忘症</td><td>Corporate Amnesia</td><td>当人员离开时，由于知识流失而造成关键能力的丧失。  </td></tr><tr><td>概念验证</td><td>Proof of Concept</td><td>一种规模很小的活动，目的是向管理层的利益相关者证明KM的价值。  </td></tr><tr><td>环境可寻找</td><td>Ambient Findability</td><td>确保在需要的时间点或环境中，相关的知识资源自动弹出。这意味着要预见可能需要相关资源的地方并设计在该时间点将内容“推送”给用户。  </td></tr><tr><td>收益映射</td><td>Best Mapping</td><td>一种系统形象的方法，演示KM举措和积极的业务成果之间的联系。  </td></tr><tr><td>回顾</td><td>Retrospect</td><td>项目或重大活动周期结束时的结构化促进会，以在团队解散前吸取经验教训。  </td></tr><tr><td>合伙</td><td>Partnering</td><td>一种结构化的方法，以确定合作伙伴并与他们交往，协商责任和贡献，同时认可合作伙伴的条件限制和优先事项。  </td></tr><tr><td>接力棒传递</td><td>Baton Passing</td><td>一种促进的过程，将知识从一个团队传递给进行同类工作的另一个团队。  </td></tr><tr><td>经验教训数据库</td><td>Lessons Database</td><td>一个数据库，其中存储了经验教训，并且可以分类和检索。  </td></tr><tr><td>经验教训管理系统</td><td>Lessons Management System</td><td>一个系统，用来管理经验教训的吸取、验证、嵌入和应用。与经验教训数据库不同的是包含工作流程，以确保经验教训得到吸取和学习，而不仅仅是记录和存储。  </td></tr><tr><td>记录保存和管理</td><td>Recordkeeping, Records Management</td><td>一套系统流程，保存正式记录，包括官方决定、活动和交易，目的是管理控制、问责、合规，保存组织记忆。  </td></tr><tr><td>基于搜索的应用</td><td>Search-Based Application</td><td>一种软件应用，利用搜索引擎向有需要的特定用户主动提供非常有针对性的内容。  </td></tr><tr><td>目的社区</td><td>Community of Purpose</td><td>类似于实践社区，但成员的分享聚焦于有共同目的、流程或目标。社区关注交付共同目的，例如，创建最佳实践。  </td></tr><tr><td>门户</td><td>Portal</td><td>一个网站，提供对知识库、软件应用和协作工具的访问使用。  </td></tr><tr><td>内容管理</td><td>Content Management</td><td>运用流程和系统来管理信息内容，以支持组织的需求，无论是网络内容、文档、记录，还是其他形式的编码知识。  </td></tr><tr><td>铺开</td><td>Roll-out</td><td>将新的工作方式扩大到整个组织的过程。  </td></tr><tr><td>嵌入</td><td>Embedding</td><td>旨在确保新工作方式成为永久性无形资产的一系列流程和干预措施。  </td></tr><tr><td>企业搜索专家</td><td>Enterprise Search Specialist</td><td>一种角色，负责确保搜索技术有效地利用分类法，支持信息架构师的设计目标，帮助用户查找和访问对他们有用的信息和知识资源。  </td></tr><tr><td>企业分类学家</td><td>Enterprise Taxonomist</td><td>一种角色，负责开发、实施和维护企业分类法，以支持知识资源的寻找、访问和再利用。  </td></tr><tr><td>企业分类管理系统</td><td>Enterprise Taxonomy Management System</td><td>一个软件应用，支持多个分类法、元数据元素和其他参考词语的管理系统集中管理，并作为许多不同信息系统的统一词汇源。  </td></tr><tr><td>人力资本</td><td>Human Capital</td><td>由一个组织拥有，使其能够有效工作的知识、能力、价值观和社会属性的储备，人力资本是无形资产的一种形式。  </td></tr><tr><td>任务后检视</td><td>After Action Review</td><td>一种结构化的简短会议，在会上团队审查最近的工作活动，并为未来总结经验教训。这个过程通常用于短期活动，例如项目内的任务。  </td></tr><tr><td>商业智能</td><td>Business Intelligence</td><td>通过收集和分析来自环境的信息支持决策，以避免风险，为变革创造可能性。  </td></tr><tr><td>实践社区</td><td>Community of Practice</td><td>以人为中心的网络，他们从事相同类型的活动或实践领域，在线上或线下定期分享有关他们实践的知识，互相帮助，使彼此工作做得更好。  </td></tr><tr><td>胜任力</td><td>Competence</td><td>技术知识、技能和价值观的结合，使某人有能力发挥作用或职能。  </td></tr><tr><td>数据</td><td>Data</td><td>测量结果、观察所得和事实，可以组合并整理成信息。  </td></tr><tr><td>失败展览会</td><td>Fail Fair</td><td>一种企业范围内的活动，目的是展示组织关于关键知识和改进机会的失败，并体现领导层对探索失败、寻求知识的文化意愿。  </td></tr><tr><td>试点</td><td>Pilot</td><td>一个小规模的项目，用来检验组织某个部分的KM框架，并向业务利益相关者展示KM的价值。试点还应该产生见解，从而改进KM框架。  </td></tr><tr><td>实践所有者</td><td>Practice Owner</td><td>某领域专家，负责维护该业务专业实践领域的知识，确保能发展和保持必要的能力，同时配套知识库可用和更新。  </td></tr><tr><td>社交媒体</td><td>Social Media</td><td>在线软件应用，旨在鼓励和促进社会交往。  </td></tr><tr><td>社交网络分析</td><td>Social Network Analysis</td><td>一种方法，描绘团队、社区或组织中的人际交往，评估联系的程度，并确定干预措施来改进知识和信息的流动。  </td></tr><tr><td>社会认同</td><td>Social Proof</td><td>使人相信一种方法的价值，向他们展示和他们情况类似的人从这种方法中受益的例子。  </td></tr><tr><td>同行协助</td><td>Peer Assist</td><td>一种结构化的促进会或研讨会，需要解决问题或战胜挑战的团队，邀请其他业务部门或行业的人，分享经验、见解和知识。  </td></tr><tr><td>同行审查</td><td>Peer Review</td><td>一种结构化的促进会或研讨会，邀请其他业务部门或行业的人，审查另一团队的工作。  </td></tr><tr><td>文化</td><td>Culture</td><td>社区或组织内部表现出来的独特行为、假设和价值观模式。因为它们融入了行为，所以很难简单地通过吸引人的理由来改变，而是必须通过系统的变革计划，实施新的流程、角色和其他推动因素。  </td></tr><tr><td>无形资产</td><td>Intangible Assets</td><td>一个组织的资产，但不能像现金、设施或设备这些有形资产一样量化和列在资产负债表上。无形资产的例子有名声、商誉、客户资本、人力资本或能力。知识是一种重要的无形资产。  </td></tr><tr><td>问答论坛</td><td>Q&amp;A Forum</td><td>一个基于电子邮件的讨论论坛，围绕着问题和答案建立。这些可以成为在实践社区内交流知识的一种强大手段。社区成员可以在论坛里提问，由他们在世界其他地方的同行回答。  </td></tr><tr><td>维基</td><td>Wiki</td><td>一组网页，读者通过网页浏览器界面可以直接编辑。  </td></tr><tr><td>维基马拉松</td><td>Wikithon</td><td>一个促进活动，一组知识所有者或实践社区成员一起在维基平台上合成集体知识库。  </td></tr><tr><td>显性知识</td><td>Explicit Knowledge</td><td>以前的定义是显性知识是可以表达和描述的知识。如今，这个术语已经变成了编码知识的同义词。  </td></tr><tr><td>信息</td><td>Information</td><td>能告诉你一些事情的数据的集合和呈现。  </td></tr><tr><td>信息架构师</td><td>Information Architect</td><td>一个角色，负责在门户网站或知识库这样的系统中设计信息和知识环境，以便用户可以轻松浏览和检索信息资源。  </td></tr><tr><td>行动前审查</td><td>Baton Passing</td><td>一种促进讨论会，在项目或活动周期开始前，确定与项目有关的知识需求和优先学习的内容。  </td></tr><tr><td>学习</td><td>Learning</td><td>由于获得新的见解和知识，从而改进做事方式。  </td></tr><tr><td>学习历史学家</td><td>Learning Historian</td><td>一个角色，负责通过访谈、数据收集和分析来创造可学习的历史。从特定的活动或事件中萃取可学习的知识，并就经验教训的应用给出指导方针。  </td></tr><tr><td>元数据</td><td>Metadata</td><td>描述数据或文档属性的数据，例如标题、作者、创建日期、主题、结构、安全分类。元数据有助于内容的管理，并支持对内容的访问，例如通过搜索。  </td></tr><tr><td>隐性知识</td><td>Tacit Knowledge</td><td>保存在人的头脑和身体中的知识，有可能写下来，也有可能无法记录。  </td></tr><tr><td>验证</td><td>Validate</td><td>确保某件事中的教训或知识点是有效与可防范的，并可作为最佳实践，在将来可以应用。  </td></tr><tr><td>Yammer黄页</td><td>Yellow Pages</td><td>一种商用微博工具，微博支持分享短消息和更新。见“找人”。  </td></tr><tr><td>最佳实践</td><td>Best Practice</td><td>一种做事的实践或方法，经过确认和验证，是目前已知最好的做事方法。  </td></tr><tr><td>治理</td><td>Governance</td><td>通过架构、政策、指标、绩效管理和支持的组合，实现对组织职能的有效管理、监督和问责。  </td></tr><tr><td>战略知识领域</td><td>Strategic Knowledge Areas</td><td>战略中基于知识的能力，对组织的效率和竞争至关重要。  </td></tr><tr><td>找人</td><td>People Finder</td><td>一个知识目录，将人名与知识领域匹配，用以帮助员工找出在组织中“谁知道什么”。  </td></tr><tr><td>自动分类工具</td><td>Autoclassification Tools</td><td>给信息和知识资产自动分配标签或分类主题的软件工具。它们可以按给用户的检验标签或主题工作，或者它们可以完全自动化，在后台工作，不用人干预。  </td></tr><tr><td>专家系统</td><td>Expert System</td><td>一种系统，将专家的知识和决策规则嵌入软件应用中的算法与工作流程。  </td></tr><tr><td>资源映射</td><td>Resource Mapping</td><td>一种结构化和形象的方法，可确定KM实施所需的资源，还有谁将负责贡献这些资源。  </td></tr><tr><td>专业支持律师</td><td>Professional Support Lawyer, PSL</td><td>律师事务所的一个角色，负责提建议，运用先例和诀窍，为客户提供培训和支持。  </td></tr><tr><td>政策</td><td>Policy</td><td>对特定活动领域相关雇员期望的明确说明，阐明指导原则、角色和责任、支持指南。  </td></tr><tr><td>主题专家</td><td>Subject Matter Expert</td><td>社区或职能中的某人，拥有子领域主题知识的所有权或管理权，并代表社区或组织管理该子领域，经常接受实践所有者的指导或监督。  </td></tr><tr><td>知识资产创造流程</td><td>Knowledge Asset Creation Process,KNAC</td><td>由西门子开发的一个五步过程，用来围绕一个特定的主题或产品创造合成知识资产。  </td></tr><tr><td>知识</td><td>Knowledge</td><td>让你采取有效行动的诀窍、技巧、经验、理解和经验法则。另见显性知识和隐性知识。  </td></tr><tr><td>知识分析师</td><td>Knowledge Analyst</td><td>一种角色，负责围绕来自不同知识库的具体主题，检索和整理知识资源，并准备向内部或外部客户汇报。  </td></tr><tr><td>知识资产</td><td>Knowledge Assets</td><td>分散独立、可识别的知识项目或集合，有助于使组织有效地工作。知识资产覆盖了从显性到隐性知识类型的整个范围。它们包括技巧、能力、方法、实践、经验领域、专业知识和关系资本。  </td></tr><tr><td>知识审计</td><td>Knowledge Audit</td><td>一个总称，指系统地评估知识资产、知识差距、知识流和KM流程，目标是提出改进建议。通常是KM实施详细规划过程的一部分。  </td></tr><tr><td>知识库</td><td>Knowledge Bank, Knowledge Base</td><td>收藏组织或实践社区的显性知识的地方。  </td></tr><tr><td>知识经纪人</td><td>Knowledge Broker</td><td>一种角色，将他们与工作之外的知识和信息联系起来，通常通过同事自己的社交网络。  </td></tr><tr><td>知识咖啡馆</td><td>Knowledge Café</td><td>一种促进性大型会议，通常在咖啡厅风格的桌子旁进行，在会上小组分享对话。一般每桌都有一位引导员促进对话，在每个对话周期结束时，同桌的其他参与者分开，加入不同小组和不同桌子。知识咖啡馆有利于给复杂的问题或挑战带来多个视角，并加强交流和建立关系。  </td></tr><tr><td>知识获取和记录</td><td>Knowledge Capture, Knowledge Documentation</td><td>将隐性知识记录为编码形式，从而成为显性知识的过程。  </td></tr><tr><td>知识工程师</td><td>Knowledge Engineer</td><td>一种角色，负责从专家、团队或部门获取知识。  </td></tr><tr><td>知识交换</td><td>Knowledge Exchange</td><td>一种会议，许多人在会上讨论和互相学习，在知识交流的过程中，每个人都是贡献者，同时也是学习者。  </td></tr><tr><td>知识展览会</td><td>Knowledge Fair</td><td>一种组织范围的活动，目的是展示其知识能力和显示KM的好处。  </td></tr><tr><td>知识移交</td><td>Knowledge Handover</td><td>一个促进的过程，将已经完成项目的项目组获得的经验教训转移给可能需要该知识的其他项目组。  </td></tr><tr><td>知识管理</td><td>Knowledge Management</td><td>一种系统的战略方法，将一个组织集体知识的价值最大化。  </td></tr><tr><td>知识管理拥护者</td><td>Knowledge Management Champion</td><td>一种角色，这个人通常除了正规的职能角色，另外被赋予在其业务部分支持KM活动的责任。  </td></tr><tr><td>知识管理框架</td><td>Knowledge Management Framework</td><td>一种框架，描述了KM要有效嵌入组织的工作方式所需的推动因素。  </td></tr><tr><td>知识管理计划</td><td>Knowledge Management Plan</td><td>一种文档，记录了知识需求、知识差距、知识来源和获得策略、知识创造角色、责任和既定项目或活动的流程。  </td></tr><tr><td>知识经理</td><td>Knowledge Manager</td><td>一种角色，其主要职责是确保其所在组织中团队的知识得到管理，从而实现业务利益。  </td></tr><tr><td>知识地图</td><td>Knowledge Map</td><td>一种直观的表示，显示知识资产在组织中的位置和它们如何与关键的功能区和活动相关，或者直观地表示整个组织的知识流和依赖关系。  </td></tr><tr><td>知识组织</td><td>Knowledge Organization</td><td>一套流程，用来组织机构的知识资产，以便能够有效地管理、评估和使用它们。  </td></tr><tr><td>知识拥有者</td><td>Knowledge Owner</td><td>管理特定领域的知识，负责知识库的内容，保持其准确、完整和处于最新状态。  </td></tr><tr><td>知识保留</td><td>Knowledge Retention</td><td>一套流程，用来在个别人员流动时，将重要知识留在组织内。通常把重点放在隐性知识的保留和传递上。  </td></tr><tr><td>知识整合</td><td>Knowledge Synthesis</td><td>将来自多个源头的知识编纂，并提取到一套格式一致的指导性文件中，以便参考。  </td></tr></tbody></table><h1 id="分条显示"><a href="#分条显示" class="headerlink" title="分条显示"></a>分条显示</h1><h2 id="3-Report"><a href="#3-Report" class="headerlink" title="3 Report"></a>3 Report</h2><p>一种结构化文档，遵循审查、分析和记录关于产品故障与产品设计改进知识的过程。  </p><h2 id="包装"><a href="#包装" class="headerlink" title="包装"></a>包装</h2><p>Packaging<br>将知识编纂、合成一致的格式，这样就可以提供给知识客户，以方便最大限度地再利用。  </p><h2 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h2><p>Tag cloud<br>资源集合中的一群常用的关键词，字体的大小象征着该关键词的使用频率。  </p><h2 id="标记系统"><a href="#标记系统" class="headerlink" title="标记系统"></a>标记系统</h2><p>Tagging System<br>一种系统，允许用户将自己的关键词添加到信息或知识资源。  </p><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><p>Blog<br>一种在线软件应用，可写作并发布简短的文章，按时间顺序显示条目。可用来记录项目和活动发生时的知识与见解。  </p><h2 id="编码知识"><a href="#编码知识" class="headerlink" title="编码知识"></a>编码知识</h2><p>Codified Knowledge<br>编码知识是以文本、视频或图片形式记录的知识，也称为显性知识。  </p><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><p>Big Data<br>一个广义的术语，指处理和挖掘多源的、非常大的数据集，为业务获得有意义和可行的见解。  </p><h2 id="创新"><a href="#创新" class="headerlink" title="创新"></a>创新</h2><p>Innovation<br>通过创造新知识，实现和验证想法、试验和解决问题，推出有显著改进的产品、流程和服务。  </p><h2 id="对话"><a href="#对话" class="headerlink" title="对话"></a>对话</h2><p>Dialogue<br>会话的一种方式，强调探讨不同的观点并实现相互理解，不一定达成协议。  </p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>Taxonomy<br>一个结构化、受控的词汇表，用来描述文档或讨论的所属领域。分类是元数据的一部分，用于支持相关内容的搜索和检索。分类也可用来描述关联个人和社区的专业知识主题。  </p><h2 id="分类面"><a href="#分类面" class="headerlink" title="分类面"></a>分类面</h2><p>Taxonomy Facet<br>分类的一个元素，它关注知识资源的具体属性，例如文档的类型、参考的活动和涉及的实体。  </p><h2 id="公司健忘症"><a href="#公司健忘症" class="headerlink" title="公司健忘症"></a>公司健忘症</h2><p>Corporate Amnesia<br>当人员离开时，由于知识流失而造成关键能力的丧失。  </p><h2 id="概念验证"><a href="#概念验证" class="headerlink" title="概念验证"></a>概念验证</h2><p>Proof of Concept<br>一种规模很小的活动，目的是向管理层的利益相关者证明KM的价值。  </p><h2 id="环境可寻找"><a href="#环境可寻找" class="headerlink" title="环境可寻找"></a>环境可寻找</h2><p>Ambient Findability<br>确保在需要的时间点或环境中，相关的知识资源自动弹出。这意味着要预见可能需要相关资源的地方并设计在该时间点将内容“推送”给用户。  </p><h2 id="收益映射"><a href="#收益映射" class="headerlink" title="收益映射"></a>收益映射</h2><p>Best Mapping<br>一种系统形象的方法，演示KM举措和积极的业务成果之间的联系。  </p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>Retrospect<br>项目或重大活动周期结束时的结构化促进会，以在团队解散前吸取经验教训。  </p><h2 id="合伙"><a href="#合伙" class="headerlink" title="合伙"></a>合伙</h2><p>Partnering<br>一种结构化的方法，以确定合作伙伴并与他们交往，协商责任和贡献，同时认可合作伙伴的条件限制和优先事项。  </p><h2 id="接力棒传递"><a href="#接力棒传递" class="headerlink" title="接力棒传递"></a>接力棒传递</h2><p>Baton Passing<br>一种促进的过程，将知识从一个团队传递给进行同类工作的另一个团队。  </p><h2 id="经验教训数据库"><a href="#经验教训数据库" class="headerlink" title="经验教训数据库"></a>经验教训数据库</h2><p>Lessons Database<br>一个数据库，其中存储了经验教训，并且可以分类和检索。  </p><h2 id="经验教训管理系统"><a href="#经验教训管理系统" class="headerlink" title="经验教训管理系统"></a>经验教训管理系统</h2><p>Lessons Management System<br>一个系统，用来管理经验教训的吸取、验证、嵌入和应用。与经验教训数据库不同的是包含工作流程，以确保经验教训得到吸取和学习，而不仅仅是记录和存储。  </p><h2 id="记录保存和管理"><a href="#记录保存和管理" class="headerlink" title="记录保存和管理"></a>记录保存和管理</h2><p>Recordkeeping, Records Management<br>一套系统流程，保存正式记录，包括官方决定、活动和交易，目的是管理控制、问责、合规，保存组织记忆。  </p><h2 id="基于搜索的应用"><a href="#基于搜索的应用" class="headerlink" title="基于搜索的应用"></a>基于搜索的应用</h2><p>Search-Based Application<br>一种软件应用，利用搜索引擎向有需要的特定用户主动提供非常有针对性的内容。  </p><h2 id="目的社区"><a href="#目的社区" class="headerlink" title="目的社区"></a>目的社区</h2><p>Community of Purpose<br>类似于实践社区，但成员的分享聚焦于有共同目的、流程或目标。社区关注交付共同目的，例如，创建最佳实践。  </p><h2 id="门户"><a href="#门户" class="headerlink" title="门户"></a>门户</h2><p>Portal<br>一个网站，提供对知识库、软件应用和协作工具的访问使用。  </p><h2 id="内容管理"><a href="#内容管理" class="headerlink" title="内容管理"></a>内容管理</h2><p>Content Management<br>运用流程和系统来管理信息内容，以支持组织的需求，无论是网络内容、文档、记录，还是其他形式的编码知识。  </p><h2 id="铺开"><a href="#铺开" class="headerlink" title="铺开"></a>铺开</h2><p>Roll-out<br>将新的工作方式扩大到整个组织的过程。  </p><h2 id="嵌入"><a href="#嵌入" class="headerlink" title="嵌入"></a>嵌入</h2><p>Embedding<br>旨在确保新工作方式成为永久性无形资产的一系列流程和干预措施。  </p><h2 id="企业搜索专家"><a href="#企业搜索专家" class="headerlink" title="企业搜索专家"></a>企业搜索专家</h2><p>Enterprise Search Specialist<br>一种角色，负责确保搜索技术有效地利用分类法，支持信息架构师的设计目标，帮助用户查找和访问对他们有用的信息和知识资源。  </p><h2 id="企业分类学家"><a href="#企业分类学家" class="headerlink" title="企业分类学家"></a>企业分类学家</h2><p>Enterprise Taxonomist<br>一种角色，负责开发、实施和维护企业分类法，以支持知识资源的寻找、访问和再利用。  </p><h2 id="企业分类管理系统"><a href="#企业分类管理系统" class="headerlink" title="企业分类管理系统"></a>企业分类管理系统</h2><p>Enterprise Taxonomy Management System<br>一个软件应用，支持多个分类法、元数据元素和其他参考词语的管理系统集中管理，并作为许多不同信息系统的统一词汇源。  </p><h2 id="人力资本"><a href="#人力资本" class="headerlink" title="人力资本"></a>人力资本</h2><p>Human Capital<br>由一个组织拥有，使其能够有效工作的知识、能力、价值观和社会属性的储备，人力资本是无形资产的一种形式。  </p><h2 id="任务后检视"><a href="#任务后检视" class="headerlink" title="任务后检视"></a>任务后检视</h2><p>After Action Review<br>一种结构化的简短会议，在会上团队审查最近的工作活动，并为未来总结经验教训。这个过程通常用于短期活动，例如项目内的任务。  </p><h2 id="商业智能"><a href="#商业智能" class="headerlink" title="商业智能"></a>商业智能</h2><p>Business Intelligence<br>通过收集和分析来自环境的信息支持决策，以避免风险，为变革创造可能性。  </p><h2 id="实践社区"><a href="#实践社区" class="headerlink" title="实践社区"></a>实践社区</h2><p>Community of Practice<br>以人为中心的网络，他们从事相同类型的活动或实践领域，在线上或线下定期分享有关他们实践的知识，互相帮助，使彼此工作做得更好。  </p><h2 id="胜任力"><a href="#胜任力" class="headerlink" title="胜任力"></a>胜任力</h2><p>Competence<br>技术知识、技能和价值观的结合，使某人有能力发挥作用或职能。  </p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>Data<br>测量结果、观察所得和事实，可以组合并整理成信息。  </p><h2 id="失败展览会"><a href="#失败展览会" class="headerlink" title="失败展览会"></a>失败展览会</h2><p>Fail Fair<br>一种企业范围内的活动，目的是展示组织关于关键知识和改进机会的失败，并体现领导层对探索失败、寻求知识的文化意愿。  </p><h2 id="试点"><a href="#试点" class="headerlink" title="试点"></a>试点</h2><p>Pilot<br>一个小规模的项目，用来检验组织某个部分的KM框架，并向业务利益相关者展示KM的价值。试点还应该产生见解，从而改进KM框架。  </p><h2 id="实践所有者"><a href="#实践所有者" class="headerlink" title="实践所有者"></a>实践所有者</h2><p>Practice Owner<br>某领域专家，负责维护该业务专业实践领域的知识，确保能发展和保持必要的能力，同时配套知识库可用和更新。  </p><h2 id="社交媒体"><a href="#社交媒体" class="headerlink" title="社交媒体"></a>社交媒体</h2><p>Social Media<br>在线软件应用，旨在鼓励和促进社会交往。  </p><h2 id="社交网络分析"><a href="#社交网络分析" class="headerlink" title="社交网络分析"></a>社交网络分析</h2><p>Social Network Analysis<br>一种方法，描绘团队、社区或组织中的人际交往，评估联系的程度，并确定干预措施来改进知识和信息的流动。  </p><h2 id="社会认同"><a href="#社会认同" class="headerlink" title="社会认同"></a>社会认同</h2><p>Social Proof<br>使人相信一种方法的价值，向他们展示和他们情况类似的人从这种方法中受益的例子。  </p><h2 id="同行协助"><a href="#同行协助" class="headerlink" title="同行协助"></a>同行协助</h2><p>Peer Assist<br>一种结构化的促进会或研讨会，需要解决问题或战胜挑战的团队，邀请其他业务部门或行业的人，分享经验、见解和知识。  </p><h2 id="同行审查"><a href="#同行审查" class="headerlink" title="同行审查"></a>同行审查</h2><p>Peer Review<br>一种结构化的促进会或研讨会，邀请其他业务部门或行业的人，审查另一团队的工作。  </p><h2 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h2><p>Culture<br>社区或组织内部表现出来的独特行为、假设和价值观模式。因为它们融入了行为，所以很难简单地通过吸引人的理由来改变，而是必须通过系统的变革计划，实施新的流程、角色和其他推动因素。  </p><h2 id="无形资产"><a href="#无形资产" class="headerlink" title="无形资产"></a>无形资产</h2><p>Intangible Assets<br>一个组织的资产，但不能像现金、设施或设备这些有形资产一样量化和列在资产负债表上。无形资产的例子有名声、商誉、客户资本、人力资本或能力。知识是一种重要的无形资产。  </p><h2 id="问答论坛"><a href="#问答论坛" class="headerlink" title="问答论坛"></a>问答论坛</h2><p>Q&amp;A Forum<br>一个基于电子邮件的讨论论坛，围绕着问题和答案建立。这些可以成为在实践社区内交流知识的一种强大手段。社区成员可以在论坛里提问，由他们在世界其他地方的同行回答。  </p><h2 id="维基"><a href="#维基" class="headerlink" title="维基"></a>维基</h2><p>Wiki<br>一组网页，读者通过网页浏览器界面可以直接编辑。  </p><h2 id="维基马拉松"><a href="#维基马拉松" class="headerlink" title="维基马拉松"></a>维基马拉松</h2><p>Wikithon<br>一个促进活动，一组知识所有者或实践社区成员一起在维基平台上合成集体知识库。  </p><h2 id="显性知识"><a href="#显性知识" class="headerlink" title="显性知识"></a>显性知识</h2><p>Explicit Knowledge<br>以前的定义是显性知识是可以表达和描述的知识。如今，这个术语已经变成了编码知识的同义词。  </p><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><p>Information<br>能告诉你一些事情的数据的集合和呈现。  </p><h2 id="信息架构师"><a href="#信息架构师" class="headerlink" title="信息架构师"></a>信息架构师</h2><p>Information Architect<br>一个角色，负责在门户网站或知识库这样的系统中设计信息和知识环境，以便用户可以轻松浏览和检索信息资源。  </p><h2 id="行动前审查"><a href="#行动前审查" class="headerlink" title="行动前审查"></a>行动前审查</h2><p>Baton Passing<br>一种促进讨论会，在项目或活动周期开始前，确定与项目有关的知识需求和优先学习的内容。  </p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>Learning<br>由于获得新的见解和知识，从而改进做事方式。  </p><h2 id="学习历史学家"><a href="#学习历史学家" class="headerlink" title="学习历史学家"></a>学习历史学家</h2><p>Learning Historian<br>一个角色，负责通过访谈、数据收集和分析来创造可学习的历史。从特定的活动或事件中萃取可学习的知识，并就经验教训的应用给出指导方针。  </p><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><p>Metadata<br>描述数据或文档属性的数据，例如标题、作者、创建日期、主题、结构、安全分类。元数据有助于内容的管理，并支持对内容的访问，例如通过搜索。  </p><h2 id="隐性知识"><a href="#隐性知识" class="headerlink" title="隐性知识"></a>隐性知识</h2><p>Tacit Knowledge<br>保存在人的头脑和身体中的知识，有可能写下来，也有可能无法记录。  </p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>Validate<br>确保某件事中的教训或知识点是有效与可防范的，并可作为最佳实践，在将来可以应用。  </p><h2 id="Yammer黄页"><a href="#Yammer黄页" class="headerlink" title="Yammer黄页"></a>Yammer黄页</h2><p>Yellow Pages<br>一种商用微博工具，微博支持分享短消息和更新。见“找人”。  </p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>Best Practice<br>一种做事的实践或方法，经过确认和验证，是目前已知最好的做事方法。  </p><h2 id="治理"><a href="#治理" class="headerlink" title="治理"></a>治理</h2><p>Governance<br>通过架构、政策、指标、绩效管理和支持的组合，实现对组织职能的有效管理、监督和问责。  </p><h2 id="战略知识领域"><a href="#战略知识领域" class="headerlink" title="战略知识领域"></a>战略知识领域</h2><p>Strategic Knowledge Areas<br>战略中基于知识的能力，对组织的效率和竞争至关重要。  </p><h2 id="找人"><a href="#找人" class="headerlink" title="找人"></a>找人</h2><p>People Finder<br>一个知识目录，将人名与知识领域匹配，用以帮助员工找出在组织中“谁知道什么”。  </p><h2 id="自动分类工具"><a href="#自动分类工具" class="headerlink" title="自动分类工具"></a>自动分类工具</h2><p>Autoclassification Tools<br>给信息和知识资产自动分配标签或分类主题的软件工具。它们可以按给用户的检验标签或主题工作，或者它们可以完全自动化，在后台工作，不用人干预。  </p><h2 id="专家系统"><a href="#专家系统" class="headerlink" title="专家系统"></a>专家系统</h2><p>Expert System<br>一种系统，将专家的知识和决策规则嵌入软件应用中的算法与工作流程。  </p><h2 id="资源映射"><a href="#资源映射" class="headerlink" title="资源映射"></a>资源映射</h2><p>Resource Mapping<br>一种结构化和形象的方法，可确定KM实施所需的资源，还有谁将负责贡献这些资源。  </p><h2 id="专业支持律师"><a href="#专业支持律师" class="headerlink" title="专业支持律师"></a>专业支持律师</h2><p>Professional Support Lawyer, PSL<br>律师事务所的一个角色，负责提建议，运用先例和诀窍，为客户提供培训和支持。  </p><h2 id="政策"><a href="#政策" class="headerlink" title="政策"></a>政策</h2><p>Policy<br>对特定活动领域相关雇员期望的明确说明，阐明指导原则、角色和责任、支持指南。  </p><h2 id="主题专家"><a href="#主题专家" class="headerlink" title="主题专家"></a>主题专家</h2><p>Subject Matter Expert<br>社区或职能中的某人，拥有子领域主题知识的所有权或管理权，并代表社区或组织管理该子领域，经常接受实践所有者的指导或监督。  </p><h2 id="知识资产创造流程"><a href="#知识资产创造流程" class="headerlink" title="知识资产创造流程"></a>知识资产创造流程</h2><p>Knowledge Asset Creation Process,KNAC<br>由西门子开发的一个五步过程，用来围绕一个特定的主题或产品创造合成知识资产。  </p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><p>Knowledge<br>让你采取有效行动的诀窍、技巧、经验、理解和经验法则。另见显性知识和隐性知识。  </p><h2 id="知识分析师"><a href="#知识分析师" class="headerlink" title="知识分析师"></a>知识分析师</h2><p>Knowledge Analyst<br>一种角色，负责围绕来自不同知识库的具体主题，检索和整理知识资源，并准备向内部或外部客户汇报。  </p><h2 id="知识资产"><a href="#知识资产" class="headerlink" title="知识资产"></a>知识资产</h2><p>Knowledge Assets<br>分散独立、可识别的知识项目或集合，有助于使组织有效地工作。知识资产覆盖了从显性到隐性知识类型的整个范围。它们包括技巧、能力、方法、实践、经验领域、专业知识和关系资本。  </p><h2 id="知识审计"><a href="#知识审计" class="headerlink" title="知识审计"></a>知识审计</h2><p>Knowledge Audit<br>一个总称，指系统地评估知识资产、知识差距、知识流和KM流程，目标是提出改进建议。通常是KM实施详细规划过程的一部分。  </p><h2 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h2><p>Knowledge Bank, Knowledge Base<br>收藏组织或实践社区的显性知识的地方。  </p><h2 id="知识经纪人"><a href="#知识经纪人" class="headerlink" title="知识经纪人"></a>知识经纪人</h2><p>Knowledge Broker<br>一种角色，将他们与工作之外的知识和信息联系起来，通常通过同事自己的社交网络。  </p><h2 id="知识咖啡馆"><a href="#知识咖啡馆" class="headerlink" title="知识咖啡馆"></a>知识咖啡馆</h2><p>Knowledge Café<br>一种促进性大型会议，通常在咖啡厅风格的桌子旁进行，在会上小组分享对话。一般每桌都有一位引导员促进对话，在每个对话周期结束时，同桌的其他参与者分开，加入不同小组和不同桌子。知识咖啡馆有利于给复杂的问题或挑战带来多个视角，并加强交流和建立关系。  </p><h2 id="知识获取和记录"><a href="#知识获取和记录" class="headerlink" title="知识获取和记录"></a>知识获取和记录</h2><p>Knowledge Capture, Knowledge Documentation<br>将隐性知识记录为编码形式，从而成为显性知识的过程。  </p><h2 id="知识工程师"><a href="#知识工程师" class="headerlink" title="知识工程师"></a>知识工程师</h2><p>Knowledge Engineer<br>一种角色，负责从专家、团队或部门获取知识。  </p><h2 id="知识交换"><a href="#知识交换" class="headerlink" title="知识交换"></a>知识交换</h2><p>Knowledge Exchange<br>一种会议，许多人在会上讨论和互相学习，在知识交流的过程中，每个人都是贡献者，同时也是学习者。  </p><h2 id="知识展览会"><a href="#知识展览会" class="headerlink" title="知识展览会"></a>知识展览会</h2><p>Knowledge Fair<br>一种组织范围的活动，目的是展示其知识能力和显示KM的好处。  </p><h2 id="知识移交"><a href="#知识移交" class="headerlink" title="知识移交"></a>知识移交</h2><p>Knowledge Handover<br>一个促进的过程，将已经完成项目的项目组获得的经验教训转移给可能需要该知识的其他项目组。  </p><h2 id="知识管理"><a href="#知识管理" class="headerlink" title="知识管理"></a>知识管理</h2><p>Knowledge Management<br>一种系统的战略方法，将一个组织集体知识的价值最大化。  </p><h2 id="知识管理拥护者"><a href="#知识管理拥护者" class="headerlink" title="知识管理拥护者"></a>知识管理拥护者</h2><p>Knowledge Management Champion<br>一种角色，这个人通常除了正规的职能角色，另外被赋予在其业务部分支持KM活动的责任。  </p><h2 id="知识管理框架"><a href="#知识管理框架" class="headerlink" title="知识管理框架"></a>知识管理框架</h2><p>Knowledge Management Framework<br>一种框架，描述了KM要有效嵌入组织的工作方式所需的推动因素。  </p><h2 id="知识管理计划"><a href="#知识管理计划" class="headerlink" title="知识管理计划"></a>知识管理计划</h2><p>Knowledge Management Plan<br>一种文档，记录了知识需求、知识差距、知识来源和获得策略、知识创造角色、责任和既定项目或活动的流程。  </p><h2 id="知识经理"><a href="#知识经理" class="headerlink" title="知识经理"></a>知识经理</h2><p>一种角色，其主要职责是确保其所在组织中团队的知识得到管理，从而实现业务利益。<br>Knowledge Manager  </p><h2 id="知识地图"><a href="#知识地图" class="headerlink" title="知识地图"></a>知识地图</h2><p>Knowledge Map<br>一种直观的表示，显示知识资产在组织中的位置和它们如何与关键的功能区和活动相关，或者直观地表示整个组织的知识流和依赖关系。  </p><h2 id="知识组织"><a href="#知识组织" class="headerlink" title="知识组织"></a>知识组织</h2><p>Knowledge Organization<br>一套流程，用来组织机构的知识资产，以便能够有效地管理、评估和使用它们。  </p><h2 id="知识拥有者"><a href="#知识拥有者" class="headerlink" title="知识拥有者"></a>知识拥有者</h2><p>Knowledge Owner<br>管理特定领域的知识，负责知识库的内容，保持其准确、完整和处于最新状态。  </p><h2 id="知识保留"><a href="#知识保留" class="headerlink" title="知识保留"></a>知识保留</h2><p>Knowledge Retention<br>一套流程，用来在个别人员流动时，将重要知识留在组织内。通常把重点放在隐性知识的保留和传递上。  </p><h2 id="知识整合"><a href="#知识整合" class="headerlink" title="知识整合"></a>知识整合</h2><p>Knowledge Synthesis<br>将来自多个源头的知识编纂，并提取到一套格式一致的指导性文件中，以便参考。  </p>]]></content>
      
      
      
        <tags>
            
            <tag> 方法论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机知识框架</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>计算机知识框架概览。参照牛客网知识点体系及<a href="http://esdn.125.la/" target="_blank" rel="noopener">http://esdn.125.la/</a><br><a id="more"></a></p><h2 id="数学和逻辑"><a href="#数学和逻辑" class="headerlink" title="数学和逻辑"></a>数学和逻辑</h2><ul><li>微积分</li><li>离散数学</li><li>概率论 概率统计 排列组合</li><li>线性代数</li><li>智力题<br>《算法导论》在附录中给出的4项必备的数学基础。这也是观察世界、指导生活生产的工具。<h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2>  网络基础<br>  操作系统<br>  数据库<br>  编译和体系结构<pre><code>进制本身就是等比数列和</code></pre>  编程基础<br>  加密和安全<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2>  排序<br>  查找<br>  复杂度<br>  高级算法<br>  递归<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2>  数组、字符串、链表、栈、队列、树、堆、图、哈希</li></ul><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="语言分类"><a href="#语言分类" class="headerlink" title="语言分类"></a>语言分类</h3><p>脚本语言：Python、JavaScript</p><ul><li>编程语言 VS标记语言 </li><li>脚本语言 </li><li>弱编程语言 <h3 id="大小写敏感性"><a href="#大小写敏感性" class="headerlink" title="大小写敏感性"></a>大小写敏感性</h3>大多数敏感。<a href="https://blog.csdn.net/yohohohoho/article/details/7236702" target="_blank" rel="noopener">https://blog.csdn.net/yohohohoho/article/details/7236702</a> </li><li><p>不敏感的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语言：VB,VBScript,HTML,Pascal(delphi),sql,foxpro,cobol</span><br><span class="line">OS:Windows/DOS</span><br><span class="line"></span><br><span class="line">[http://cn.python-requests.org/zh_CN/latest/user/quickstart.html#id8 HTTP 头部]</span><br></pre></td></tr></table></figure></li><li><p>可设定<br>sysbase默认是敏感<br>sqlserver,mssql默认是不敏感 </p></li><li>汇编<br>汇编对自身的关键字不敏感，对变量敏感 <h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2>概述<br>注释</li></ul><p>基础语法<br>控制流 选择（条件）和循环 while、for、if 、elif、break、continue、try、except<br>函数及变量作用域<br>模块 创建、引入<br>数据类型 list 泛型<br>类<br>单元测试<br>文本处理 编码</p><h3 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h3><p>在函数的第一个逻辑行的字符串是这个函数的 文档字符串。文档字符串的惯例是一个多行字符串，首行以大写字母开始，句号结尾。第二行空行，第三行及以后是详细的描述。<br>printMax(3, 5)<br>print(printMax.<strong>doc</strong>)<br>你可以使用<strong>doc</strong>（注意双下划线）调用printMax函数的文档字符串属性（属于函数的名称）<br>Python把 每一样东西 都作为对象，包括这个函数。<br>help()所做的只是抓取函数的<strong>doc</strong>属性，然后整洁地展示给你。<br>按q退出help<br>自动化工具也可以以同样的方式从你的程序中提取文档。<br>对你所写的任何正式函数编写文档字符串<br>DocStrings也适用于模块和类<br>强烈建议 你在你的函数中使用文档字符串时遵循这个惯例。<br>随你的Python发行版附带的pydoc命令，与help()类似地使用DocStrings</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">控制台操作：控制台操作 标准输出 标准输入 打印 注释。 Py：#。# 在字符串内的时候只代表字符不代表注释。 多行注释。 带引号。单引号。双引号。混搭。 倒着查错误 </span><br><span class="line">程序调试：输出调试文本 暂停 检查 是否为调试版 </span><br><span class="line">变量操作：赋值 连续赋值 </span><br><span class="line">逻辑比较：等于 不等于 小于 大于 小于或等于 大于或等于 近似等于 并且 或者 取反 </span><br><span class="line">位运算：位取反 位与 位或 位异或 左移 右移 合并整数 合并短整数 </span><br><span class="line">算术运算： 相乘 相除 整除 求余数 相加 相减 负 取符号 取绝对值 取整 绝对取整 四舍五入 求次方 求平方根 求正弦 求余弦 求正切 求反正切 求自然对数 求反对数 是否运算正确 置随机数种子 取随机数 </span><br><span class="line">数值转换：到数值 数值到大写 数值到金额 数值到格式文本 取十六进制文本 取八进制文本 到字节 到短整数 到整数 到长整数 到小数 十六进制 二进制 </span><br><span class="line">数组操作：重定义数组 取数组成员数 取数组下标 复制数组 加入成员 插入成员 删除成员 清除数组 数组排序 数组清零 </span><br><span class="line">文本操作：到全角 到半角 到文本 删首空 删尾空 删首尾空 删全部空 文本替换 子文本替换 取空白文本 取重复文本 文本比较 分割文本 指针到文本 </span><br><span class="line">时间操作：到时间 增减时间 取时间间隔 取某月天数 时间到文本 取时间部分 取年份 取月份 取日 取星期几 取小时 取分钟 取秒 指定时间 取现行时间 置现行时间 取日期 取时间 </span><br><span class="line">文件读写：打开文件 打开内存文件 关闭文件 关闭所有文件 锁住文件 解锁文件 移动读写位置 移到文件首 移到文件尾 读入字节集 写出字节集 读入文本 写出文本 读入一行 写文本行 读入数据 写出数据 是否在文件尾 取读写位置 取文件长度 插入字节集 插入文本 插入文本行 删除数据 打开加密文件 读取、写入、for循环读取、利用缓冲大小、二进制文件</span><br><span class="line">磁盘操作：取磁盘总空间 取磁盘剩余空间 取磁盘卷标 置磁盘卷标 改变驱动器 改变目录 取当前目录 创建目录 删除目录 复制文件 移动文件 删除文件 文件更名重命名 文件是否存在 寻找文件 取文件时间 取文件尺寸 取文件属性 置文件属性 取临时文件名 读入文件 写到文件 </span><br><span class="line">系统处理： 系统处理 运行 取剪辑板文本 置剪辑板文本 剪辑板中可有文本 清除剪辑板 取屏幕宽度 取屏幕高度 取鼠标水平位置 取鼠标垂直位置 取颜色数 输入框 信息框 鸣叫 取启动时间 置等待鼠标 恢复鼠标 延时 取文本注册项 取数值注册项 取字节集注册项 写注册项 删除注册项 注册项是否存在 取默认底色 快照 读配置项 写配置项 取配置节名 取操作系统类别 多文件对话框 取程序名称 交换变量 强制交换变量 取运行时数据类型 宏 类自身 取操作系统类别2 取最后错误 取统一文本 取统一文本长度 </span><br><span class="line">环境存取：取命令行 取运行目录 取执行文件名 读环境变量 写环境变量 </span><br><span class="line">流程控制：如果 如果真 判断 判断循环首 循环判断首 计次循环首 变量循环首 到循环尾 跳出循环 返回 结束 </span><br><span class="line">拼音处理： 取所有发音 取发音数目 取拼音 取声母 取韵母 发音比较 输入字比较 </span><br><span class="line">字节集操作：取字节集长度 取字节集数据 取空白字节集 取重复字节集 取字节集左边 取字节集右边 取字节集中间 寻找字节集 倒找字节集 字节集替换 子字节集替换 分割字节集 指针到字节集 指针到整数 指针到小数 指针到双精度小数 到字节集 </span><br><span class="line">媒体播放：媒体播放 播放音乐 停止播放 播放MID 播放MP3 同步播放MP3 暂停播放MP3 继续播放MP3 取MP3播放状态 </span><br><span class="line">其他：载入 选择 多项选择 是否为空 是否已创建 取数据类型尺寸 取颜色值 取事件组件 事件转移 复制窗口组件 处理事件 载入图片 卸载图片 取硬盘特征字 取系统语言 写到内存 DLL命令调用转向 置错误提示管理 置DLL装载目录 取组件名称 取对象类型 寻找组件 取找到组件数目 取所找到组件 清除组件寻找句柄 置入代码 运行控制台程序 取核心库版本 </span><br><span class="line">数据库：是否支持多用户 取错误码 取错误信息 创建 打开 替换打开 置当前库 取当前库 关闭 全部关闭 取库文件名 是否已打开 取记录数 取创建时间 取字段数 取字段名 改字段名 取字段类型 取字段尺寸 新建索引 置当前索引 取当前索引 更新索引 取索引数 取索引名 取索引字段 置加锁重试时间 锁住数据库 解锁数据库 锁住增删 解增删锁 锁住记录 解锁记录 全部解锁 取平均值 求和 取最大值 取最小值 取最大时间 取最小时间 计算数目 复制结构 复制记录 计算排序 排序 分类计算 添加 加记录 加空记录 替换 修改 删除 是否已删除 恢复删除 彻底删除 清空 读 写 读字段 写字段 附加字节集 附加备注 索引查找 查找 到首记录 到尾记录 跳过 取记录号 跳到 取标签 记录是否存在 标签跳转 首记录前 尾记录后 写出缓存 写出所有缓存 编辑 是否已加密 置数据库密码 密码输入框 复制密码 </span><br><span class="line">网络通信： 取主机名 通信测试 转换为主机名 转换为IP地址 </span><br><span class="line">包：易包 载入易包文件 载入易包数据 卸载易包 易包是否被载入 复制易包常量</span><br></pre></td></tr></table></figure><p><a href="https://www.jb51.net/Special/516.htm" target="_blank" rel="noopener">Python文件处理</a></p><h2 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h2><p>编码风格<br>TODO: 未整理部分</p><p>在 Python主窗口中输入 Control-P可能是检查是否支持命令行编辑的最简单的方法。<br>在 Unix系统上，任何 Python解释器都可能已经添加了 GNU readline库支持，这样就具备了精巧的交互编辑和历史记录等功能。<br>如果发出嘟嘟声（计算机扬声器），则说明你可以使用命令行编辑功能；<br>如果没有任何声音，或者显示 ^P字符，则说明命令行编辑功能不可用；你只能通过退格键从当前行删除已键入的字符并重新输入。<br>窗口：主窗口、DOS窗口、Python主窗口、控制台窗口、交互环境、行编辑<br>退出解释器：quit()、exit()</p><p>Python解释器有些操作类似 Unix shell：<br>当使用终端设备（tty）作为标准输入调用时，它交互解释并执行命令；<br>当使用文件名参数或文件作为标准输入调用时，它读取文件并将文件作为脚本执行。<br> 启动<br>第二种启动 Python解释器的方法是 python -c command [arg] …<br>这种方法可以在命令行执行 Python语句，类似于 shell中的 -c选项。由于 Python语句通常会包含空格或其他特殊 shell字符，一般建议将命令用单引号包裹起来。<br> 模块脚本<br>有一些 Python模块也可以当作脚本使用。你可以使用 python -m module [arg] …命令调用它们，这类似在命令行中键入完整的路径名执行模块源文件一样。<br>使用脚本文件时，经常会运行脚本然后进入交互模式。这也可以通过在脚本之前加上-i参数来实现<br> 参数传递<br>调用解释器时，脚本名和附加参数传入一个名为 <code>sys.argv</code>的字符串列表。<br>通过执行<code>import sys</code>你能够获取这个列表 ，列表的长度大于等于1；<br>没有给定脚本和参数时，它至少也有一个元素： <code>sys.argv[0]</code>此时为空字符串。<br>脚本名指定为 ’-’（表示标准输入）时， <code>sys.argv[0]</code>被设定为 ’-’，<br>使用 -c指令时， <code>sys.argv[0</code>]被设定为 ’-c’。<br>使用 -m模块参数时， <code>sys.argv[0]</code>被设定为指定模块的全名。<br>-c指令或者 -m模块之后的参数不会被 Python解释器的选项处理机制所截获，而是留在 <code>sys.argv</code>中，供脚本命令操作。<br> 交互模式<br>从 tty读取命令时，我们称解释器工作于交互模式。<br>这种模式下它根据主提示符来执行，主提示符通常标识为三个大于号 (&gt;&gt;&gt;)；<br>继续的部分被称为从属提示符，由三个点标识 (…)。<br>在练习中遇到的从属提示符表示你需要在最后多输入一个空行，解释器才能知道这是一个多行命令的结束。<br>在第一行之前，解释器打印欢迎信息、版本号和授权提示: </p><p>有错误发生时，解释器打印一个错误信息和栈跟踪器。交互模式下，它返回主提示符，如果从文件输入执行，它在打印栈跟踪器后以非零状态退出。<br>（异常可以由 try语句中的 except子句来控制，这样就不会出现上文中的错误信息）<br>有一些非常致命的错误会导致非零状态下退出，这由通常由内部矛盾和内存溢出造成。<br>所有的错误信息都写入标准错误流；命令中执行的普通输出写入标准输出。<br>在主提示符或附属提示符输入中断符（通常是 Control-C或者 DEL）就会取消当前输入，回到主命令行。<br>执行命令时输入一个中断符会抛出一个 <code>KeyboardInterrupt</code>异常，它可以被 try句截获。 GNU Readline包的一个问题可能禁止此功能。<br> 执行 Python脚本 </p><p>#!必须是文件的前两个字符，确认Python解释器在用户的PATH中<br>在某些平台上，第一行必须以 Unix风格的行结束符（ ’n’）结束，不能用 Windows（ ’rn’）的结束符。注意， ’#’是 Python中是行注释的起始符。<br>脚本可以通过 chmod命令指定执行模式和权限:<br>$ chmod +x myscript.py<br>Windows系统上没有“执行模式”。<br>Python安装程序自动将 .py文件关联到 python.exe，所以在 Python文件图标上双击，它就会作为脚本执行。同样 .pyw也作了这样的关联，通常它执行时不会显示控制台窗口。<br> 源程序编码<br>默认情况下，Python源文件是 UTF-8编码。<br>在此编码下，全世界大多数语言的字符可以同时用在字符串、标识符和注释中 。<br>尽管 Python标准库仅使用 ASCII字符做为标识符，这只是任何可移植代码应该遵守的约定。<br>如果要正确的显示所有的字符，你的编辑器必须能识别出文件是 UTF-8编码，并且它使用的字体能支持文件中所有的字符。<br>你也可以为源文件指定不同的字符编码。为此，在 #!行（首行）后插入至少一行特殊的注释行来定义源文件的编码。  </p><p><nowiki>#</nowiki> -<em>-coding: encoding -</em>-<br>通过此声明，源文件中所有的东西都会被当做用 encoding指代的 UTF-8编码对待。<br>在 Python库参考手册 codecs一节中你可以找到一张可用的编码列表。<br>例如，如果你的编辑器不支持 UTF-8编码的文件，但支持像 Windows-1252的其他一些编码，你可以定义:  </p><p><nowiki>#</nowiki> -<em>-coding: cp-1252 -</em>-<br>这样就可以在源文件中使用 Windows-1252字符集中的所有字符了。这个特殊的编码注释必须在文件中的第一或第二行定义。<br><a href="http://ww1.sinaimg.cn/large/64a4ff83gy1fyyg3s0ms3j20of0qidlv.jpg" target="_blank" rel="noopener">http://ww1.sinaimg.cn/large/64a4ff83gy1fyyg3s0ms3j20of0qidlv.jpg</a> </p><p>编码 <a href="https://www.cnblogs.com/jessicaxu/p/7977277.html" target="_blank" rel="noopener">https://www.cnblogs.com/jessicaxu/p/7977277.html</a> Python-Url编码和解码<br>flask <a href="https://dormousehole.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">https://dormousehole.readthedocs.io/en/latest/index.html</a> </p><p>list<br><a href="https://www.jb51.net/Special/638.htm" target="_blank" rel="noopener">专题</a><br><a href="https://www.jb51.net/article/144938.htm" target="_blank" rel="noopener">并交差</a><br><a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" target="_blank" rel="noopener">docs</a><br><a href="https://docs.python.org/zh-cn/3/tutorial/datastructures.html#the-del-statement" target="_blank" rel="noopener">docs_zh</a></p><p>JavaScript<br>申明一个变量用var语句，比如：var s_007 = ‘007’。<br>W3C，即万维网联盟，是Web技术领域最具权威和影响力的国际中立性技术标准机构。万维网联盟（W3C）标准不是某一个标准，而是一系列标准的集合。<br><br>Web前端最需要知道的标准。<br>网页构成<br>网页主要由三部分组成：</p><ul><li>结构（Structure）：XHTML和XML</li><li>表现（Presentation）：CSS</li><li>行为（Behavior）：对象模型（如W3C DOM）、ECMAScript<br>工具 </li><li><a href="https://picjumbo.com/" target="_blank" rel="noopener">https://picjumbo.com/</a> 图片压缩</li><li><a href="https://pixabay.com/zh/editors_choice/" target="_blank" rel="noopener">https://pixabay.com/zh/editors_choice/</a> 桌面</li><li><a href="https://cn.freeimages.com/image/arts-design" target="_blank" rel="noopener">https://cn.freeimages.com/image/arts-design</a> 设计</li><li><a href="https://picjumbo.com/" target="_blank" rel="noopener">https://picjumbo.com/</a> 商业 </li></ul><p>弱编程语言<br>为变量赋值时会自动判断类型并进行转换。</p><ul><li>Python </li><li><p>JavaScript<br>JavaScript声明变量的时候都是使用关键字var，没有int、char之说，<br>标记语言<br>标记语言是一套标记。<br><br>HTML使用标记来描述网页。浏览器不会显示HTML标记，而是使用标记来解释页面的内容。<br>HTML<br>JavaScript </p><source lang="js"><br>var role = 20;<br>if (age &gt;= 18) {<br>alert(‘adult’);<br>} else {<br>alert(‘teenager’);<br>}<br> </li><li><p><a href="https://www.w3school.com.cn/tags/tag_a.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/tags/tag_a.asp</a></p></li><li>[<a href="https://zhidao.baidu.com/question/207910673.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/207910673.html</a> 去下划线]<br><a href="https://www.w3school.com.cn/xpath/xpath_operators.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/xpath/xpath_operators.asp</a><br>泛型 [<a href="https://cloud.tencent.com/developer/article/1014635" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1014635</a> 腾讯社区]<br>编码习惯：</li><li>需求分析</li><li>初始变量和中间变量</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 方法论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机学习路线</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>A computer scientist’s advices from his <a href="https://www.afternerd.com/blog/learn-computer-science/" target="_blank" rel="noopener">blog</a><br>How to Learn Computer Science? (from Zero to Hero)<br>personal opinions and information through real-world experiences<br><a href="https://teachyourselfcs.com/" target="_blank" rel="noopener">https://teachyourselfcs.com/</a><br><a href="https://bradfieldcs.com/" target="_blank" rel="noopener">https://bradfieldcs.com/</a><br><a id="more"></a></p><h2 id="The-Coder"><a href="#The-Coder" class="headerlink" title="- The Coder"></a>- <em>The Coder</em></h2><ul><li>Writing code that does the job</li><li>knows how to speak the language of a machine</li><li>break down a given problem into instructions that the machine can understand in order to come up with a solution.</li><li>your skills are <em>easily</em> replaceable</li><li>learned the basics of at least two programming languages (preferably one statically-typed【Java】 and one dynamically-typed【Python】)⇒take you from an absolute beginner to a professional Pythonista<ul><li>the difference between statically and dynamically</li><li>To learn python, highly recommend <a href="https://book.douban.com/subject/31333701/" target="_blank" rel="noopener">https://book.douban.com/subject/31333701/</a></li><li>Java。teach you some programming concepts that don’t even exist in Python.<ul><li>Java fundamentals <a href="https://book.douban.com/subject/30326049/" target="_blank" rel="noopener">https://book.douban.com/subject/30326049/</a></li><li>advanced Java features <a href="https://book.douban.com/subject/30403780/" target="_blank" rel="noopener">https://book.douban.com/subject/30403780/</a></li><li>not to overwhelm yourself with the advanced features for now. Focus on the fundamentals in this phase.</li></ul></li><li>combination ⇒ a very solid idea of the programming concepts that you will need in almost any other programming language。<h2 id="The-Programmer"><a href="#The-Programmer" class="headerlink" title="- The Programmer"></a>- <em>The Programmer</em></h2></li></ul></li><li>a <em>sophisticated coder</em>.</li><li>writing <em>efficient</em> code that does the job</li><li>There is still a long way to go on your career path.There are a lot of coders out there.The vast majority of software engineers retire at this phase.</li><li>understand what makes code efficient and what doesn’t</li><li>understand that quality is important and that testing your code is crucial.</li><li>understand how hardware is eventually going to run your code.know the fundamentals of how any code eventually turns into something that a hardware chip can understand and execute.understand that any system has finite compute, storage, and network resources and your software should utilize these resources efficiently.You know that you have limited hardware resources and you understand the value of utilizing the available resources efficiently.</li><li>know how to use data structures and algorithms to write efficient code。Studying algorithms and data structures will teach you how to write code in a way that makes your code more efficient, however you define efficiency. it could be speed, resource utilization, or both.</li><li>expect to get an entry-level job at any of the big tech companies</li><li>you can easily secure a job at one of the big tech companies like Google, Facebook, Amazon, and others.</li><li>most of the interviews conducted at these companies test how good of a *programmer, not how good of a coder</li><li><a href="https://www.afternerd.com/blog/coding-interview/" target="_blank" rel="noopener">https://www.afternerd.com/blog/coding-interview/</a><h2 id="The-Computer-Scientist"><a href="#The-Computer-Scientist" class="headerlink" title="- The Computer Scientist"></a>- <em>The Computer Scientist</em></h2></li><li>an architect who thinks about the big picture more than the nitty gritty details</li><li>have a solid understanding of designing large distributed systems</li><li>know how to build scalable systems that can handle large loads and tolerate failures</li><li>always tries to stay up to date with the latest in technology</li><li>be in charge of big projects</li><li>managing a team (usually of coders and solid programmers) to get the job done</li><li>cooperate with other teams</li><li>stellar social and leadership skills<h2 id="Programming"><a href="#Programming" class="headerlink" title="- Programming"></a>- Programming</h2></li><li>The first and only step is to learn programming.</li><li>it gives you a quick feedback about whether you should pursue a CS career or not.</li><li>concepts will hold true in almost any other programming language⇒each a point where learning a new programming language doesn’t take more than a week⇒ develop significant projects.</li><li><a href="https://www.afternerd.com/blog/learn-python/" target="_blank" rel="noopener">https://www.afternerd.com/blog/learn-python/</a></li><li><a href="https://amzn.to/2WAVGIV" target="_blank" rel="noopener"><em>Python Crash Course.</em></a><h2 id="The-Software-Stack"><a href="#The-Software-Stack" class="headerlink" title="- The Software Stack"></a>- The Software Stack</h2></li><li>What does variable assignment (<strong>x = 5</strong>) mean at the hardware level?</li><li>What is  <strong>x,</strong> really?</li><li>How is the number 5 represented in hardware?</li><li>How does addition actually happen?</li><li>And how did the result end up on my screen?!!</li><li>At the end of the day, a computer is just a collection of hardware chips and wires.</li><li>How can a computer really understand your code? and execute it flawlessly?</li><li>your code is just the tip of the iceberg. There are a lot of other layers under your code. Together, they make the whole thing work the way you expect it to work.</li><li>A <em>programmer</em> unravels this magic.</li><li>At this level, you need a solid understanding of all the layers of the stack starting from your code, all the way down to the hardware layer.<h2 id="Algorithms-and-Data-Structures"><a href="#Algorithms-and-Data-Structures" class="headerlink" title="- Algorithms and Data Structures"></a>- Algorithms and Data Structures</h2></li><li><a href="https://amzn.to/2TayqAG" target="_blank" rel="noopener">The Elements of Computing Systems</a> by <a href="http://www.cs.huji.ac.il/~noam/" target="_blank" rel="noopener">Noam Nisan</a> and <a href="http://shimonschocken.com/" target="_blank" rel="noopener">Shimon Schocken</a> is unequivocally my top suggestion for a book that will teach you the essential information you need to understand each layer of the stack. <a href="https://book.douban.com/subject/8100645/" target="_blank" rel="noopener">https://book.douban.com/subject/8100645/</a><ul><li>The book covers hardware, compilers, linkers, and operating systems at a very basic level which makes it very beginner friendly.</li><li>It walks you through the steps of creating your first programming language, creating a compiler and a linker for it, and then creating an operating system.</li><li><ul><li>When it comes to algorithms and data structures</li></ul></li></ul></li><li>unequivocally <a href="https://book.douban.com/subject/20432061/" target="_blank" rel="noopener">https://book.douban.com/subject/20432061/</a></li><li><a href="https://book.douban.com/subject/1610337/" target="_blank" rel="noopener">https://book.douban.com/subject/1610337/</a> Data Structures and Algorithms in Java</li><li><a href="https://book.douban.com/subject/21325184/" target="_blank" rel="noopener">https://book.douban.com/subject/21325184/</a> Problem Solving with Algorithms and Data Structures Using Python SECOND EDITION</li><li>Be aware that the topic of data structures and algorithms is language neutral, so it doesn’t matter which programming language you’re using.</li><li>In fact, most big tech companies like Google, Facebook, and Amazon <a href="https://www.careercup.com/page" target="_blank" rel="noopener">focus a lot on data structures questions during their interview process</a><h2 id="Networks"><a href="#Networks" class="headerlink" title="- Networks"></a>- Networks</h2></li><li>code communicates with other computers either in a local network or the internet.</li><li>Programmers need to have a very solid foundation of how computer networking works.</li><li>It helped me overcome the dry text book that my professor at the time recommended.</li><li><a href="https://book.douban.com/subject/30280001/" target="_blank" rel="noopener">Computer Networking: A Top-Down Approach</a> by <a href="https://www.cics.umass.edu/faculty/directory/kurose_james" target="_blank" rel="noopener">Kurose</a> and <a href="http://engineering.nyu.edu/people/keith-w-ross" target="_blank" rel="noopener">Ross</a> is a very well-written, super easy to understand book that covers all the networking basics that you need to know.</li><li>I still go back to this book every now and then if I need a refresher.<h2 id="Operating-Systems"><a href="#Operating-Systems" class="headerlink" title="- Operating Systems"></a>- Operating Systems</h2></li><li>Operating systems play a major role in the software stack.</li><li>have a very broad idea of the role of an operating system in the stack.</li><li>But now is the time to have a deeper understanding of operating systems.</li><li><a href="https://amzn.to/2S0QBeF" target="_blank" rel="noopener">Operating Systems Concepts</a> by <a href="http://codex.cs.yale.edu/avi/" target="_blank" rel="noopener">Abraham Silberschatz</a> is one of the best books on the <a href="subject.https://book.douban.com/subject/10076960/" target="_blank" rel="noopener">subject.https://book.douban.com/subject/10076960/</a><ul><li>You need some basic knowledge of C though, because the majority of operating systems are written in C.</li><li>My recommendation, unless you want to be a kernel developer,  is not to allow yourself to get stuck at this point.</li><li>This is a very dense topic. Understanding all the details of all the aspects of operating systems is very time consuming.</li><li>Grasping the main fundamental operating systems concepts is good enough to keep you going but don’t get bogged down in details.</li></ul></li><li>Another resource I highly recommend is the <a href="https://wiki.osdev.org/" target="_blank" rel="noopener">OSDev Wiki</a>, especially if you want to learn how to create your own kernel. This is pretty advanced, but it’s something that the vast majority of software engineers can’t do.</li><li><em>Look at that! You’ve achieved the status of programmer!</em><h2 id="Distributed-Systems"><a href="#Distributed-Systems" class="headerlink" title="- Distributed Systems"></a>- Distributed Systems</h2></li><li>Welcome to the start of your <em>computer scientist</em> status.</li><li>In this level, you will be learning new skills while you improve the skills you learned as a <em>programmer</em>.</li><li>Distributed systems is about building and architecting software systems that are 【scalable and that can tolerate failures】 at the same time. This requires you to think of the 【bigger picture】, rather than focusing on how to build the individual components–programmers and coders can do that.</li><li>For example, think about building a search engine service, like Google, for some text files that exist only in your laptop.</li><li>This service will listen to search queries that it receives over the network, search your files for the query, and respond with the results.</li><li>This is not a hard thing to do. Any <em>programmer </em>with a decent knowledge of algorithms and data structures can build an efficient search engine for a small number of files.</li><li>Now imagine that more and more people become interested in your service and they start using it.</li><li>Now you’re getting millions and millions of requests a second.</li><li>Not only that, but the size and number of files you are searching through begins to grow dramatically.</li><li>What happens if your laptop (that hosts the search service) fails?</li><li>Will you just ignore the millions of requests you’re getting?</li><li>Distributed systems is about creating 【an army of computers】 that work together to form a specific task (in our example, the search service).</li><li>It allows you to create scalable systems that can 【handle more requests or more data】. At the same time, it provides redundancy that would be useful in case any one (or more) machine fails.</li><li>Now, let’s talk about resources.</li><li>By far, <a href="http://the-paper-trail.org/blog/distributed-systems-theory-for-the-distributed-systems-engineer/" target="_blank" rel="noopener">this blog post</a> is the best resource I have found on the subject (disclaimer: you will need to read some academic papers).</li><li>If you are a text book kind of person, then this <a href="https://book.douban.com/subject/26197294/" target="_blank" rel="noopener">O’Reilly book</a> by <a href="https://martin.kleppmann.com/" target="_blank" rel="noopener">Martin Kleppmann</a> is excellent. I have skimmed through it, and it covers most of the important topics.</li><li>With that said, Distributed Systems is a field where experience matters a lot.</li><li>learn the theory</li><li>working on distributed systems projects.<h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="- Machine Learning"></a>- Machine Learning</h2></li><li>Machine learning is an interdisciplinary field that spans computer science, mathematics, and statistics.</li><li><a href="http://www.wired.co.uk/article/how-do-netflixs-algorithms-work-machine-learning-helps-to-predict-what-viewers-will-like" target="_blank" rel="noopener">Netflix uses it for movie recommendations</a>,</li><li><a href="https://aws.amazon.com/machine-learning/" target="_blank" rel="noopener">Amazon uses it for their recommendation engine and for Amazon Echo</a>,</li><li><a href="http://www.vestywaves.com/" target="_blank" rel="noopener">Vesty Waves uses it to automatically classify articles</a></li><li><a href="https://www.wordstream.com/blog/ws/2017/07/28/machine-learning-applications" target="_blank" rel="noopener">the list goes on</a>.</li><li>To be able to build these types of software, you need to be more than just a solid programmer because as I mentioned this field requires a very strong mathematical and statistical foundation.</li><li>And <strong>no</strong>, learning everything about Python’s <a href="https://machinelearningmastery.com/a-gentle-introduction-to-scikit-learn-a-python-machine-learning-library/" target="_blank" rel="noopener">Scikit-Learn</a> library (a very popular Python library for machine learning) won’t make you a data scientist or a machine learning expert. You still need to understand the mathematical and statistical underpinnings.</li><li>There are two ways to study machine learning: the top-down approach method, where you start first by writing machine learning code right away (for example ,by using Python’s Scikit-Learn library) and understand the math later, or the bottom-up approach, where you start with the math first and then move up to coding.</li><li>I personally prefer the second method, just because that’s what works best for me. Even though It’s harder to start and takes longer before you start writing code, once you grasp the concepts, learning how to use a machine learning library is going to be a piece of cake.</li><li>On the other hand, the top-down approach has the advantage of allowing you to begin writing machine-learning code fast.</li><li>This motivates a lot of people.</li><li>The downside of the top-down approach is that it will be much harder for you to understand why some techniques work, while others don’t, because you won’t have the necessary mathematical background at first.</li><li><a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="noopener">Andrew Ng’s course</a> on Coursera is a very good place to start.</li><li>If you have prior knowledge of mathematics, probability, and statistics, then <a href="https://book.douban.com/subject/21706191/" target="_blank" rel="noopener">An Introduction to Statistical Learning</a> is a very good book for building the statistical and mathematical foundations for machine learning.</li><li>However, don’t use this book if you aren’t already strong in linear algebra, probabilities, and basic statistics because you will not be able to understand it.</li><li>If you want to solve real world problems and make money doing this, then create a team, go to <a href="https://www.kaggle.com/competitions" target="_blank" rel="noopener">Kaggle</a>, solve a problem, and make some money.</li><li><em>You did it! You can now call yourself a computer scientist!</em></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 方法论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法实例</title>
      <link href="/%E7%AE%97%E6%B3%95%E5%AE%9E%E4%BE%8B/"/>
      <url>/%E7%AE%97%E6%B3%95%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>各个算法小实例。<br><a id="more"></a><br><a href="https://www.runoob.com/python3/python3-helloworld.html" title="python Hello World 实例" target="_blank" rel="noopener">Python Hello World 实例</a><br><a href="https://www.runoob.com/python3/python3-if-example.html" target="_blank" rel="noopener">Python if 语句</a></p><p><a href="https://www.runoob.com/python3/python3-check-string.html" target="_blank" rel="noopener">Python 字符串判断</a><br><a href="https://www.runoob.com/python3/python-string-length.html" target="_blank" rel="noopener">Python 判断字符串长度</a><br><a href="https://www.runoob.com/python3/python3-check-is-number.html" target="_blank" rel="noopener">Python 判断字符串是否为数字</a><br><a href="https://www.runoob.com/python3/pyhton-remove-ith-character-from-string.html" target="_blank" rel="noopener">Python 移除字符串中的指定位置字符</a><br><a href="https://www.runoob.com/python3/python-check-substring-present-given-string.html" target="_blank" rel="noopener">Python 判断字符串是否存在子字符串</a><br><a href="https://www.runoob.com/python3/python3-upper-lower.html" target="_blank" rel="noopener">Python 字符串大小写转换</a><br><a href="https://www.runoob.com/python3/python-str-timestamp.html" target="_blank" rel="noopener">Python 将字符串的时间转换为时间戳</a><br><a href="https://www.runoob.com/python3/python-find-url-string.html" target="_blank" rel="noopener">Python 使用正则表达式提取字符串中的 URL</a><br><a href="https://www.runoob.com/python3/python-execute-string-code.html" target="_blank" rel="noopener">Python 将字符串作为代码执行</a><br><a href="https://www.runoob.com/python3/python-string-reverse.html" target="_blank" rel="noopener">Python 字符串翻转</a><br><a href="https://www.runoob.com/python3/python-slicing-rotate-string.html" target="_blank" rel="noopener">Python 对字符串切片及翻转</a></p><p><a href="https://www.runoob.com/python3/python-sum-dictionary.html" target="_blank" rel="noopener">Python 计算字典值之和</a><br><a href="https://www.runoob.com/python3/python-remove-a-key-from-dictionary.html" target="_blank" rel="noopener">Python 移除字典点键值(key/value)对</a><br><a href="https://www.runoob.com/python3/python-merging-two-dictionaries.html" target="_blank" rel="noopener">Python 合并字典</a></p><p><a href="https://www.runoob.com/python3/python-check-element-exists-in-list.html" target="_blank" rel="noopener">Python 判断元素是否在列表中存在</a><br><a href="https://www.runoob.com/python3/python-list-interchange.html" target="_blank" rel="noopener">Python 将列表中的头尾两个元素对调</a><br><a href="https://www.runoob.com/python3/python3-list-swap-two-elements.html" target="_blank" rel="noopener">Python 将列表中的指定位置的两个元素对调</a><br><a href="https://www.runoob.com/python3/python-clear-list.html" target="_blank" rel="noopener">Python 清空列表</a><br><a href="https://www.runoob.com/python3/python-copy-list.html" target="_blank" rel="noopener">Python 复制列表</a><br><a href="https://www.runoob.com/python3/python-reversing-list.html" target="_blank" rel="noopener">Python 翻转列表</a><br><a href="https://www.runoob.com/python3/python-count-occurrences-element-list.html" target="_blank" rel="noopener">Python 计算元素在列表中出现的次数</a><br><a href="https://www.runoob.com/python3/python-sum-list.html" target="_blank" rel="noopener">Python 计算列表元素之和</a><br><a href="https://www.runoob.com/python3/python-multiply-list.html" target="_blank" rel="noopener">Python 计算列表元素之积</a><br><a href="https://www.runoob.com/python3/python-min-list-element.html" target="_blank" rel="noopener">Python 查找列表中最小元素</a><br><a href="https://www.runoob.com/python3/python-max-list-element.html" target="_blank" rel="noopener">Python 查找列表中最大元素</a><br><a href="https://www.runoob.com/python3/python3-list-operator.html" target="_blank" rel="noopener">Python list 常用操作</a></p><p><a href="https://www.runoob.com/python3/python3-sum-array.html" target="_blank" rel="noopener">Python 计算数组元素之和</a><br><a href="https://www.runoob.com/python3/python3-array-rotation.html" target="_blank" rel="noopener">Python 数组翻转指定个数的元素</a></p><p><a href="https://www.runoob.com/python3/python3-leap-year.html" target="_blank" rel="noopener">Python 判断闰年</a><br><a href="https://www.runoob.com/python3/python3-calendar.html" target="_blank" rel="noopener">Python 生成日历</a><br><a href="https://www.runoob.com/python3/python3-get-yesterday.html" target="_blank" rel="noopener">Python 获取昨天日期</a><br><a href="https://www.runoob.com/python3/python-get-dayago.html" target="_blank" rel="noopener">Python 获取几天前的时间</a><br><a href="https://www.runoob.com/python3/python3-month-days.html" target="_blank" rel="noopener">Python 计算每个月天数</a><br><a href="https://www.runoob.com/python3/python-timstamp-str.html" target="_blank" rel="noopener">Python 将时间戳转换为指定格式日期</a></p><p><a href="https://www.runoob.com/python3/python-sort-dictionaries-by-key-or-value.html" target="_blank" rel="noopener">Python 按键(key)或值(value)对字典进行排序</a><br><a href="https://www.runoob.com/python3/python-insertion-sort.html" target="_blank" rel="noopener">Python 插入排序</a><br><a href="https://www.runoob.com/python3/python-quicksort.html" target="_blank" rel="noopener">Python 快速排序</a><br><a href="https://www.runoob.com/python3/python-selection-sort.html" target="_blank" rel="noopener">Python 选择排序</a><br><a href="https://www.runoob.com/python3/python-bubble-sort.html" target="_blank" rel="noopener">Python 冒泡排序</a><br><a href="https://www.runoob.com/python3/python-merge-sort.html" target="_blank" rel="noopener">Python 归并排序</a><br><a href="https://www.runoob.com/python3/python-heap-sort.html" target="_blank" rel="noopener">Python 堆排序</a><br><a href="https://www.runoob.com/python3/python-counting-sort.html" target="_blank" rel="noopener">Python 计数排序</a><br><a href="https://www.runoob.com/python3/python-shellsort.html" target="_blank" rel="noopener">Python 希尔排序</a><br><a href="https://www.runoob.com/python3/python-topological-sorting.html" target="_blank" rel="noopener">Python 拓扑排序</a></p><p><a href="https://www.runoob.com/python3/python-binary-search.html" target="_blank" rel="noopener">Python 二分查找</a><br><a href="https://www.runoob.com/python3/python-linear-search.html" target="_blank" rel="noopener">Python 线性查找</a></p><p><a href="https://www.runoob.com/python3/python3-99-table.html" target="_blank" rel="noopener">Python 九九乘法表</a><br><a href="https://www.runoob.com/python3/python3-square-root.html" title="python Hello World 实例" target="_blank" rel="noopener">Python 平方根</a><br><a href="https://www.runoob.com/python3/python3-quadratic-roots.html" target="_blank" rel="noopener">Python 二次方程</a><br><a href="https://www.runoob.com/python3/python3-factorial.html" target="_blank" rel="noopener">Python 阶乘实例</a></p><p><a href="https://www.runoob.com/python3/python3-largest-number.html" target="_blank" rel="noopener">Python 获取最大值函数</a><br><a href="https://www.runoob.com/python3/python3-hcf.html" target="_blank" rel="noopener">Python 最大公约数算法</a><br><a href="https://www.runoob.com/python3/python3-lcm.html" target="_blank" rel="noopener">Python 最小公倍数算法</a><br><a href="https://www.runoob.com/python3/python3-add-number.html" title="python Hello World 实例" target="_blank" rel="noopener">Python 数字求和</a><br><a href="https://www.runoob.com/python3/python3-fibonacci-sequence.html" target="_blank" rel="noopener">Python 斐波那契数列</a><br><a href="https://www.runoob.com/python3/python3-fibonacci-recursion.html" target="_blank" rel="noopener">Python 使用递归斐波那契数列</a><br><a href="https://www.runoob.com/python3/python3-prime-number.html" target="_blank" rel="noopener">Python 质数判断</a><br><a href="https://www.runoob.com/python3/python3-prime-number-intervals.html" target="_blank" rel="noopener">Python 输出指定范围内的素数</a><br><a href="https://www.runoob.com/python3/python3-odd-even.html" target="_blank" rel="noopener">Python 判断奇数偶数</a><br><a href="https://www.runoob.com/python3/python3-random-number.html" target="_blank" rel="noopener">Python 随机数生成</a><br><a href="https://www.runoob.com/python3/python3-armstrong-number.html" target="_blank" rel="noopener">Python 阿姆斯特朗数</a><br><a href="https://www.runoob.com/python3/python-cube-sum.html" target="_blank" rel="noopener">Python 计算 n 个自然数的立方和</a></p><p><a href="https://www.runoob.com/python3/python3-calculator.html" target="_blank" rel="noopener">Python 简单计算器实现</a><br><a href="https://www.runoob.com/python3/python3-area-of-a-circle.html" target="_blank" rel="noopener">Python 计算圆的面积</a><br><a href="https://www.runoob.com/python3/python3-area-triangle.html" target="_blank" rel="noopener">Python 计算三角形的面积</a></p><p><a href="https://www.runoob.com/python3/python3-celsius-fahrenheit.html" target="_blank" rel="noopener">Python 摄氏温度转华氏温度</a><br><a href="https://www.runoob.com/python3/python3-conversion-binary-octal-hexadecimal.html" target="_blank" rel="noopener">Python 十进制转二进制、八进制、十六进制</a><br><a href="https://www.runoob.com/python3/python3-ascii-character.html" target="_blank" rel="noopener">Python ASCII码与字符相互转换</a><br><a href="https://www.runoob.com/python3/python3-swap-variables.html" target="_blank" rel="noopener">Python 交换变量</a></p><p><a href="https://www.runoob.com/python3/python3-file-io.html" target="_blank" rel="noopener">Python 文件 IO</a><br><a href="https://www.runoob.com/python3/python-joseph-life-dead-game.html" target="_blank" rel="noopener">Python 约瑟夫生者死者小游戏</a><br><a href="https://www.runoob.com/python3/python-five-fish.html" target="_blank" rel="noopener">Python 五人分鱼</a><br><a href="https://www.runoob.com/python3/python-simplestopwatch.html" target="_blank" rel="noopener">Python 实现秒表功能</a><br><a href="https://www.runoob.com/python3/python-your-font.html" target="_blank" rel="noopener">Python 打印自己设计的字体</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>计算机组成原理笔记<br><a id="more"></a></p><h2 id="0-1-计算机系统的层次结构"><a href="#0-1-计算机系统的层次结构" class="headerlink" title="0.1. 计算机系统的层次结构"></a>0.1. 计算机系统的层次结构</h2><p>应用软件、系统软件、硬件构成了计算机系统的三个层次结构。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">软件  </span><br><span class="line">    系统软件  </span><br><span class="line">        操作系统  </span><br><span class="line">        语言处理程序  </span><br><span class="line">        标准库程序  </span><br><span class="line">        服务性程序  </span><br><span class="line">        数据库管理系统  </span><br><span class="line">        计算机网络软件  </span><br><span class="line">    应用软件  </span><br><span class="line">硬件  </span><br><span class="line">    CPU（运算器、控制器、Cache）  </span><br><span class="line">        运算器是处理数据的：数据加工。主要功能  </span><br><span class="line">            算术运算，逻辑运算  </span><br><span class="line">                所有的运算功能由一个被称为ALU（算术逻辑单元）的电路完成  </span><br><span class="line">                功能强的ALU还能执行：定点运算、浮点运算，向量运算  </span><br><span class="line">            暂放参加运算的数据和中间结果。（由多个通用寄存器来完成）  </span><br><span class="line">        控制器是执行程序的  </span><br><span class="line">            按规定管理 指挥（人的大脑）。处理指令的  </span><br><span class="line">            功能：  </span><br><span class="line">                正确执行每条指令（单个指令）： 取⇒分析⇒执行 </span><br><span class="line">                保证指令按规定序列自动连续执行（多个指令）  </span><br><span class="line">                对异常情况和请求及时响应和处理  </span><br><span class="line">        存储器是存储数据和程序的  </span><br><span class="line">            三级存储系统  </span><br><span class="line">                高速缓冲存储器  </span><br><span class="line">                主存储器  </span><br><span class="line">                辅助存储器  </span><br><span class="line">    存储系统（高速缓存、主存储器、外存设备）  </span><br><span class="line">    输入/ 输出设备等主要组成部分  </span><br><span class="line">    系统总线</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系统软件管理应用软件，直接管理硬件资源</span><br><span class="line">TODO:它们[?谁]总是通过总线和接口连接在一起，构成一台完整的计算机  </span><br><span class="line">这三级存储器存储介质（半导体材料，磁性材料），工作原理和特性各不相同</span><br></pre></td></tr></table></figure><p>计算机硬件的三个主要性能指标<br><img src="https://img-blog.csdnimg.cn/20190129125335992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br>借助系统总线的连接，计算机在各系统部件之间实现【地址信号、数据信号、控制信号】的传送<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">机器字长：CPU一次能处理数据的位数，通常与CPU的寄存器位数有关  </span><br><span class="line">指令字长：机器指令中二进制代码的总位数  </span><br><span class="line">存储字长：一个存储单元能存放的二进制数字位数</span><br></pre></td></tr></table></figure></p><h2 id="0-2-计算机发展简史"><a href="#0-2-计算机发展简史" class="headerlink" title="0.2. 计算机发展简史"></a>0.2. 计算机发展简史</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">冯.诺依曼体制特点：  </span><br><span class="line">    【二进制】表示指令和数据  </span><br><span class="line">    【存储程序】概念。（计算机不仅可以存储数据也可以存储程序）  </span><br><span class="line">    计算机系统由【运算器、控制器、存储器、输入设备、输出设备】五大部件组成  </span><br><span class="line">    运算器为核心  </span><br><span class="line">    指令由操作码和地址码组成  </span><br><span class="line">        指令在计算机中是顺序执行的，并受控制器的统一控制</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">现在的计算机结构（冯.诺依曼结构）  </span><br><span class="line">    不改变的：存储程序（冯.诺依曼思想精华）  </span><br><span class="line">        典型【冯.诺依曼】计算机结构以【运算器】为中心  </span><br><span class="line">    改变的是：以【存储器】为中心，总线结构，分散控制</span><br></pre></td></tr></table></figure><p>电子管计算机⇒晶体管计算机⇒中小规模集成电路计算机⇒超大规模集成电路计算机  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">计算机中【控制单元】负责指令译码。（控制器）  </span><br><span class="line">存储字是指存放在一个存储单元中的二进制【代码组合】  </span><br><span class="line">把汇编程序变成机器语言程序的过程是汇编（编译、编辑、链接）  </span><br><span class="line">计算机系统中算术逻辑单元和控制单元合称为【CPU】  </span><br><span class="line">存取速度：寄存器&gt;cache&gt;内存&gt;外存  </span><br><span class="line">【兼容】是指计算机软件或硬件的通用性</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_41523096/article/details/86688528" target="_blank" rel="noopener">https://blog.csdn.net/qq_41523096/article/details/86688528</a>  </p><h2 id="0-3-系统总线"><a href="#0-3-系统总线" class="headerlink" title="0.3. 系统总线"></a>0.3. 系统总线</h2><h3 id="0-3-1-概念"><a href="#0-3-1-概念" class="headerlink" title="0.3.1. 概念"></a>0.3.1. 概念</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">总线不仅是指一组传输线，还包括相应的总线接口和总线控制器  </span><br><span class="line">    分时共享是总线的主要特征  </span><br><span class="line">        共享：是指总线所连接的各部件都通过共享它传递信号  </span><br><span class="line">        分时：是指在某一时刻只允许有一个部件将信号发送上总线</span><br></pre></td></tr></table></figure><p>总线所连的各个部件都应有三态门电路，这是最基本的总线接口逻辑电路<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">总线的基本结构  </span><br><span class="line">    一组传输线总线接口(三态门)  </span><br><span class="line">    总线接口寄存器(缓冲作用)  </span><br><span class="line">    总线控制器(维护总线协议)</span><br></pre></td></tr></table></figure></p><h3 id="0-3-2-分类"><a href="#0-3-2-分类" class="headerlink" title="0.3.2. 分类"></a>0.3.2. 分类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">系统总线包括：数据总线、地址总线、控制总线和电源线  </span><br><span class="line">单向总线：地址总线  </span><br><span class="line">双向总线：数据总线、控制总线  </span><br><span class="line">都是并行总线</span><br></pre></td></tr></table></figure><h3 id="0-3-3-结构"><a href="#0-3-3-结构" class="headerlink" title="0.3.3. 结构"></a>0.3.3. 结构</h3><p>以存储器为中心的双总线结构（当前广泛使用），减轻了系统总线的负担<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">大多数计算机采用了分层次的多总线结构  </span><br><span class="line">    速度差异较大的设备分享不同速度的总线，  </span><br><span class="line">    速度相近的设备共享同一速度总线</span><br></pre></td></tr></table></figure></p><h3 id="0-3-4-控制"><a href="#0-3-4-控制" class="headerlink" title="0.3.4. 控制"></a>0.3.4. 控制</h3><p>总线的控制主要解决通信双方如何获知数据传输开始和传输结束，以及通信双方如何协调配合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">线传输周期（总线周期）  </span><br><span class="line">    一次总线操作所需要的时间。（分四个阶段：申请、寻址、传输、结束）  </span><br><span class="line">        申请分配阶段:主设备提出申请,总线仲裁机构决定授予总线使用权  </span><br><span class="line">        寻址阶段:主设备取得了总线使用权后,通过总线发出访问从设备的存储地址或设备地址及有关命令,启动传输  </span><br><span class="line">        传输阶段:主设备和从设备之间进行数据交换  </span><br><span class="line">        结束阶段:主设备从系统总线上撤出,并让出总线使用权</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">同步通信:  </span><br><span class="line">    设置统一的时钟信号,数据传送时,收发双方严格遵循这个时钟信号。(和最慢的部件同步!!)  </span><br><span class="line">    应用范围:总线上各部件间工作速度差异较小,其控制较简单,但时间利用率可能不高  </span><br><span class="line">异步通信:  </span><br><span class="line">    没有统一的时钟信号,数据传送时,采用应答方式工作  </span><br><span class="line">    应用范围:总线上各部件工作速度差异较大,传输时间可根据需要而定,时间利用率高,控制复杂  </span><br><span class="line">    异步分为:不互锁、半互锁、全互锁  </span><br><span class="line">半同步通信:  </span><br><span class="line">    将同步与异步相结合。既有公共时钟控制又允许不同速度部件谐和工作(插入等待周期。)  </span><br><span class="line">分离式通信:  </span><br><span class="line">    充分挖掘系统总线每个瞬间的潜力  </span><br><span class="line">    将一个总线传输周期分成两个子周期分给主从部件</span><br></pre></td></tr></table></figure><h3 id="0-3-5-仲裁"><a href="#0-3-5-仲裁" class="headerlink" title="0.3.5. 仲裁"></a>0.3.5. 仲裁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">连接到总线上的功能部件有主和从两种形态  </span><br><span class="line">    如:CPU在不同的时间可以主动,也可以被动,但是存储器只能被动  </span><br><span class="line">    【主设备】可以启动一个总线周期,【从设备】只能响应主部件的请求  </span><br><span class="line">每次总线操作,只能有一个【主设备】占用【总线控制权】,但同一时间里可以有一个或多个从设备  </span><br><span class="line">为了解决多个主设备同时竞争总线控制权,必须具有【总线仲裁部件】,以某种方式选择其中一个主设备作为总线的下一次主方  </span><br><span class="line">对多个主设备提出的总线请求,一般采用【优先级】或【公平】策略进行仲裁  </span><br><span class="line">除CPU外,输入输出设备也可以提出总线请求  </span><br><span class="line">对输入输出设备的总线请求采用【优先级】策略。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">按照总线仲裁【电路的位置】不同,仲裁分为集中式和分布式仲裁两类。  </span><br><span class="line">    集中式仲裁总线控制:总线控制逻辑电路基本集中在一起  </span><br><span class="line">    分布式仲裁总线控制:总线控制逻辑基本分散在总线各个部件中</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">集中式仲裁  </span><br><span class="line">    集中式仲裁中每个总线上的部件有两条线连仲裁器  </span><br><span class="line">        一条是送往仲裁器的总线请求信号线BR  </span><br><span class="line">        一条是仲裁器送出的总线授权信号线BG。  </span><br><span class="line">        (1)链式查询方式  </span><br><span class="line">            离仲裁器最近的设备具有最高优先级，通过接口的优先级排队电路来实现。  </span><br><span class="line">        (2)计数器定时查询方式  </span><br><span class="line">        (3)独立请求方式</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_41523096/article/details/86688682" target="_blank" rel="noopener">https://blog.csdn.net/qq_41523096/article/details/86688682</a>  </p><h2 id="0-4-存储器"><a href="#0-4-存储器" class="headerlink" title="0.4. 存储器"></a>0.4. 存储器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">内存  </span><br><span class="line">    在计算机中，存储正在运行的（部分）程序和数据的部件。  </span><br><span class="line">    通过地址总线、数据总线、控制总线与CPU等其他部件相连  </span><br><span class="line">    内存功能：存放程序和数据部件，并满足在计算机执行的过程中，能够随机访问这些程序和数据  </span><br><span class="line">        ①存（存放）  </span><br><span class="line">        ②取（访问）</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190129131830719.png" alt="访问">  </p><h3 id="0-4-1-存储器基本结构"><a href="#0-4-1-存储器基本结构" class="headerlink" title="0.4.1. 存储器基本结构"></a>0.4.1. 存储器基本结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">存储体  </span><br><span class="line">地址寄存器  </span><br><span class="line">地址译码器  </span><br><span class="line">数据缓冲寄存器  </span><br><span class="line">读写控制线路  </span><br><span class="line">先送地址后读写数据</span><br></pre></td></tr></table></figure><h3 id="0-4-2-存储器的分类"><a href="#0-4-2-存储器的分类" class="headerlink" title="0.4.2. 存储器的分类"></a>0.4.2. 存储器的分类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个触发器能存储一位二进制代码。  </span><br><span class="line">一个触发器电路称为一个存储元（存储位），是存储器中的最小单位。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">随机读写存储器(RAM)：在程序执行过程中可读可写。  </span><br><span class="line">    静态的和动态的RAM  </span><br><span class="line">        SRAM 静态   作为cache  </span><br><span class="line">        DRAM 动态   做内存  (因为需要刷新）  </span><br><span class="line">只读存储器(ROM)：在程序执行过程中只读。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">存储器的层次结构（三级存储系统）：由系统统一调度、统一管理。  </span><br><span class="line">    高速缓冲存储器（Cache）  </span><br><span class="line">        高速缓冲存储器也有两神:  </span><br><span class="line">            一是在CPU内(一级 CACHE、二级 CACHE)。CPU通过内部总线对其进行读/写操作  </span><br><span class="line">            一是在CPU外(主板上)。CPU通过存储器总线对其进行读/写操作  </span><br><span class="line">    主存储器（内存，Main memory）  </span><br><span class="line">        围绕主存储器（内存）来组织和运行的。  </span><br><span class="line">        SRAM存储器： 存取速度快、集成度低、位平均功耗高，小容量主存。  </span><br><span class="line">        DRAM存储器： 存取速度慢、集成度高、位平均功耗低，大容量主存。（定时通电刷新）  </span><br><span class="line">        性能指标：存储容量、存取时间、存储周期、存储器带宽。  </span><br><span class="line">    辅助存储器（外存)  </span><br><span class="line">三个要点：  速度 容量 费用  </span><br><span class="line">离CPU越近的速度越快，越远容量越大  </span><br><span class="line">多级存储系统可以实现的前提: 程序运行时的局部性。</span><br></pre></td></tr></table></figure><p>主存储器性能指标<br><img src="https://img-blog.csdnimg.cn/20190129131940908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt="主存储器性能指标">  </p><p>CPU不能直接访问辅助存储器（外存），程序与数据从辅助存储器调入内存后，再从内存调入CACHE， CPU访问CACHE，读写程序和数据。  </p><h3 id="0-4-3-存储单元（地址译码）"><a href="#0-4-3-存储单元（地址译码）" class="headerlink" title="0.4.3. 存储单元（地址译码）"></a>0.4.3. 存储单元（地址译码）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">通过地址译码寻找存储单元，需要有译码器  </span><br><span class="line">    地址译码器：把地址信号翻译成，对应存储单元的选择信号。  </span><br><span class="line">        单译码器。  </span><br><span class="line">        双译码器。  </span><br><span class="line">    双译码比单译码使用的选择线少，可以减少芯片的引脚</span><br></pre></td></tr></table></figure><h3 id="0-4-4-存储器（芯片封装）"><a href="#0-4-4-存储器（芯片封装）" class="headerlink" title="0.4.4. 存储器（芯片封装）"></a>0.4.4. 存储器（芯片封装）</h3><p><img src="https://img-blog.csdnimg.cn/20190129131953985.png" alt="芯片及其引脚"><br>要会画芯片的封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址线，数据线（i/o），读写信号线(WE)，片选信号线（CS)</span><br></pre></td></tr></table></figure></p><h2 id="0-5-主存储器"><a href="#0-5-主存储器" class="headerlink" title="0.5. 主存储器"></a>0.5. 主存储器</h2><p><img src="https://img-blog.csdnimg.cn/20190129132052751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="0-5-1-主存储器扩展"><a href="#0-5-1-主存储器扩展" class="headerlink" title="0.5.1. 主存储器扩展"></a>0.5.1. 主存储器扩展</h3><p>内存条是由多个存储芯片扩展而成。扩展后需要选芯片。扩展方法选择标准：片选信号越少越好<br>位扩展（数据线扩充）<br><img src="https://img-blog.csdnimg.cn/20190129132000747.png" alt=""><br>字扩展（地址线扩充）<br><img src="https://img-blog.csdnimg.cn/20190129132003737.png" alt=""><br>位字扩展（先位后字）<br><img src="https://img-blog.csdnimg.cn/20190129132007175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt="">  </p><p>存储芯片无论位扩展还是字扩展,各芯片的片内地址线条条相并联。<br>即所有A<sub>0</sub>连在一起,所有A<sub>1</sub>连在一起,所有A<sub>2</sub>连在一起为什么?<br>各片內的存储单元地址相同,解决了地址线的扩充问题  </p><h3 id="0-5-2-主存储器与CPU的连接"><a href="#0-5-2-主存储器与CPU的连接" class="headerlink" title="0.5.2. 主存储器与CPU的连接"></a>0.5.2. 主存储器与CPU的连接</h3><p>CPU对內存进行读写操作时,要给出<strong>内存单元的地址信号</strong>,给出<strong>对内存单元进行操作的读写控制信号</strong>,然后通过<strong>数据总线</strong>传输数据<strong>信号</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">连接方法</span><br><span class="line">    CPU的地址总线:连接内存全部地址信号线;</span><br><span class="line">    CPU的控制总线:连接内存的读/写控制信号线;</span><br><span class="line">    CPU的数据总线:连接内存的数据线。</span><br><span class="line">1)各扩展芯片的片内地址线、数据线、控制信号线:条条并连。</span><br><span class="line">2)扩展后的产生的高位地址线:经译码,产生片选信号。</span><br></pre></td></tr></table></figure></p><p>TODO:译码器的输出端和片选信号怎么连<br>存储器与CPU链接举例：<br><img src="https://img-blog.csdnimg.cn/20190129132023532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="0-5-3-主存读写周期与CPU的配合"><a href="#0-5-3-主存读写周期与CPU的配合" class="headerlink" title="0.5.3. 主存读写周期与CPU的配合"></a>0.5.3. 主存读写周期与CPU的配合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在读过程中，地址信号不能变  </span><br><span class="line">在写过程中，地址信号、数据信号都不能变</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190129132028273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="0-5-4-主存储器的刷新"><a href="#0-5-4-主存储器的刷新" class="headerlink" title="0.5.4. 主存储器的刷新"></a>0.5.4. 主存储器的刷新</h3><p><strong>刷新周期</strong>，DRAM 所有存储单元都被刷新一次的时间。一般为2ms。<br>整个主存中，各芯片可同时刷新，芯片内逐行刷新，每次刷新一行。<br>几种刷新方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1）集中式刷新  </span><br><span class="line">    在2ms内按存储容量集中安排刷新时间（刷新期间停止读/写操作）  </span><br><span class="line">2）分散式刷新  </span><br><span class="line">    把存取周期分成两部分。一半读写一半刷新，一个周期刷一行。  </span><br><span class="line">    （如果CPU存取周期是主存存取周期的二倍，使用此方法好）  </span><br><span class="line">3）异步式刷新  </span><br><span class="line">    在2ms内，分散式地对128行逐行刷新一遍，每一行平均刷新的时间  </span><br><span class="line">    间隔为 2ms / 128 = 15.625us，即每隔15.6us提出一次刷新请求。  </span><br><span class="line">    这样，每行之间的刷新间隔仍为2ms。  </span><br><span class="line">    相对于分散式刷新，它减少了刷新次数；  </span><br><span class="line">    相对于集中式刷新，它的主机“死区”缩短了很多</span><br></pre></td></tr></table></figure></p><h3 id="0-5-5-主存储器的性能提高"><a href="#0-5-5-主存储器的性能提高" class="headerlink" title="0.5.5. 主存储器的性能提高"></a>0.5.5. 主存储器的性能提高</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">提高主存制造技术</span><br><span class="line">改进存储器结构</span><br><span class="line">    单体多字存储器</span><br><span class="line">    单体双端口存储器</span><br><span class="line">    多体交叉存储器(重点)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190129132045605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190129132048570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="0-6-高速缓冲存储器（Cache）"><a href="#0-6-高速缓冲存储器（Cache）" class="headerlink" title="0.6. 高速缓冲存储器（Cache）"></a>0.6. 高速缓冲存储器（Cache）</h2><p>为了弥补主存速度的不足<br><img src="https://img-blog.csdnimg.cn/20190129132113473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190129132116823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><code>系统效率 = (Cache存取时间/平均存取时间)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cache 的全部功能都是由硬件完成的</span><br><span class="line">    内存地址 转  Cache地址)  </span><br><span class="line">    先有内存的地址，然后再有cache的地址</span><br></pre></td></tr></table></figure></p><h2 id="地址映象"><a href="#地址映象" class="headerlink" title="地址映象"></a>地址映象</h2><p>Cache与主存中存储单元地址映象关系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">映象</span><br><span class="line">    物理意义:位置的对应关系</span><br><span class="line">    将主存地址变成Cache地址。</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/2019012913212414.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">直接映象  </span><br><span class="line">    方式：多对一映射 </span><br><span class="line">    主存中的一块只能映象到Cache某一个固定的块中  </span><br><span class="line">    特点：Cache的利用率不高  </span><br><span class="line">全相联映象  </span><br><span class="line">    主存中任一块都可以映象到Cache中任一块上。  </span><br><span class="line">    必须采用相联存储器</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20190129132132851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br>TODO:内存地址如何换成cache地址 4-04  </p><h2 id="替换算法"><a href="#替换算法" class="headerlink" title="替换算法"></a>替换算法</h2><p>当未命中而将新的主存块调入Cache中，而它的位置已被占满，就会产生替换问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">替换算法目的：获得最高命中率  </span><br><span class="line">    先进先出算法 FIFO  </span><br><span class="line">    最近最少使用算法 LRU  </span><br><span class="line">平均命中率  LRU&gt;FIFO </span><br><span class="line">LRU替换算法反映了程序的局部性特点</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 计算机组成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理_输入输出系统</title>
      <link href="/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>参考来源：<a href="https://blog.csdn.net/qq_41523096/article/details/86517201" target="_blank" rel="noopener">https://blog.csdn.net/qq_41523096/article/details/86517201</a></p><h2 id="0-1-I-O设备与接口"><a href="#0-1-I-O设备与接口" class="headerlink" title="0.1. I/O设备与接口"></a>0.1. I/O设备与接口</h2><p><img src="https://img-blog.csdnimg.cn/20190117202932870.png" alt=""></p><p><strong>接口</strong>   例如：声卡、显卡、网卡</p><p><img src="https://img-blog.csdnimg.cn/20190117203057299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20190117203620766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="0-2-I-O设备与CPU传送数据的控制方式"><a href="#0-2-I-O设备与CPU传送数据的控制方式" class="headerlink" title="0.2. I/O设备与CPU传送数据的控制方式"></a>0.2. I/O设备与CPU传送数据的控制方式</h2><p><img src="https://img-blog.csdnimg.cn/20190117204440307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""> </p><p><img src="https://img-blog.csdnimg.cn/20190117204528185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20190117203324114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20190117203907256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20190117205100932.png" alt=""></p><h2 id="0-3-程序查询方式（很少被使用）-串行执行"><a href="#0-3-程序查询方式（很少被使用）-串行执行" class="headerlink" title="0.3. 程序查询方式（很少被使用） 串行执行"></a>0.3. 程序查询方式（很少被使用） <span style="color:#f33b45;">串行执行</span></h2><p><img src="https://img-blog.csdnimg.cn/2019011720524851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190117205955749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""> </p><p><img src="https://img-blog.csdnimg.cn/2019011721012623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="0-4-程序中断方式（-CPU与慢速外设之间的传输）并行执行"><a href="#0-4-程序中断方式（-CPU与慢速外设之间的传输）并行执行" class="headerlink" title="0.4. 程序中断方式（ * CPU与慢速外设之间的传输）并行执行"></a>0.4. 程序中断方式（ * CPU与慢速外设之间的传输）<span style="color:#f33b45;">并行执行</span></h2><p><img src="https://img-blog.csdnimg.cn/20190117210402366.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20190117210514267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20190117210633454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20190117210801539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""> </p><p><img src="https://img-blog.csdnimg.cn/20190117211031350.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20190117211245867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190117211455780.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20190117211544222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190117214323296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190117214407398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190117214853990.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20190117231647688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="0-5-DMA方式-（-存储器与快速外设与之间的传输）-CPU和外设并行工作"><a href="#0-5-DMA方式-（-存储器与快速外设与之间的传输）-CPU和外设并行工作" class="headerlink" title="0.5. DMA方式 （ * 存储器与快速外设与之间的传输）   CPU和外设并行工作"></a>0.5. DMA方式 （ * 存储器与快速外设与之间的传输）   CPU和外设并行工作</h2><p><img src="https://img-blog.csdnimg.cn/20190117232616609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190117234523132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190117234630242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190117234744807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190118000614143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190118000723558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190118001122140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190118001241923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190118001328993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190118001632839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190118001618447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190118001745380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="0-6-通道方式（大中型计算机）"><a href="#0-6-通道方式（大中型计算机）" class="headerlink" title="0.6. 通道方式（大中型计算机）"></a>0.6. 通道方式（大中型计算机）</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 计算机组成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命名规范</title>
      <link href="/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p>print_employee_paychecks 下划线命名法<br>printEmployeePaychecks 驼峰命名法<br>PrintEmployeePaychecks 帕斯卡命名法<br>iPrintEmployeePaychecks 匈牙利命名法<br><a id="more"></a></p><h2 id="一般规定"><a href="#一般规定" class="headerlink" title="一般规定"></a>一般规定</h2><p>动宾格式（变量类型+变量信息）。【动词+名词】或【形容词+名词】<br>意思明确。尽量简短。<br>不要出现名字完全相同的局部变量和全局变量。<br>禁止取单个字符作为变量名。尽量避免名字中出现数字编号，除非逻辑上的确需要编号，因为数字并传达不了有用信息。<br>在源文件的开始之处，对文件中所使用的缩写或约定，特别是特殊的缩写，进行必要的注释说明。<br>除了编译开关/ 头文件等特殊应用，应避免使用_EXAMPLE_TEST_ 之类以下划线开始和结尾的定义。<br>命名风格保持一致。描述性以及唯一性这两大特征来命名，保证资源不冲突，便于记忆<br>文件中<br>变量、函数都按照相同的原则命名<br>子模块或派生类要遵循其基类或整体模块的<br>常用命名法<br>逻辑断点<br>变量名是大小写英文、数字、“$”和“_”的组合，且不能用数字开头。<br>变量名也不能是语言的关键字，如if、while等。</p><h2 id="有效参考"><a href="#有效参考" class="headerlink" title="有效参考"></a>有效参考</h2><p>一些单词有大家公认的缩写。temp-&gt;tmp、flag-&gt;flg、statistic-&gt;stat、increment-&gt;inc、message-&gt;msg<br>cut、paste<br>create、destroy|add、remove|add、delete|insert、delete<br>begin、end|start、stop|open、close|lock、unlock|show、hide| get、release|put、get<br>send、receive<br>first、last、next、previous<br>min、max|<br>old、new|<br>increment、decrement|up、down<br>source、target|source、destination<br>int min_sum;<br>int max_sum;<br>int add_user( BYTE <em>user_name );<br>int delete_user( BYTE </em>user_name );<br>nMinValue<br>nMaxValue<br>GetName()<br>SetName()</p><h2 id="语言规定"><a href="#语言规定" class="headerlink" title="语言规定"></a>语言规定</h2><p>C++命名要采用匈牙利命名法<br>很多程序设计者在实际命名时会将驼峰命名法和帕斯卡结合使用，例如变量名采用驼峰命名法，而函数采用帕斯卡命名法。<br>在C#中，以帕斯卡命名法和骆驼命名法居多。<br>下划线：C语言、UNIX/LIUNX、GNU代码中使用非常普遍。<br>规划好接口部分标识符(变量、结构、函数及常量)的命名，防止编译、链接时产生冲突。可规定接口部分的变量与常量之前加上“模块”标识等。<br>较短的单词可通过去掉元音形成缩写<br>较长的单词可取单词的头几个字母形成缩写</p><h2 id="匈牙利法"><a href="#匈牙利法" class="headerlink" title="匈牙利法"></a>匈牙利法</h2><p>前缀+单词。前缀反应变量的作用域（属性），类型。单词指明变量的用途（对象描述）。例如：bEnable, nLength, hWnd。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>先m_（成员变 量），再指针，再简单数据类型，再其他。m_lpszStr, 表示指向一个以0字符结尾的字符串的长指针成员变量<br>a。Array。数组<br>b。BOOL。布尔。bFlg<br>by。BYTE。无符号字符<br>c。char。字符<br>C。类。CDocument, CPrintInfo<br>cb。Count of bytes。字节数<br>cr。Color reference value。颜色值<br>cx,cy。Count of x,y(short)。长度<br>dw。DWORD。双字(无符号长整形)<br>f。Flags。标志<br>fn。Function。函数<br>g_。Global。全局的，全局变量g_Servers<br>h。HANDLE。句柄<br>i。Integer(int)。整数<br>l。Long(long)。长整数<br>lp。Long point。长指针<br>m_。Data member of a class。类的数据成员，成员变量。m_pDoc, m_nCustomers<br>n。Short(short)。短整型<br>np。Near point。短指针<br>p。Point。指针<br>s。String。字符串<br>sz。Zero terminated string。以0结尾的字符串<br>tm。Text metric。文本规则<br>u。Unsigned int。无符号整数<br>ul。Unsigned long(ULONG)。无符号长整数<br>w。WORD。无符号短整数<br>x,y。coordinates(short)。坐标<br>v。Void。空<br>数据类型/对象类型 / 变量前缀 / 备注<br>byte bye<br>char chr<br>float flt<br>boolean bln 做布尔变量时，使用bln<br>Integer/int int<br>String str<br>Single sng<br>short sht<br>Long/long lng<br>Double/double dbl<br>Currency cur<br>Variant<br>做布尔变量用时，用bln，<br>做字符串数组用时，用astr，<br>做为对象使用时，用obj，<br>不确定时，用vnt。<br>a，数组。astr为字符串数组。  </p><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>常量。全部大写，下划线逻辑断点。MAX_VALUE<br>接口。加前缀“I”。IRunnable、ISingleton。<br>类。大驼峰。TestPage、XMLExample、Circle。代表对象，尽量用名词。<br>参数、变量、属性、方法。小驼峰。参数名称为一个单词，且表意明确。sendMessge<br>包名。全部小写。域名反写（作为程序员个体的唯一前缀）+blabla。如net.frontfree.javagroup<br>循环计数器。i、j和k<br>例外（Exception）。e,ex<br>布尔变量。boolHaveRecord:是否有记录。<br>数组的定义。int[] packets<br>列表。dayList<br>二维以上数组。lmtTypeArr<br>长度。packetsSize  </p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>不超过30字符。<br>表名。T_Sys_User、T_User。T-开头。首字母大写。单数。<br>字段。fUserName。f开头，除自增主键id外。  </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/feige1314/p/7467002.html" target="_blank" rel="noopener">https://www.cnblogs.com/feige1314/p/7467002.html</a> C语言编程规范—命名规则<br><a href="https://blog.csdn.net/u014296677/article/details/51504321" target="_blank" rel="noopener">https://blog.csdn.net/u014296677/article/details/51504321</a> 几种常见的程序命名规则<br><a href="https://blog.csdn.net/xiaoxunx/article/details/52691527" target="_blank" rel="noopener">https://blog.csdn.net/xiaoxunx/article/details/52691527</a> 程序开发的命名规范</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 方法论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码大全</title>
      <link href="/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/"/>
      <url>/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>精益求精。<br><a id="more"></a><br>代码大全笔记。<br>好的工匠知道完成某项工作要用哪样工具。也知道该怎样正确地使用。<br>编程方面的知识学得越多。你脑中的工具箱中就会有更多的分析工具。也会知道该在何时用这些工具。以及怎样正确地使用它们。<br>在软件领域里。专业的咨询人员有时会让你专用某种软件开发方法而远离其他方法。这样并不妥当。因为当你百分之百地依赖于某一方法论时。你就只会用一种方法去看世界了。<br>每位程序员都有许多工具。但并不存在任何一个能适用于所有工作的工具。因地制宜地选择正确工具是成为能有效编程的程序员的关键。<br>某些情况下。对于你所面临的问题还有其他更好的方法。你可能错失良机。这种工具箱隐喻能够帮助你把所有的方法、技术以及技巧留在脑海中—合适的时候即可拿来就用。<br>每个层次的注意事项。编程思维、编程风格、编程工艺、软件工艺、编程技术。<br>仔细的准备是必要的。而大型项目和小型项目之间也是有差异的。<br>事先做好计划能减小很多压力，让你的经验（曾经遇到的问题）来引导你吧。<br>创作引人注目的商业案例、<br>分析出全面而准确的需求、<br>创建高质量的架构</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>使用高质量的实践方法是那些能创造高质量软件的程序员的共性。<br>这些高质量的实践方法在项目的初期、中期、末期都强调质量。<br><!-- more --></p><h2 id="阅读顺序"><a href="#阅读顺序" class="headerlink" title="阅读顺序"></a>阅读顺序</h2><ul><li>低年级学生：第11章变量名的力量</li><li>初级程序员：第18章表驱动法。将复杂的逻辑判断转换为查表。从而简化代码的编写与维护。另外。本章中的一个示例说明了。面向对象设计并不只要因为它是面向对象。就一定会好于其他的设计。</li><li>自学编程的人。第7章高质量的子程序。本章详细讨论了子程序的命名和参数选择等问题。其中对子程序最佳长度的讨论颇有借鉴意义</li><li>高年级学生：第8章防御式编程。本章讲述如何面对严酷的充斥非法数据的真实世界。在遇到绝不会发生的事件和其他程序员犯下的错误时如何保护自己。</li><li>高级程序员：第4章关键的构建决策。本章关注的焦点是程序员和技术带头人个人必须(直接或间接)负责的项目准备工作</li><li>项目经理：第33章个人性格。程序设计是一项纯粹的脑力劳动。本章对挑选和培养优秀程序员提出了建议。</li><li>制定编码标准的人：第32章自说明代码。本章中有一段关于注释的精彩对话。它可能会改变您在制定编码标准时对注释的要求。</li><li>喜欢参与网上争论的人。第13。3节全局数据和第17。3节goto语句。听听学术界在这些问题上的争论也挺有意思。</li></ul><h2 id="核对表"><a href="#核对表" class="headerlink" title="核对表"></a>核对表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">前期准备</span><br><span class="line">需求</span><br><span class="line">架构</span><br><span class="line">主要的构建实践</span><br><span class="line">软件构造中的设计</span><br><span class="line">质量</span><br><span class="line">类的质量</span><br><span class="line">高质量的子程序</span><br><span class="line">防御式编程</span><br><span class="line">伪代码编程过程</span><br><span class="line">质量保证计划</span><br><span class="line">变量</span><br><span class="line">使用数据的一般事项</span><br><span class="line">变量命名</span><br><span class="line">基本数据类型</span><br><span class="line">使用不常见数据类型的注意事项</span><br><span class="line">组织直线型代码</span><br><span class="line">控制语句</span><br><span class="line">使用条件语句</span><br><span class="line">循环</span><br><span class="line">不常见的控制结构</span><br><span class="line">控制结构相关事宜</span><br><span class="line">表驱动法</span><br><span class="line">测试</span><br><span class="line">有效的结对编程</span><br><span class="line">有效的详查</span><br><span class="line">测试用例</span><br><span class="line">关于调试的建议</span><br><span class="line">重构</span><br><span class="line">重构的理由</span><br><span class="line">重构总结</span><br><span class="line">安全的重构</span><br><span class="line">代码调整策略</span><br><span class="line">代码调整方法</span><br><span class="line">工具</span><br><span class="line">配置管理</span><br><span class="line">集成</span><br><span class="line">编程工具</span><br><span class="line">美观</span><br><span class="line">布局</span><br><span class="line">自说明代码</span><br><span class="line">好的注释技术</span><br></pre></td></tr></table></figure><h2 id="定义问题"><a href="#定义问题" class="headerlink" title="定义问题"></a>定义问题</h2><p>(problemdefinition)<br>一开始就把事情做好是最合算的。</p><ul><li>架构师吃掉需求。设计师吃掉架构。而程序员则消化设计。程序员是软件食物链的最后一环。</li><li>如果需求被污染了。那么它就会污染架构。而架构又会污染构建。</li><li>这样会导致程序员脾气暴躁、营养失调，开发出的软件具有放射性污染，而且周身都是缺陷。<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2>(requirementsdevelopment)。潜心分析需求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">计划、要求并且设计一个高质量的产品。</span><br><span class="line">需求、客户沟通、捕捉需求、动态需求、弄清哪些是最关键的需求</span><br><span class="line">弄清架构要素</span><br><span class="line">定义问题、要求、辨明当时的形势</span><br><span class="line">如果你正为某个高度迭代的项目做计划</span><br><span class="line">定下解决方案的规格（每个阶段）：规模、时间、人数、计算机台数</span><br><span class="line">设计解决方案的时候做出这种计划</span><br><span class="line">用Aztek的生产过程未必能造出好的劳斯莱斯。那么你从头开始做计划。</span><br><span class="line">设计轮廓、架构、设计、程序。</span><br></pre></td></tr></table></figure></li></ul><h2 id="必备工具"><a href="#必备工具" class="headerlink" title="必备工具"></a>必备工具</h2><p>在开始建造房子之前。审视：<br>蓝图(包含所有细节信息的设计详图)<br>全部(建筑)许可证<br>测量房屋的地基<br>CaperJones是SoftwareProductivityResearch(软件生产率研究)的首席科学家。他回顾20年的软件研究。指出他和同事见过不止<br>700种不同的编程语言。<br>40种收集需求的方法、<br>50种进行软件设计的方法、<br>30种针对项目的测试方法(Jones2003)。<br>三种主调的无数变奏：项目类型与典型实践</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>准备工作的中心目标就是降低风险:一个好的项目规划者能够尽可能早地将主要的风险清除掉。以使项目的大部分工作能够尽可能平稳地进行。<br>目前。软件开发中最常见的项目风险是糟糕的需求分析和糟糕的项目计划。<br>因此准备工作就倾向于集中改进需求分析和项目规划。<br>构建活动的准备工作不是一门精密科学。要根据每一个项目的特点来选择特定的降低风险的方法。<br>具体细节随项目的不同。会有非常大的变化。</p><ul><li>为什么合适的准备工作是非常重要的</li><li>尽早查找并修正错误：<a href="https://upload-images.jianshu.io/upload_images/6908911-73bdbfba79a49a39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">缺陷检测成本</a></li><li>如何判定，是否已经准备好开始构建工作了<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2>你对<code>如何进行构建</code>的理解程度，决定了你这名程序员的优秀程度。构建活动的质量对软件的质量有着实质性的影响<br>构建(construction)、建筑工人(constructionworkers)、硬纸板(constructionpaper)<br>按照一般的用法。构建是指建设的过程。构建过程可能包含有计划、设计、检查工作的一些方面。多数时候，构建就是指创建事物过程中动手的那些部分。<br>正式和非正式项目的红头文件。构建有时也被认为是编码(coding)或编程(programming)。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">规划构建(constructionplanning)</span><br><span class="line">    软件构建</span><br><span class="line">        软件开发的核心活动</span><br><span class="line">        每个项目中唯一一项必不可少的工作。</span><br><span class="line">    构建实践</span><br><span class="line">        在构建过程中，辨明当时的形势如何。</span><br><span class="line">        在你开始构建的时候。项目前期工作已经或多或少为这个项目的成功或失败打下了基础。</span><br><span class="line">        如果你看到失败的乌云已经出现在地平线上时，就退回到项目的前期工作吧。</span><br><span class="line">软件架构(softwarearchitecture)或高层设计(highleveldesign)。精心设计架构</span><br></pre></td></tr></table></figure></li></ul><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">项目规划。详细设计(detaileddesign)。活动、技术和诀窍</span><br><span class="line">    代码格式</span><br><span class="line">    代码布局</span><br><span class="line">    设计方法</span><br><span class="line">    用户界面设计、组件</span><br><span class="line">代码可读性、编码(coding)</span><br><span class="line">    设计并编写类(class)和子程序(routine)、命名和质量。构建细节：创建类的步骤</span><br><span class="line">    创建并命名变量(variable)和具名常量(namedconstant)。</span><br><span class="line">    语句。组织语句块。选择控制结构(controlstructure)。</span><br><span class="line">    容器类(containerclasses)、科学计算函数、数据库访问组件</span><br><span class="line">    数据类型</span><br><span class="line">    编码标准</span><br></pre></td></tr></table></figure><h2 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h2><p>无论何种项目。都会对准备工作进行剪裁。使之符合项目的特定需要;在构建活动开始之前。准备工作要做周全：<br>建造摩天大楼用一种方法。<br>建造普通住宅用另一种方法。<br>建造犬舍用第三种方法。<br><a href="https://uploadimages.jianshu.io/upload_images/6908911845325aae45e6355.png?imageMogr2/autoorient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">项目种类与典型实践</a><br><a href="https://uploadimages.jianshu.io/upload_images/69089115b9431db2a2cfc27.png?imageMogr2/autoorient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">项目种类与典型实践</a><br>高迭代式与序列式<br>性命攸关的系统往往要求采用更加序列式的方法—需求稳定是确保超高等级的可靠性的必备条件之<br><a href="https://uploadimages.jianshu.io/upload_images/690891122da391925683288.png?imageMogr2/autoorient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">无准备的序列式与迭代式</a><br><a href="https://uploadimages.jianshu.io/upload_images/690891139c48db18b0494d2.png?imageMogr2/autoorient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">有装备的序列式与迭代式</a><br><a href="https://uploadimages.jianshu.io/upload_images/6908911e053cbb9582d5047.png?imageMogr2/autoorient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">方案选择</a><br><a href="https://uploadimages.jianshu.io/upload_images/6908911f4a24687627fef82.png?imageMogr2/autoorient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">方案选择</a><br>UpstreamPrerequisites<br>MeasureTwice。CutOnce<br>构建活动差不多占整个项目成本的65%。<br>有的软件项目最终会进行两三次(甚至更多)构建。<br>将项目中最昂贵的部分执行两遍。这无论在软件行业还是在其他行业都是愚蠢的主意。<br><a href="https://uploadimages.jianshu.io/upload_images/690891112ba8a06a07852de.png?imageMogr2/autoorient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">构建活动的地位示意图</a><br><a href="https://uploadimages.jianshu.io/upload_images/6908911c5bab172a8062ff9.png?imageMogr2/autoorient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">构建的重要性</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">项目管理方法</span><br><span class="line">    分阶段(phase)进行、还是迭代式(interation)进行。</span><br><span class="line">    新语言、新开发过程、新方法论</span><br><span class="line">    软件项目</span><br><span class="line">    有没有更好的工具、启发、启发式、探索式、受益</span><br><span class="line">    灵活轻量级的开发方法</span><br><span class="line">    严格重量级的开发方法</span><br><span class="line">    演进式交付(Evolutionary Delivery)</span><br><span class="line">    敏捷编程(agile programming)</span><br><span class="line">    调用别人的库，如砖块。自己编写那些现成的代码通常是没有意义的</span><br><span class="line">    自己编写库，如自己定制的高档家具</span><br><span class="line">    适当的多层次规划对编程是有好处的。</span><br><span class="line">    增量式开发：先做出一个简单可行版本。一次增加一小部分代码，直到得到一个完全可以工作的系统</span><br><span class="line">    超大型的项目要更高级别的规划</span><br><span class="line">    精心计划不意味事无巨细的计划或过度计划</span><br><span class="line">    在后期改变细节的能力。改变不会出重大事故。安全、时间成本和物资成本</span><br><span class="line">    核查。留有余地以保证安全。</span><br><span class="line">    对结构进行超出常规的规划和建设（over-engineered）</span><br></pre></td></tr></table></figure></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>(debugging)、测试、系统测试(systemtesting)、开发者测试(developer testing)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">系统测试。软件质量保证。</span><br><span class="line">测试只是质量保证策略的一部分。而且不是最有影响的部分。</span><br><span class="line">测试是不可能检查出的缺陷</span><br><span class="line">制造了一个错误的产品</span><br><span class="line">使用错误的方法制造正确的产品</span><br><span class="line">这样的缺陷必须在测试之前解决。更确切地说是在构建活动之前。</span><br></pre></td></tr></table></figure></p><pre><code>单元测试(unit testing)。确定如何测试所写的代码。集成测试(integration testing)测试用例什么是可行什么是不可行的脚踏实地测试</code></pre><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>(Integration)。将单独开发的多个软件组件集成为一体</p><h2 id="保障维护"><a href="#保障维护" class="headerlink" title="保障维护"></a>保障维护</h2><p>(correctivemaintenance)。风险防御、因地制宜<br>    评审开发团队其他成员的底层设计和代码。并让他们评审你的工作。<br>    润饰代码。仔细进行代码的格式化和注释<br>    调整代码(tuningcode)。让它更快、更省资源。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>CapersJones发表的报告称：<br>一套100万行代码的软件系统<br>平均需要69种文档(8100)<br>需求规格文档一般有四五千页长<br>设计文档常常是需求的两三倍长<br>不太可能有哪个人能完全理解这种规模的项目的所有设计细节，甚至只是通读一遍都不那么容易。</p><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><pre><code>代码调优的技术和策略、评审、审查高质量软件。提高软件质量是降低开发成本的重要途径</code></pre><h2 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h2><p>在更短的时间内写出更棒的程序<br>用户的需求。项目的需求发生变动时帮助你成功地维护并修改已经开发出来的软件<br>开发效率。交付快，更快速地进行开发<br>预算不超<br>健壮、安全、漏洞少，遇到的问题更少。为什么会遇到那些问题。如何在将来避免它们。反复尝试和试错的结晶。<br>规范、弹性<br>掌控更大型的项目<br>优秀</p><h2 id="过程隐喻"><a href="#过程隐喻" class="headerlink" title="过程隐喻"></a>过程隐喻</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">隐喻、类比、模型、概念化、泛型</span><br><span class="line">完整、充分</span><br><span class="line">春天播种了一个代码种子，希望秋天收获丰盛的代码</span><br><span class="line">播种、培育、耕作、小步前进</span><br><span class="line">生长、增量、迭代、累积、冲积层、珍珠、提炼</span><br><span class="line">growing、accretion、incremental、iterative、adaptive、evolutionary</span><br><span class="line">自适应、演进</span><br><span class="line">writing、building</span><br><span class="line">成果：速度和精读的提升、省时省力</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="里程碑"><a href="#里程碑" class="headerlink" title="里程碑"></a>里程碑</h3><p>思维训练。高质量代码习惯。编程原则是超越特定语言语法的。<br>丰富的理论知识研究、当今的理论发展水平、前沿的开发实践。<br>编程经验、编程技术、行之有效的编程实践经验技术、反映实践状况的产品级代码。<br>软件开发领域、项目（管理）经验经验技巧、开发策略<br>项目思考。需求分析。实用、有效、强大。<br>行动策略。具体情况作出更正确的决策。避免反复陷入完全一样的战斗<br>实质地改善编程质量并提高工作效率。</p><h3 id="名片"><a href="#名片" class="headerlink" title="名片"></a>名片</h3><p>畅销书作者<br>杂志主编<br>计算机科学与技术委员会（ComputerScienceandTechnologyBoard）<br>当艺术评论家聚在一起的时候。他们谈论的都是关于版式、结构以及意蕴之类的话题;而当真正的艺术家聚在起的时候。他们谈论的则是到哪儿才能买到更便宜的松节油。PablePN毕加索。</p><h3 id="你在技术浪潮中的位置"><a href="#你在技术浪潮中的位置" class="headerlink" title="你在技术浪潮中的位置"></a>你在技术浪潮中的位置</h3><blockquote><p>自学程序员、经验不足的程序员、学生⇒参加过正规训练的程序员⇒软件开发者⇒优秀程序员、经验丰富的程序员、内行⇒分析师、软件架构师、项目负责人⇒业界大师与教授、技术带头人、技术领导。有些教授并不实际编写产品代码。教授们写出来的技术内容对于学生们的项目而言还行得通。但他们通常不知道如何在完整规模的开发环境中施展这些技术。⇒知识与商业实践大咖。</p></blockquote><blockquote><p>一般商业实践⇒学习并掌握不止一门语言是专业程序员职业生涯的分水岭⇒编程领域的大众技术、强大的软件开发技术、前卫的软件开发实践迅速发展⇒业界研究、学术成果、研究成果、专家经验⇒软件工程界软件开发领域⇒让那些关键性的研发成果现在就能为更多编程人员所用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">强大的编程技术已在学术论文和期刊里尘封了多年。</span><br><span class="line">软件业界以及学术界的研究人员已经发现了不少行之有效的实践经验</span><br><span class="line">足以解决自20世纪70年代以来编程领域中日益蔓延的大多数问题</span><br><span class="line">可是这些实践经验很少在高度专业化的技术期刊之外对外发表</span><br><span class="line">所以时至今日大多数编程的机构和组织还没能用上这些技术</span><br></pre></td></tr></table></figure></p></blockquote><p>有研究表明：一项研发成果从其诞生之日起，到进入商业实践阶段，通常要经历5到15年甚至更长的时间(RaghavanandChand1989;Rogers1995;Parnas199)。</p><p>专业经验</p><p>杂志上的文章<br>编程语言书籍<br>技术参考资料<br>其他软件著作</p><h3 id="激动人心的项目"><a href="#激动人心的项目" class="headerlink" title="激动人心的项目"></a>激动人心的项目</h3><p>互联网、电影特技、医疗中的生命维持系统、航空、高速金融分析、科学研究、太空计划</p><h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><ul><li>ProfessionalSoftwareDevelopment。专业软件开发。Mcconnell2004第16章描述了专业技能培养计划。</li><li>ThePsychologyofComputerProgramming。Weinberg8100，GeraldWeinberg的经典著作。</li><li>硬件参考手册。Intel或Motorola的。</li><li>函数手册。MicrosoftWindows或Linux操作系统的。</li><li>RethinkingSystemsAnalysisndDesign。Weinberg1988。OntheOriginsofDesignerIntuition(论设计直觉的源泉)这一章。另一个关于软件方面的耕作的比喻。</li><li>WhatSupportstheRoof。是什么撑起了天花板。Starr2003。深入阅读关于构建隐喻的引申。</li><li>TheStructureofScientificRevolutions。THomasKuhn。科学变革的结构。隐喻、模型(model)以及范型(paradigm)中的试金石和金典。在一个达尔文周期中，科学理论如何相对于其他理论而诞生、发展并消亡的书。于1962年首次发布。奠定了科学哲学的基础。该书短小精悍。列举了大量科学中隐喻、模型以及范型间此消彼长的有趣示例。</li><li>TheParadigmsofProgramming。Floyd.Robertw.编程范型。1978年图灵奖的颁奖演讲。这是一篇令人神往的关于软件开发中的模型的讨论。Floyd将Kuhn的理念用到了编程上。</li><li>CommunicationsoftheACM(ACM通讯)。August1979。pp。455—460。</li></ul><p>Java编程入门<br>高级Java编程<br>高高级Java编程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WISCA综合症或者WIMP综合症:</span><br><span class="line">Why Isn&apos;t Sam Coding Anything?为什么Sam不在写代码</span><br><span class="line">Why Isn&apos;t Mary Programing?为什么Mary不在编程</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 方法论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>self-dividing-numbers</title>
      <link href="/self-dividing-numbers/"/>
      <url>/self-dividing-numbers/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>求两个整数之间能被自身所有十进制位上的数字整除的数。<br>self-dividing-numbers <a href="https://leetcode.com/problems/self-dividing-numbers/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/self-dividing-numbers/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>1.先单个判断，再进行范围遍历。<br>2.<code>str</code>和<code>int</code>的妙用。<br>3.好好体会<code>return</code>的位置和用法。<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selfDividingNumbers</span><span class="params">(self, left, right)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">self_dividing</span><span class="params">(n)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> str(n):</span><br><span class="line">                <span class="keyword">if</span> d == <span class="string">'0'</span> <span class="keyword">or</span> n % int(d) &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(left, right + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> self_dividing(n):</span><br><span class="line">                ans.append(n)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swap-salary</title>
      <link href="/swap-salary/"/>
      <url>/swap-salary/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>数据库中属性（如男女）互换。<br>swap-salary <a href="https://leetcode.com/problems/swap-salary/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/swap-salary/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>SQL语句，记一下好了。<br>UPDATE SET CASE END WHEN THEN ELSE<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> salary </span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">    sex = <span class="keyword">CASE</span> sex</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">'m'</span> <span class="keyword">THEN</span> <span class="string">'f'</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">'m'</span></span><br><span class="line">    <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>univalued-binary-tree</title>
      <link href="/univalued-binary-tree/"/>
      <url>/univalued-binary-tree/</url>
      
        <content type="html"><![CDATA[<p>判断二叉树是否是单值二叉树。<br>univalued-binary-tree <a href="https://leetcode.com/problems/univalued-binary-tree/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/univalued-binary-tree/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>1.层层推进的判断，调用自身<br>2.唯一性用集合长度来表示<br>3.<code>node.val</code> , <code>node.left</code> , <code>node.right</code><br><a id="more"></a></p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>判断二叉树是否是单值二叉树</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isUnivalTree</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        vals = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                vals.append(node.val)</span><br><span class="line">                dfs(node.left)</span><br><span class="line">                dfs(node.right)</span><br><span class="line"></span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> len(set(vals)) == <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>twoSum</title>
      <link href="/twoSum/"/>
      <url>/twoSum/</url>
      
        <content type="html"><![CDATA[<p>integer、indices、input、assume、类的方法传参、enumerate、random(5)<br><a id="more"></a><br>Given an array of <code>integers</code>, return <code>indices</code> of the two numbers such that they add up to a specific target.<br><code>You may assume that each input would have exactly one solution, and you may not use the same element twice.</code></p><h1 id="1-enumerate"><a href="#1-enumerate" class="headerlink" title="1. enumerate"></a>1. enumerate</h1><p><a href="http://www.runoob.com/python/python-func-enumerate.html" target="_blank" rel="noopener">http://www.runoob.com/python/python-func-enumerate.html</a><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line">seq_enumerated=enumerate(seq) </span><br><span class="line"><span class="comment">#组合为一个索引序列，同时列出数据和数据下标</span></span><br><span class="line">print(seq_enumerated) </span><br><span class="line"><span class="comment">#&lt;enumerate object at 0x0000021026476828&gt; 返回枚举对象</span></span><br><span class="line">print(type(seq_enumerated)) </span><br><span class="line"><span class="comment">#&lt;class 'enumerate'&gt; </span></span><br><span class="line"><span class="comment">#print(seq_enumerated[0])    #TypeError  'enumerate' object is not subscriptable</span></span><br><span class="line"><span class="keyword">for</span> i, element <span class="keyword">in</span> enumerate(seq):</span><br><span class="line">    print(i,element)</span><br></pre></td></tr></table></figure></p><h1 id="2-参考"><a href="#2-参考" class="headerlink" title="2. 参考"></a>2. 参考</h1><h2 id="2-1-O-n2-1"><a href="#2-1-O-n2-1" class="headerlink" title="2.1. O(n2)-1"></a>2.1. O(n<sub>2</sub>)-1</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, n <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            m = target - n</span><br><span class="line">            <span class="keyword">if</span> m <span class="keyword">in</span> d:</span><br><span class="line">                <span class="keyword">return</span> [d[m], i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d[n] = i</span><br><span class="line">a=Solution()</span><br><span class="line">m=a.twoSum([<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>],<span class="number">9</span>)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure><h3 id="2-1-1-去掉class"><a href="#2-1-1-去掉class" class="headerlink" title="2.1.1. 去掉class"></a>2.1.1. 去掉class</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(nums, target)</span>:</span></span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i, n <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">        m = target - n</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">in</span> d:</span><br><span class="line">            <span class="keyword">return</span> [d[m], i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            d[n] = i</span><br><span class="line">print(twoSum([<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>],<span class="number">9</span>))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        buff_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">in</span> buff_dict:</span><br><span class="line">                <span class="keyword">return</span> [buff_dict[nums[i]], i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                buff_dict[target - nums[i]] = i</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>array-partition-i</title>
      <link href="/array-partition-i/"/>
      <url>/array-partition-i/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>把 2n 个整数平分成 n 份，求每份中最小数之和的最大数。<br>array-partition-i <a href="https://leetcode.com/problems/array-partition-i/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/array-partition-i/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>1.<code>sorted</code>的用法<br>2.步距的妙用<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrayPairSum</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> sum(sorted(nums)[::<span class="number">2</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>search-in-a-binary-search-tree</title>
      <link href="/search-in-a-binary-search-tree/"/>
      <url>/search-in-a-binary-search-tree/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在BST中找到节点值等于给定值的节点。<br>search-in-a-binary-search-tree <a href="https://leetcode.com/problems/search-in-a-binary-search-tree/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>1.<code>while</code>递归中的<code>return</code><br>2.<code>temp = temp.left</code>的用法</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>1.BST中父节点和子节点的值的大小关系是固定的吗<br>2.搜索不到则返回<code>NULL</code>是如何呈现的<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchBST</span><span class="params">(self, root, val)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp = root</span><br><span class="line">        <span class="keyword">while</span> temp:</span><br><span class="line">            <span class="keyword">if</span> temp.val == val:</span><br><span class="line">                <span class="keyword">return</span> temp</span><br><span class="line">            <span class="keyword">elif</span> temp.val &gt; val:</span><br><span class="line">                temp = temp.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = temp.right</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hamming-distance</title>
      <link href="/hamming-distance/"/>
      <url>/hamming-distance/</url>
      
        <content type="html"><![CDATA[<p>汉明距离：两个整数转化为二进制后，求进制位上数字不同的个数。<br>hamming-distance <a href="https://leetcode.com/problems/hamming-distance/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/hamming-distance/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p><code>bin</code> , <code>^</code> , <code>count</code><br><a id="more"></a></p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>汉明距离：两个整数转化为二进制后，求进制位上数字不同的个数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingDistance</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :type y: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> bin(x^y).count(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure><h2 id="收获-1"><a href="#收获-1" class="headerlink" title="收获"></a>收获</h2><p><code>bin</code> , <code>^</code> , <code>count</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fibonacci-number</title>
      <link href="/fibonacci-number/"/>
      <url>/fibonacci-number/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>求斐波那契的第 N+1 个值。<br>fibonacci-number <a href="https://leetcode.com/problems/fibonacci-number/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/fibonacci-number/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>1.负数下标更方便从右处理列表<br>2.注意体会边界的使用<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self, N)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type N: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> N == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fibs = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>,N + <span class="number">1</span>):</span><br><span class="line">                fibs.append(fibs[<span class="number">-1</span>] + fibs[<span class="number">-2</span>])</span><br><span class="line">            <span class="keyword">return</span> fibs[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>di-string-match</title>
      <link href="/di-string-match/"/>
      <url>/di-string-match/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>用只含字母 I 和 D 的字符串生成列表，使 I 对应的列表元素值升序排列， D对应的列表元素值降序排列<br>di-string-match <a href="https://leetcode.com/problems/di-string-match/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/di-string-match/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>1.用 0 和 字符串长度来初始化<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diStringMatch</span><span class="params">(self, S)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type S: str</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        up, down = <span class="number">0</span>, len(S)</span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">if</span> x == <span class="string">'I'</span>:</span><br><span class="line">                ans.append(up)</span><br><span class="line">                up += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.append(down)</span><br><span class="line">                down -= <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> ans + [up]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k-closest-points-to-origin</title>
      <link href="/k-closest-points-to-origin/"/>
      <url>/k-closest-points-to-origin/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>一系列二维坐标值放入列表中，求出K个离原点最近的坐标值。<br>k-closest-points-to-origin <a href="https://leetcode.com/problems/k-closest-points-to-origin/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/k-closest-points-to-origin/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>1.多维下的sort<br>2.lambda的用法<br>3.列表的切片<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kClosest</span><span class="params">(self, points, K)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type points: List[List[int]]</span></span><br><span class="line"><span class="string">        :type K: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        points.sort(key = <span class="keyword">lambda</span> P:P[<span class="number">0</span>]**<span class="number">2</span> + P[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> points[:K]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>n-ary-tree-postorder-traversal</title>
      <link href="/n-ary-tree-postorder-traversal/"/>
      <url>/n-ary-tree-postorder-traversal/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>后序遍历 N 叉树<br>n-ary-tree-postorder-traversal <a href="https://leetcode.com/problems/n-ary-tree-postorder-traversal/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p><img src="https://leetcode.com/problems/n-ary-tree-postorder-traversal/Figures/145_transverse.png" alt="二叉树"><br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node(object):</span></span><br><span class="line"><span class="string">    def __init__(self, val, children):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.children = children</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: Node</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        stack, output = [root, ], []</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            root = stack.pop()</span><br><span class="line">            output.append(root.val)</span><br><span class="line">            stack.extend(root.children)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> output[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>n-ary-tree-preorder-traversal</title>
      <link href="/n-ary-tree-preorder-traversal/"/>
      <url>/n-ary-tree-preorder-traversal/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>前序遍历 N 叉树<br>n-ary-tree-preorder-traversal <a href="https://leetcode.com/problems/n-ary-tree-preorder-traversal/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>list <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" target="_blank" rel="noopener">官方文档</a> <a href="http://www.runoob.com/python/python-lists.html" target="_blank" rel="noopener">菜鸟教程</a><br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node(object):</span></span><br><span class="line"><span class="string">    def __init__(self, val, children):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.children = children</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: Node</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        stack, output = [root, ], []            </span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            root = stack.pop()</span><br><span class="line">            output.append(root.val)</span><br><span class="line">            stack.extend(root.children[::<span class="number">-1</span>])</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>number-of-recent-calls</title>
      <link href="/number-of-recent-calls/"/>
      <url>/number-of-recent-calls/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>求3000ms前到现在的ping数。<br>number-of-recent-calls <a href="https://leetcode.com/problems/number-of-recent-calls/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/number-of-recent-calls/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>1.用list来理解collections.deque()<br>2.<a href="https://docs.python.org/3/library/collections.html" target="_blank" rel="noopener">https://docs.python.org/3/library/collections.html</a><br>3.<a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001411031239400f7181f65f33a4623bc42276a605debf6000" target="_blank" rel="noopener">廖雪峰collections</a><br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecentCounter</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.q = collections.deque()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ping</span><span class="params">(self, t)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type t: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.q.append(t)</span><br><span class="line">        <span class="keyword">while</span> self.q[<span class="number">0</span>] &lt; t<span class="number">-3000</span>:</span><br><span class="line">            self.q.popleft()</span><br><span class="line">        <span class="keyword">return</span> len(self.q)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your RecentCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = RecentCounter()</span></span><br><span class="line"><span class="comment"># param_1 = obj.ping(t)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>peak-index-in-a-mountain-array</title>
      <link href="/peak-index-in-a-mountain-array/"/>
      <url>/peak-index-in-a-mountain-array/</url>
      
        <content type="html"><![CDATA[<p>简述：求山形数组中峰值的下标。<br>peak-index-in-a-mountain-array <a href="https://leetcode.com/problems/peak-index-in-a-mountain-array/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/" target="_blank" rel="noopener">中文</a><br>收获：遍历一下返回就OK。<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peakIndexInMountainArray</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type A: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)):</span><br><span class="line">            <span class="keyword">if</span> A[i] &gt; A[i+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>merge-two-binary-trees</title>
      <link href="/merge-two-binary-trees/"/>
      <url>/merge-two-binary-trees/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>合并2个二叉树。<br>merge-two-binary-trees <a href="https://leetcode.com/problems/merge-two-binary-trees/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/merge-two-binary-trees/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>1.判断空树<br>2.递归<br>3.<code>TreeNode</code> , <code>self.</code><br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span><span class="params">(self, t1, t2)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> t1 <span class="keyword">and</span> t2:</span><br><span class="line">            root = TreeNode(t1.val + t2.val)</span><br><span class="line">            root.left = self.mergeTrees(t1.left, t2.left)</span><br><span class="line">            root.right = self.mergeTrees(t1.right, t2.right)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> t1 <span class="keyword">or</span> t2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sort-array-by-parity-ii</title>
      <link href="/sort-array-by-parity-ii/"/>
      <url>/sort-array-by-parity-ii/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>给定非负整数数组，该数组中奇数的个数和偶数的个数相同。重新排列数组，使元素的奇偶性和元素的索引的奇偶性一致。<br>sort-array-by-parity-ii <a href="https://leetcode.com/problems/sort-array-by-parity-ii/" target="_blank" rel="noopener">英文</a> <a href="https://leetcode-cn.com/problems/sort-array-by-parity-ii/" target="_blank" rel="noopener">中文</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>1.初始化一个固定长度的数组<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArrayByParityII</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type A: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        lst = [<span class="keyword">None</span>] * len(A)</span><br><span class="line">        evenIndex,oddIndex = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> A:</span><br><span class="line">            <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                lst[evenIndex] = x</span><br><span class="line">                evenIndex += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                lst[oddIndex] = x</span><br><span class="line">                oddIndex += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lst</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>数据结构与算法笔记。<br><a id="more"></a></p><p>数据结构与算法的关系:相互依赖不可分割的.<br>算法的定义:算法是解决特定问题求解步骤的描述,在计算机中为指令的有限序列,并且每条指令表示一个或多个操作。<br>算法的特性:有穷性、确定性、可行性、输入、输出。<br>算法的设计的要求:正确性、可读性、健壮性、高效率和低存储量需求。<br>算法特性与算法设计容易混,需要对比记忆。<br>算法的度量方法:事后统计方法(不科学、不准确)、事前分析估算方法。<br>在讲解如何用事前分析估算方法之前,我们先给出了函数渐近增长的定义。</p><h1 id="函数的渐近增长"><a href="#函数的渐近增长" class="headerlink" title="函数的渐近增长"></a>函数的渐近增长</h1><p>给定两个函数f(n)和g(n),<br>如果存在一个整数N,使得对于所有的n&gt;N,f(n)总是比g(n)大,那么,我们说fn)的增长渐近快于g(n)。<br>于是我们可以得出一个结论,判断一个算法好不好,我们只迪过少量的数据是不能做出准确判断的<br>对比算法的关键执行次数函数的渐近增长性,基本就可以分析出:某个算法,随着n的变大,它会越来越优于另一算法,或者越来越差于另一算法。<br>算法时间复杂度的定义</p><p>#推导大O阶的步骤</p><blockquote><p>用常数1取代运行时间中的所有加法常数。<br> 在修改后的运行次数函数中,只保留最高阶项。<br> 如果最高阶项存在且不是1,则去除与这个项相乘的常数。 </p></blockquote><p>得到的结果就是大0阶。<br>在得到算法的运行次数表达式后,很快得到它的时间复杂度,即大0阶。<br>推导大0阶很容易,但如何得到运行次数的表达式却是需要数学功底的。</p><h1 id="常见的时间复杂度所耗时间的大小排列"><a href="#常见的时间复杂度所耗时间的大小排列" class="headerlink" title="常见的时间复杂度所耗时间的大小排列"></a>常见的时间复杂度所耗时间的大小排列</h1><p>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n2)&lt;O(n3)&lt;O(2”)&lt;O(n!)&lt;O(n”)<br>算法最坏情况和平均情况<br>空间复杂度<br>弄明白算法的时间复杂度的估算<br>深究自己写的代码是否效率低下,是不是可以通过优化让计算机更加快速高效。</p><h1 id="CPU与算法"><a href="#CPU与算法" class="headerlink" title="CPU与算法"></a>CPU与算法</h1><p>现在CPU越来越快,根本不用考虑算法的优劣,实现功能即可,用户感觉不到算法好坏造成的快慢？</p><p><blockquote>假设CPU在短短几年间,速度提高了100倍,这其实已经很夸张了。<br>而我们的某个算法本可以写出时间复杂度是O(n)的程序,却写出了0(n2)的程序,仅仅因为容易想到,也容易写。<br>即在O(n2)的时间复杂度算法程序下,速度其实只提高了10(√100=10),而对于0(n)时间复杂度的算法来说,那才是真的100倍。<br>也就是说,一台老式CPU的计算机运行O(n)的程序和一台速度提高100倍新式CPU运行O(n2)的程序。</blockquote><br>最终效率高的胜利方却是老式CPU的计算机,原因就在于算法的优劣直接决定了程序运行的效率。</p><h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>早期人们都把计算机理解为数值计算工具,就是感觉计算机当然是用来计算的,所以计算机解决问题,应该是先从具体问题中抽象出一个适当的数据模型,设计出个解此数据模型的算法,然后再编写程序,得到一个实际的软件。<br>可现实中,我们更多的不是解决数值计算的问题,而是需要一些更科学有效的手段(比如表、树和图等数据结构)的帮助,才能更好地处理问题。所以数据结构是门研究非数值计算的程序设计问题中的操作对象,以及它们之间的关系和操作等相关问题的学科<br>1968年,美国的高德纳( Donald E. Knuth)教授在其所写的《计算机程序设计艺术》第一卷《基本算法》中,较系统地阐述了数据的逻辑结构和存储结构及其操作,开创了数据结构的课程体系。同年,数据结构作为一门独立的课程,在计算机科学的学位课程中开始出现。也就是说,那之后计算机相关专业的学生开始接受《数据结构》的“折磨”—其实应该是享受才对。<br>之后,70年代初,出现了大型程序,软件也开始相对独立,结构程序设计成为程序设计方法学的主要内容,人们越来越重视“数据结构”,认为程序设计的实质是对确定的问题选择一种好的结构,加上设计一种好的算法。可见,数据结构在程序设计当中占据了重要的地位。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-8dd32c84e607dd12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-aea8c6a097def30a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>数据:是描述客观事物的符号,是计算机中可以操作的对象,是能被计算机识别,并输入给计算机处理的符号集合。</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>这里说的数据,其实就是符号,而且这些符号必须具备两个前提：可以输入到计算机中。能被计算机程序处理。</p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p>对于整型、实型等数值类型,可以进行数值计算。<br>对于字符数据类型,就需要进行非数值的处理。<br>而声音、图像、视频等其实是可以通过编码的手段变成字符数据来处理的。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型:是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。<br>数据类型是按照值的不同进行划分的。<br>在高级语言中,每个变量、常量和表达式都有各自的取值范围。类型就用来说明变量或表达式的取值范围和所能进行的操作。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>数据类型：整型、实型等数值类型,字符（文字数据）及声音、图像、视频等非数值类型。</p><h3 id="为什么有不同的数据类型"><a href="#为什么有不同的数据类型" class="headerlink" title="为什么有不同的数据类型"></a>为什么有不同的数据类型</h3><p>当年那些设计计算机语言的人,为什么会考虑到数据类型呢?</p><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>在计算机中,内存也不是无限大的。<br>计算整型数字的加减乘除运算,不需要开辟很大的内存空间。<br>于是计算机的研究者们就考虑,要对数据进行分类,分出来多种数据类型。<br>比如,在C语言中变量声明inta,b,这就意味着,在给变量a和b赋值时不能超出int的取值范围,变量a和b之间的运算只能是int类型所允许的运算。</p><h4 id="底层语言与高级语言"><a href="#底层语言与高级语言" class="headerlink" title="底层语言与高级语言"></a>底层语言与高级语言</h4><p>因为不同的计算机有不同的硬件系统,这就要求程序语言最终通过编译器或解释器转换成底层语言,如汇编语言甚至是通过机器语言的数据类型来实现的。<br>实现1+2进行几次开关操作,这些操作是如何实现的。</p><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>无论什么计算机、什么计算机语言,大都会面临着如整数运算、实数运算、字符运算等操作,我们可以考虑把它们都抽象出来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">抽象与抽象特性</span><br><span class="line">抽象：是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节,是对具体事物的一个概括。</span><br><span class="line">    抽象是一种思考问题的方式,它隐藏了繁杂的细节,只保留实现目标所必需的信息。</span><br><span class="line">    一个抽象数据类型到底需要哪些操作,这就只能由设计者根据实际需要（情况）来定。</span><br><span class="line">抽象数据类型( Abstract Data Type,ADT):是指一个数学模型及定义在该模型上的一组操作。</span><br><span class="line">    一个抽象数据类型定义了:一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。</span><br><span class="line">    我们对已有的数据类型进行抽象,就有了抽象数据类型。</span><br><span class="line">    抽象数据类型不仅仅指那些已经定义并实现的数据类型,还可以是计算机编程者在设计软件程序时自己定义的数据类型。</span><br><span class="line">抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。</span><br><span class="line">    把实际生活中的问题分解为多个规模小且容易处理的问题,</span><br><span class="line">    然后建立一个计算机能处理的数据模型,</span><br><span class="line">    并把每个功能模块的实现细节作为一个独立的单元,</span><br><span class="line">    从而使具体实现过程隐藏起来。</span><br><span class="line">抽象数据类型的定义仅取决于它的一组逻辑特性,而与其在计算机内部如何表示和实现无关。</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6908911-4023d768ccc847ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/960" alt="数据抽象标准格式"></p><h2 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h2><p>数据对象:是性质相同的数据元素的集合,是数据的子集。<br>实际应用中,在不产生混淆的情况下,我们都将数据对象简称为数据。<br>性质相同<br>指数据元素具有相同的数据项：数量和类型。<br>比如,还是刚才的例子,人都有姓名、生日、性别等相同的数据项。</p><h3 id="数据元素（记录）"><a href="#数据元素（记录）" class="headerlink" title="数据元素（记录）"></a>数据元素（记录）</h3><p>数据元素：是组成数据的、有一定意义的基本单位,在计算机中通常作为整体处理。也被称为记录。<br>讨论问题时,数据元素才是数据结构中建立数据模型的着眼点。</p><h4 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h4><p>数据项:一个数据元素可以由若干个数据项组成。姓名、年龄、性别等数据项,具体有哪些数据项,要视你做的系统来决定。<br>数据项是数据不可分割的最小单位。<br>数据项是数据的最小单位。<br>把数据项定义为最小单位,是有助于更好地解决问题。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>结构是指各个组成部分相互搭配和排列的方式。在现实世界中,不同数据元素之间不是独立的,而是存在特定的关系,我们将这些关系称为结构。</p><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><p>关系、结构、集合、组织形式。<br>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。<br>在计算机中,数据元素并不是孤立、杂乱无序的,而是具有内在联系的数据集合。<br>数据元素之间存在的一种或多种特定关系,也就是数据的组织形式。<br>为编写出一个“好”的程序,必须分析待处理对象的特性及各处理对象之间存在的关系。</p><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><p>逻辑结构：是指数据对象中数据元素之间的相互关系。</p><ul><li>集合结构：集合结构中的数据元素除了同属于一个集合外,它们之间没有其他关系。各个数据元素是“平等”的,它们的共同属性是“同属于一个集合”。数据结构中的集合关系就类似于数学中的集合。</li><li>线性结构：数据元素之间是一对一的关系。如不转车的地铁站。</li><li>树形结构：数据元素之间是一对多的关系。</li><li>图形结构：数据元素之间是多对多的关系。<h4 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h4>物理结构：是指数据的逻辑结构在计算机中的存储形式数据是数据元素的集合。如何把数据元素存储到计算机的存储器中。如何存储数据元素之间的逻辑关系,是实现物理结构的重点和难点。<br>存储器主要是针对内存而言的,像硬盘、软盘、光盘等外部存储器的数据组织通常用文件结构来描述。</li><li>顺序存储结构<blockquote><p>顺序存储结构:是把数据元素存放在地址连续的存储单元里,其数据间的逻辑关系和物理关系是一致的。<br>说白了,就是排队占位。大家都按顺序排好,每个人占一小段空间,大家谁也别插谁的队。数组就是这样的顺序存储结构。<br>当你告诉计算机,你要建立一个有9个整型数据的数组时,计算机就在内存中找了片空地,按照一个整型所占位置的大小乘以9,开辟一段连续的空间,于是第一个数组数据就放在第一个位置,第二个数据放在第二个,这样依次摆放。  </p></blockquote></li><li>链式存储结构<blockquote><p>插队，添加，去掉，整个结构时刻都处于变化中。顺序存储是不科学的。<br>链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。<br>数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。<br>链式存储就灵活多了,数据存在哪里不重要,只要有一个指针存放了相应的地址就能找到它了。</p></blockquote><h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2>我们在用示意图表示数据的逻辑结构时,要注意两点：<br>节点：将每一个数据元素看做一个结点,用圆圈表示。<br>连线：元素之间的逻辑关系用结点之间的连线表示,如果这个关系是有方向的,那么用带箭头的连线表示。</li></ul><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>各个计算机,不管是大型机、小型机、PC、平板电脑、PDA,甚至智能手机</p><h2 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h2><p>按照视点的不同,我们把数据结构分为：逻辑结构和物理结构。<br>逻辑结构是面向问题的,而物理结构就是面向计算机的,其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。</p><h3 id="逻辑结构-1"><a href="#逻辑结构-1" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>逻辑结构分为：集合结构、线性结构、树形结构、图形结构。<br>逻辑结构是针对具体问题的,是为了解决某个问题，在对问题理解的基础上,选择一个合适的数据结构表示数据元素之间的逻辑关系。</p><h3 id="物理结构（存储结构）"><a href="#物理结构（存储结构）" class="headerlink" title="物理结构（存储结构）"></a>物理结构（存储结构）</h3><p>数据元素的存储结构形式有两种:顺序存储和链式存储。</p><h2 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h2><p>在C语言中,按照取值的不同,数据类型可以分为两类。<br>原子类型:是不可以再分解的基本类型,包括整型、实型、字符型等。<br>结构类型:由若干个类型组合而成,是可以再分解的。例如,整型数组是由若干整型数据组成的。</p><h1 id="同名"><a href="#同名" class="headerlink" title="同名"></a>同名</h1><p>物理结构、存储结构</p><h1 id="最"><a href="#最" class="headerlink" title="最"></a>最</h1><p>最需要关注的问题是逻辑结构。<br>数据的存储结构应正确反映数据元素之间的逻辑关系,这才是最为关键的。</p><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><p>基本数据类型一览。<br>int()、float()、str()<br><!-- more --><a href="/基本数据类型：整数">整数</a><br><a href="/基本数据类型：浮点数">浮点数</a><br><a href="/基本数据类型：字符">字符</a><br><a href="/基本数据类型：字符串">字符串</a><br><a href="/基本数据类型：布尔变量">布尔变量</a><br><a href="/基本数据类型：枚举">枚举</a><br><a href="/基本数据类型：具名常量">具名常量</a><br><a href="/基本数据类型：数组">数组</a><br><a href="/基本数据类型：自定义变量">自定义变量</a></p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>int: 浮点型或合适的字符串(只能是整数字符串)<br>float: 整型或合适的字符串(只能是纯数字字符串)<br>str:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int(<span class="string">'2'</span>) <span class="comment">#2</span></span><br><span class="line">int(<span class="number">2.14</span>) <span class="comment">#2 </span></span><br><span class="line">int(<span class="string">'2.14'</span>) <span class="comment">#SyntaxError: invalid character in identifier</span></span><br><span class="line">int(a) <span class="comment">#SyntaxError: invalid character in identifier</span></span><br><span class="line"></span><br><span class="line">float(<span class="number">2</span>) <span class="comment">#2.0</span></span><br><span class="line">float(<span class="string">'2.14'</span>) <span class="comment">#2.14</span></span><br><span class="line"></span><br><span class="line">str(<span class="number">2.14</span>) <span class="comment">#'2.14'</span></span><br></pre></td></tr></table></figure></p><h1 id="数据结构导图"><a href="#数据结构导图" class="headerlink" title="数据结构导图"></a>数据结构导图</h1><p>完整性、系统性、针对性<br>掌握问题的本质<br>解题：思路、方法、技巧、能力<br>分析、理解、领会</p><p>数据结构、计算机组成原理、操作系统和计算机网络</p><p>线性表、栈和队列、树、图<br>线性表：顺序存储结构、链式存储结构<br>特殊矩阵的压缩存储<br>二叉树、线索二叉树、二叉排序树、平衡二叉树、森林<br>定义和概念、基本操作、存储结构和实现、特殊、遍历方法、构造、应用、复杂度分析<br>算法：概念、比较、分析和应用<br>查找算法：顺序查找、折半查找法、B-树、散列表<br>排序算法：插入排序、气泡排序、简单选择排序、希尔排序、快速排序、堆排序、二路归并排序和基数排序</p><h1 id="数据结构之线性表"><a href="#数据结构之线性表" class="headerlink" title="数据结构之线性表"></a>数据结构之线性表</h1><!-- more --><h2 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-957dd1bf3b253047.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线性表的定义"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-b5651d8755dc784b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线性表的定义"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-a32d5e37c6c288b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线性结构分类"></p><h2 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-8732b0dcfa33f8fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线性表的基本操作"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-5cf609d3da3bb9fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线性表的基本操作"></p><h2 id="线性表两种存储结构各自的特点及比较"><a href="#线性表两种存储结构各自的特点及比较" class="headerlink" title="线性表两种存储结构各自的特点及比较"></a>线性表两种存储结构各自的特点及比较</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-4d945d62429f9cd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="两种存储结构"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-56758df782fec87f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="比较"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-697d8320970c22df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="比较"></p><p><img src="https://upload-images.jianshu.io/upload_images/6908911-9f2c8facfb0f1f41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据结构、线性结构"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-1e08ecb6e76d2b4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="存储结构比较：效率"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-4a41ce148eb75fb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="存储结构比较：地址连续性"></p><h2 id="线性表的实现：存储结构及应用"><a href="#线性表的实现：存储结构及应用" class="headerlink" title="线性表的实现：存储结构及应用"></a>线性表的实现：存储结构及应用</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-22431cb8b3461932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="存储结构分类"></p><h2 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-ff0261d520374613.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="顺序表结构示意图"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-7b939d020770a0ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="顺序表结构体"></p><h2 id="顺序存储结构的基本操作"><a href="#顺序存储结构的基本操作" class="headerlink" title="顺序存储结构的基本操作"></a>顺序存储结构的基本操作</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-ceea8b7b425d0c4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建清空判断更新"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-e09d194846e7ff4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插入元素"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-038cdb3b411571ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="删除元素"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-6cbbd209cfd493c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="删除元素"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-76b50c91eff4215c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插入和删除"></p><h2 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-1c2d238a8c333fe5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="链式存储结构"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-47c1b9529b3e7703.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="链式存储结构基本操作"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-381c02ed527bc9d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="链式存储结构基本操作"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-080b3d00bc2cdf75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="链式存储结构基本操作"></p><h2 id="其他常见的链式存储结构"><a href="#其他常见的链式存储结构" class="headerlink" title="其他常见的链式存储结构"></a>其他常见的链式存储结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/6908911-8e998b4aa32070d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="其他常见的链式存储结构"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-561212d0e36619f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="其他常见的链式存储结构"><br><img src="https://upload-images.jianshu.io/upload_images/6908911-a16f9d12d9b8e5e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="其他常见的链式存储结构"></p><p>线性表的应用<br>链式存储结构中指针的操作<br>链式存储结构中单链表的应用场合<br>带表头结点的单链表的应用场合<br>循环链表、的应用场合<br>双向循环链表的应用场合</p><p>一堆节点，及若干边，就构成了图。若根据线路是否有方向性，分为有向图、无向图，根据图中是否有环，分为有环图、无环图。如果任意两个节点都有线路连接，则称为强连通图。<br>最短路径。要求给出从某地到另外某地的最便捷走法。</p><ul><li>迪杰斯特拉算法。类似普里姆的「贪婪算法」，从一个极小的「已解决」开始，逐步蚕食，直到将「未解决」吃掉。差别在这回每个节点上都有个数字，代表其到起点的距离，每次都选全部「从已解决到未解决的边」指向的「未解决」节点中，数字最小的一个。比如起点是家，家距离学校500米，家距离市场600米，学校距离公园200米，根据算法，把学校标注500，市场标注600，500小于600，把学校纳入「已解决」，学校进入「已解决」之后，公园也变成了从「已解决」可以到达的「未解决」的节点，用学校的500加200，公园标注为700，与市场的600米相比，600较小，把市场纳入「已解决」。注意，这个步骤，如果是普里姆算法，纳入的是公园而非市场，因为普里姆不存在起点，都连上就ok，只考虑哪条边最短，但迪杰斯特拉有起点，要比较的是「从起点出发直到这里的距离」。</li><li>贝尔曼福特算法。把每个节点赋予一个表示「距离起点有多远」的数值，除了起点外，其他起点一开始都是无穷大，然后依次考察每条边，如果这条边能让指向的节点的数值变小，就将该节点数值变小或收缩，把所有边都考察一遍之后，如果这一遍中执行了「收缩操作」，则再把所有边都考察一遍，直到某一遍完全没收缩为止。上面的例子，比如考察次序是200-500-600，则第一遍200啥用没有，500将学校的+∞变为500，600将市场的+∞变为600，这遍进行了收缩，再来一遍，这回200有用了，将公园的+∞变为700，500和600都没有，这遍也收缩了，再来一遍，200/500/600都没用，完结。<br>如果从每个节点出发，都能到达任意一个节点（强连通），同时图中不存在环，即称为树。树的两个条件，连通和无环。<br>分为若干层。父节点，子节点，叶子节点<br>二叉树：如果树的每个父节点最多只有两个子节点，该树即称为二叉树。<br>二叉排序树。即如果每个根节点数值都比其左子树任意节点数值大，比其右子树的任意节点数值小。最典型用途是二叉查找。在想寻找某个数值时，可以先将该数值与根节点比，如果比根节点大，则去与其右子树根节点比，如果比根节点小，则去与其左子树根节点比，直到找到或比到叶子节点为止。<br>红黑树。《算法》中红黑树的章节，从2-3树开始讲，讲到红黑树。<br>二叉树和红黑树都有着清晰的用于保持树平衡的逻辑。平衡的目的是保持最差情况下的查找程度为logN：以2为底，总节点数的对数。<br>最小生成树。如果树的每条边都有个权值，要求选出总权值最小的一些边，让所有节点都能互相连通，怎么办？这就是「最小生成树」问题。</li><li>普里姆算法。将图划为「已解决」和「未解决」两个部分，一开始「已解决」为空，「未解决」是全集，首先，任选一个点放到「已解决」，然后考察所有从「已解决」连向「未解决」的边，哪条最短，就把该边连向的「未解决」节点纳入「已解决」集合，如此反复，直到全部节点都「已解决」，结果就是最小生成树。</li><li>克鲁斯卡尔算法。一开始，把每个节点视为一个「分量」，寻找全部「连接两个不同分量的边」中最短的一条，将其连接的两个分量合并为一个分量，并重复这一行为，直到全部节点都属于同一分量，结果就是最小生成树。<br>散列表又叫字典。主要用途是查找，通过键(key)查找值(value)。用于查找的数据结构。<br>set，多以map做底层结构。<br>要把键算成一个数字，散列函数就是java里类们都要实现的hashcode方法。<br>两种实现方式<br>链接法。主list装键，比如123，然后1对应一个list，2对应一个list，3对应一个list，把键算出是1之后，就到1对应的list元素里去找元素。显然，1对应的list长度越短，查找时间越短，那似乎主list的键越多越好，比如1到30，那每个子list的长度将变为原长度的十分之一，但主list的键们也不能太多，比如1到30000，那大部分键对应的其实是空，里面一个元素都没有，就浪费空间了，所以要权衡。<br>散列法。不存在次list，把键算成数字后，直接往主list对应的位置存，如果该位置已经被别的元素占了(碰撞)怎么办？则用某种算法，算出一个新数，再尝试往新位置放(再散列)，以此类推。显然，这种方法，主list的长度也很关键，如果太短，则碰撞太多，插入、查找都麻烦，如果太长，又浪费地方。<br>对两种方法，散列函数都非常重要，如果所有元素的散列函数都计算出同一个值，散列表就毫无意义了。<br>FIXME:<br>SAME:</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask语法释义</title>
      <link href="/Flask%E8%AF%AD%E6%B3%95%E9%87%8A%E4%B9%89/"/>
      <url>/Flask%E8%AF%AD%E6%B3%95%E9%87%8A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>按官方样例对flask语句进行详解。<code>参考</code>是用于查询官方文档。<code>备忘录</code>存储命令清单，后续还需添加。<code>文件结构</code>有助于速览。<code>文件依赖</code>给出各个文件的引用关系。<code>flaskr文件逐个详解</code>，对项目内的每条独立命令进行解析。<br><a id="more"></a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://flask.palletsprojects.com/en/1.1.x/quickstart/#a-minimal-application" target="_blank" rel="noopener">https://flask.palletsprojects.com/en/1.1.x/quickstart/#a-minimal-application</a><br><a href="https://flask.palletsprojects.com/en/1.1.x/quickstart/#variable-rules" target="_blank" rel="noopener">https://flask.palletsprojects.com/en/1.1.x/quickstart/#variable-rules</a><br><a href="https://dormousehole.readthedocs.io/en/latest/tutorial/factory.html" target="_blank" rel="noopener">https://dormousehole.readthedocs.io/en/latest/tutorial/factory.html</a><br><a href="https://dormousehole.readthedocs.io/en/latest/tutorial/database.html" target="_blank" rel="noopener">https://dormousehole.readthedocs.io/en/latest/tutorial/database.html</a></p><h1 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, World!'</span></span><br><span class="line"><span class="meta">@app.route('/projects/')</span></span><br><span class="line"><span class="meta">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="meta">@app.route('/user/&lt;username&gt;')</span></span><br><span class="line"><span class="meta">@app.route('/post/&lt;int:post_id&gt;')</span></span><br><span class="line"><span class="meta">@app.route('/path/&lt;path:subpath&gt;')</span></span><br></pre></td></tr></table></figure><h1 id="文件结构概览"><a href="#文件结构概览" class="headerlink" title="文件结构概览"></a>文件结构概览</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">flaskr</span><br><span class="line">    static</span><br><span class="line">        style.css</span><br><span class="line">        table.js</span><br><span class="line">    templates √</span><br><span class="line">        base.html  √ <span class="number">1</span></span><br><span class="line">        auth √</span><br><span class="line">            login.html √ <span class="number">5</span></span><br><span class="line">            register.html √ <span class="number">6</span></span><br><span class="line">        blog √</span><br><span class="line">            blog.html √ <span class="number">2</span></span><br><span class="line">            blogCreate.html √ <span class="number">3</span> </span><br><span class="line">            blogUpdate.html √ <span class="number">4</span></span><br><span class="line">    schema.sql √ <span class="number">7</span></span><br><span class="line">    __init__.py</span><br><span class="line">    auth.py √ <span class="number">9</span></span><br><span class="line">    blog.py</span><br><span class="line">    db.py √ <span class="number">8</span></span><br></pre></td></tr></table></figure><h1 id="文件关系依赖"><a href="#文件关系依赖" class="headerlink" title="文件关系依赖"></a>文件关系依赖</h1><p><code>A⇒B</code>：表示B要调用A文件里的内容。<br>schema.sql⇒db.py⇒auth.py</p><h1 id="flaskr文件逐个解析"><a href="#flaskr文件逐个解析" class="headerlink" title="flaskr文件逐个解析"></a>flaskr文件逐个解析</h1><h2 id="templates文件夹"><a href="#templates文件夹" class="headerlink" title="templates文件夹"></a>templates文件夹</h2><h3 id="base-html文件"><a href="#base-html文件" class="headerlink" title="base.html文件"></a>base.html文件</h3><p><code>&lt;title&gt;{% block title %}{% endblock %}&lt;/title&gt;</code> </p><ul><li>其他文档里，用<code>{% block title %}{% endblock %}</code>括起来的内容都会转化为title。</li><li><code>&lt;title&gt;&lt;/title&gt;</code>：决定其内容是title。 </li><li><code>{% block title %}{% endblock %}</code>：起占位作用。title可以是任意的html标签。</li><li>如果static文件以外的文件里的html元素不用block包裹，则可能无法生效。<br><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='style.css') }}&quot;&gt;</code></li><li>static是flaskr的一级子文件夹。</li><li>style.css是static里的文件。<br><code>&lt;script type=text/javascript src=&quot;{{ url_for('static', filename='table.js') }}&quot;&gt;&lt;/script&gt;</code></li><li>全局script。<br><code>&lt;nav&gt;&lt;/nav&gt;</code></li><li>导航栏。<br><code>&lt;a href=&quot;{{ url_for('blog.shixi')}}&quot;&gt;图集&lt;/a&gt;</code></li><li>blog是flaskr里的py文件。</li><li>shixi是blog.py的一个路径装饰器下的函数。<br><code>{{ g.user['username'] }}</code></li><li>用户名，网页刷新时自动传入。<br><code>{% if g.user %}{% else %}{% endif %}</code></li><li>条件表达式。<strong>是谁的呢</strong>？<br><code>{% if g.user %}</code></li><li>如果已登录。<br><code>&lt;ul&gt;&lt;/ul&gt;</code></li><li><strong>通过css来控制对齐吗？</strong><br><code>&lt;section class=&quot;content&quot;&gt;&lt;/section&gt;</code></li><li>子html的格式定义。<br><code>{% for message in get_flashed_messages() %}</code></li><li><strong>全项目只用到了flask.flash(error)。用于程序出错时，在页面显示错误。error可自定义。</strong><br><code>{{ message }}</code></li><li><strong>flash错误信息。</strong><h3 id="blog"><a href="#blog" class="headerlink" title="blog"></a>blog</h3><h4 id="blog-html"><a href="#blog-html" class="headerlink" title="blog.html"></a>blog.html</h4><code>{% extends 'base.html' %}</code></li><li>继承自base.html。<br><code>&lt;a class=&quot;action&quot; href=&quot;{{ url_for('blog.create') }}&quot;&gt;New&lt;/a&gt;</code></li><li>不传数据，只调用函数。<br><code>&lt;a class=&quot;action&quot; href=&quot;{{ url_for('blog.update', id=post['id']) }}&quot;&gt;编辑&lt;/a&gt;</code></li><li>传数据，且调用函数。<code>id=post[&#39;id&#39;])</code>用来传参。<br><code>{% for post in posts %}</code></li><li>自动传post。post的内容在blog.py里面定义。<br><code>{% if g.user['id'] == post['author_id'] %}</code></li><li>只显示当前登录用户的数据。<br><code>post[&#39;created&#39;].</code></li><li>获取post的键created的值。<br><code>{}</code></li><li>html内的逻辑语句或占位符。<br><code>{{}}</code></li><li>抽取html的元素或属性，括起来用于传递参数。传参用flask的方法，如url_for()、request.form[]。<h4 id="blogCreate-html"><a href="#blogCreate-html" class="headerlink" title="blogCreate.html"></a>blogCreate.html</h4><code>&lt;form method=&quot;post&quot;&gt;&lt;/form&gt;</code></li><li>里面的内容可以传参了。<br><code>&lt;input name=&quot;title&quot; id=&quot;title&quot; value=&quot;{{ request.form['title'] }}&quot; required&gt;</code><br><code>&lt;textarea name=&quot;body&quot; id=&quot;body&quot;&gt;{{ request.form['body'] }}&lt;/textarea&gt;</code><br><code>&lt;input type=&quot;submit&quot; value=&quot;Save&quot;&gt;</code></li><li>html文件的form表单是通过name属性来传值给py文件的。name删掉会报错，id属性删掉了不会。</li><li>双大括号外是否有引号取决于原html<h4 id="blogUpdate-html"><a href="#blogUpdate-html" class="headerlink" title="blogUpdate.html"></a>blogUpdate.html</h4><code>&lt;input name=&quot;title&quot; id=&quot;title&quot; value=&quot;{{ request.form['title'] or post['title'] }}&quot;</code><br><code>&lt;textarea name=&quot;body&quot; id=&quot;body&quot;&gt;{{ request.form['body'] or post['body'] }}&lt;/textarea&gt;</code></li><li>已有数据时自动填充或没有数据。<br><code>&lt;form action=&quot;{{ url_for('blog.delete', id=post['id']) }}&quot; method=&quot;post&quot;&gt;</code></li><li>调用blog里的python函数，并传递参数。<h3 id="auth"><a href="#auth" class="headerlink" title="auth"></a>auth</h3><h4 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h4><code>&lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; required&gt;</code></li><li>type=”password” 会自动加密。加密函数在anth.py中定义。<h4 id="register-html"><a href="#register-html" class="headerlink" title="register.html"></a>register.html</h4>除了标题和submit按钮的值外，其余的和login.html一模一样。<h2 id="schema-sql"><a href="#schema-sql" class="headerlink" title="schema.sql"></a>schema.sql</h2>存放sql语句。用来初始化数据库。<h2 id="db-py"><a href="#db-py" class="headerlink" title="db.py"></a>db.py</h2>太漂亮了，每个函数就几行。<br>lib依赖：<br>click<br>sqlite3<br>flask：current_app、g、.cli.with_appcontext<br>用到的命令：<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">g.db</span><br><span class="line">g.db.row_factory</span><br><span class="line">g.db.executescript(f.read().decode(<span class="string">"utf8"</span>))</span><br><span class="line">g.pop(<span class="string">"db"</span>, <span class="keyword">None</span>)</span><br><span class="line">current_app.config[<span class="string">"DATABASE"</span>]</span><br><span class="line"><span class="keyword">with</span> current_app.open_resource(<span class="string">"schema.sql"</span>) <span class="keyword">as</span> f</span><br><span class="line">sqlite3.Row</span><br><span class="line"><span class="meta">@click.command("init-db")</span></span><br><span class="line">click.echo(<span class="string">"Initialized the database."</span>)</span><br><span class="line">app.teardown_appcontext(close_db)</span><br><span class="line">app.cli.add_command(init_db_command)</span><br><span class="line">get_db()：用于连接数据库</span><br></pre></td></tr></table></figure></li></ul><h2 id="auth-py"><a href="#auth-py" class="headerlink" title="auth.py"></a>auth.py</h2><p>lib依赖：</p><ul><li>functools</li><li>flask：Blueprint、flash、g、redirect、render_template、request、session、url_for</li><li>werkzeug.security：<ul><li>检查密码是否一致：check_password_hash</li><li>加密密码：generate_password_hash</li></ul></li><li><p>flaskr.db ：get_db（用于链接数据库）<br>用到的命令:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bp = Blueprint(<span class="string">"auth"</span>, __name__, url_prefix=<span class="string">"/auth"</span>)</span><br></pre></td></tr></table></figure></li><li><p>auth：蓝图名。</p></li><li><code>__name__</code>。</li><li><p>url_prefix：bp.route的前缀路径。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@functools.wraps(view)</span></span><br></pre></td></tr></table></figure></li><li><p>复制属性。</p><ul><li>《Python 3标准库》，苏金国，201903，P118.</li><li><em>The Python 3 Standard Library by Example.pdf</em>,DougHellmann,2017,P149.<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrapped_view(**kwargs)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如果没登录，就重定向到登录页。</p></li><li><p>否则返回view的参数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@bp.before_app_request</span></span><br></pre></td></tr></table></figure></li><li><p>请求前的装饰器。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.get(<span class="string">"user_id"</span>)</span><br></pre></td></tr></table></figure></li><li><p>获取用ID。</p><ul><li>如果是None，则把None赋值给g.user。</li><li>否则从用户user表中取出id与session.get(“user_id”)相同的那条记录。<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_db().execute(<span class="string">"SELECT * FROM user WHERE id = ?"</span>, (user_id,)).fetchone()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>连接数据库并查询，取一项。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db = get_db()</span><br><span class="line">db.excute(sql).fetchone()</span><br><span class="line">db.commit()</span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">    username = request.form[<span class="string">"username"</span>]</span><br></pre></td></tr></table></figure></li><li><p>解析POST过来的函数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flash(error)</span><br></pre></td></tr></table></figure></li><li><p>检查错误。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">"auth.login"</span>))</span><br></pre></td></tr></table></figure></li><li><p>重定向到auth.py的login函数。form表单数据提交后执行的函数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render_template(<span class="string">"auth/register.html"</span>)</span><br></pre></td></tr></table></figure></li><li><p>含form表单的当前路径显示的网页。<br><a href="https://realpython.com/search?q=flask-by-example" target="_blank" rel="noopener">https://realpython.com/search?q=flask-by-example</a></p><h1 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pallets/flask</span><br><span class="line">cd C:\Users\cj\Documents\GitHub\flask\examples\tutorial\flaskr</span><br><span class="line">py <span class="number">-3</span> -m venv venv</span><br><span class="line">venv/Scripts/activate</span><br><span class="line">flask init-db <span class="comment"># 生成数据库文件</span></span><br><span class="line">set FLASK_APP=flaskr</span><br><span class="line">set FLASK_ENV=development</span><br><span class="line">flask run</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows环境下用Flask开发微信公众号</title>
      <link href="/windows%E4%B8%8B%E7%94%A8Flask%E5%BC%80%E5%8F%91%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
      <url>/windows%E4%B8%8B%E7%94%A8Flask%E5%BC%80%E5%8F%91%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>微信公众号是不错的图床。也可以做做微信机器人。无需穿透工具。<br>目前此项目依托Flask，接入了文本复读机和给图片提供图床的功能。<br>后面会加入批量图片OCR功能。<br><a id="more"></a></p><h2 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h2><p>一台服务器、一个已开通的公众号。<br>服务器Python环境下的第三方库：Flask、xmltodict。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>配置服务器的安全组，打开80端口。</li><li>关闭服务器防火墙。</li><li>将下面的代码保存为wechat.py放在服务器上。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, escape, url_for, request, make_response</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> xmltodict</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/weixin/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wechat</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    args = request.args</span><br><span class="line">    signature = args.get(<span class="string">'signature'</span>)</span><br><span class="line">    timestamp = args.get(<span class="string">'timestamp'</span>)</span><br><span class="line">    nonce = args.get(<span class="string">'nonce'</span>)</span><br><span class="line">    echostr = args.get(<span class="string">'echostr'</span>)</span><br><span class="line">    token = <span class="string">'2019cj'</span> <span class="comment"># 你的token，可自行设置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字典排序</span></span><br><span class="line">    temp = [token, timestamp, nonce]</span><br><span class="line">    temp.sort()</span><br><span class="line">    <span class="comment"># 字符串拼接并进行sha1加密</span></span><br><span class="line">    temp = <span class="string">""</span>.join(temp)</span><br><span class="line">    sig = hashlib.sha1(temp.encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</span></span><br><span class="line">    <span class="keyword">if</span> sig == signature:</span><br><span class="line">        <span class="comment"># 根据请求方式.返回不同的内容 </span></span><br><span class="line">        <span class="comment"># 如果是get方式,代表是验证服务器有效性</span></span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">            <span class="keyword">return</span> echostr</span><br><span class="line">         <span class="comment"># 如果POST方式,代表是微服务器转发给我们的消息</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            resp_data = request.data</span><br><span class="line">            resp_dict = xmltodict.parse(resp_data).get(<span class="string">'xml'</span>)</span><br><span class="line">            ToUserName = resp_dict.get(<span class="string">'ToUserName'</span>)</span><br><span class="line">            FromUserName =resp_dict.get(<span class="string">'FromUserName'</span>)</span><br><span class="line">            MsgType = resp_dict.get(<span class="string">'MsgType'</span>)</span><br><span class="line">            CreateTime = int(time.time())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> MsgType == <span class="string">'text'</span>:</span><br><span class="line">                content = resp_dict.get(<span class="string">'Content'</span>)</span><br><span class="line">            <span class="keyword">elif</span> resp_dict.get(<span class="string">'MsgType'</span>)==<span class="string">'image'</span>:</span><br><span class="line">                content = resp_dict.get(<span class="string">'PicUrl'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                content = <span class="string">''</span></span><br><span class="line">            response = &#123;</span><br><span class="line">                    <span class="string">"ToUserName"</span>: FromUserName,</span><br><span class="line">                    <span class="string">"FromUserName"</span>: ToUserName,</span><br><span class="line">                    <span class="string">"CreateTime"</span>: CreateTime,</span><br><span class="line">                    <span class="string">"MsgType"</span>: <span class="string">"text"</span>,</span><br><span class="line">                    <span class="string">"Content"</span>: content,</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> response:</span><br><span class="line">                response = &#123;<span class="string">"xml"</span>: response&#125;</span><br><span class="line">                response = xmltodict.unparse(response)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                response = <span class="string">''</span></span><br><span class="line">            <span class="keyword">return</span> make_response(response)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'errno'</span>, <span class="number">403</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="comment"># note that we set the 404 status explicitly</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">'404 Error'</span>) </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">'Hello!&lt;br&gt;A world as simple as possible.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">80</span>,debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><ul><li>打开服务器的shell，路径移动到wechat.py所在的最小子文件夹，输入’python wechat.py’</li><li>登录 <a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com/</a> 。点击左下角开发选项下的<code>基本配置</code> 。</li><li>点击下图中的<code>查看</code>，将服务器IP加入其中 。<br><img src="http://mmbiz.qpic.cn/mmbiz_jpg/RpaIDoV1UhZUlJHSk0thxgM2tLenia3M4QrotumGhTuvibFHfRoakGicEheXAia4r7AEcDH2rNXrBG1ib5YsfdZ0nMA/0" alt=""></li><li>点服务器配置的<code>修改配置</code>，提交成功后点<code>启用</code>最终页面效果如下：<br><img src="http://mmbiz.qpic.cn/mmbiz_jpg/RpaIDoV1UhZUlJHSk0thxgM2tLenia3M4uZDVKHm8icSchDwyguL5kT1mQ6fzpDxhGSzdQnwiaTXzI2ot9NnpZndQ/0" alt=""></li></ul><h2 id="消息解析"><a href="#消息解析" class="headerlink" title="消息解析"></a>消息解析</h2><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Receiving_standard_messages.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Receiving_standard_messages.html</a></p><p>不同类型的消息结构对比：</p><table><thead><tr><th>参数</th><th>文本</th><th>图片</th><th>语音</th><th>视频</th><th>短视频</th></tr></thead><tbody><tr><td>ToUserName</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>FromUserName</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>CreateTime</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>MsgType</td><td>text</td><td>image</td><td>voice</td><td>video</td><td>shortvideo</td></tr><tr><td>Content</td><td>√</td><td>×</td><td>×</td><td>×</td><td>×</td></tr><tr><td>MsgId</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>PicUrl</td><td>×</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>MediaId</td><td>×</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Format</td><td>×</td><td>×</td><td>√</td><td>×</td><td>×</td></tr><tr><td>Recognition</td><td>×</td><td>×</td><td>√</td><td>×</td><td>×</td></tr><tr><td>ThumbMediaId</td><td>×</td><td>×</td><td>×</td><td>√</td><td>√</td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://www.jianshu.com/p/29c692811322" target="_blank" rel="noopener">https://www.jianshu.com/p/29c692811322</a></li><li><a href="https://www.cnblogs.com/crazymagic/p/9741459.html" target="_blank" rel="noopener">https://www.cnblogs.com/crazymagic/p/9741459.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/50801694" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/50801694</a><h2 id="错误及修正"><a href="#错误及修正" class="headerlink" title="错误及修正"></a>错误及修正</h2>Unicode-objects must be encoded before hashing⇒hashlib.sha1(temp.encode(‘utf-8’)).hexdigest()</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/Hexo/"/>
      <url>/Hexo/</url>
      
        <content type="html"><![CDATA[<p>记录本站所采用的主题的改动历史。学习和记录hexo的相关配置和操作。<br>主博客用的是Yelee主题，修改了UI，使其比较符合自己的口味。<a href="https://cjql.github.io/en">子博客</a>用的是landscape主题，修改了bannar、浮悬导航及部分其他UI，增加了目录和到顶部按钮。抽离出自定义子博客模块。自此，每个新子博客用一条命令，三五个动作就可以部署成功了，扩展性大幅度增强。<br><a id="more"></a></p><h2 id="累积"><a href="#累积" class="headerlink" title="累积"></a>累积</h2><p>看配色方案：准备冷暖两套六级渐变色<br>首页如何列表显示：不需要了<br>文章宽度如何调宽：检查<br>如何调整文章显示顺序：top和按更新时间显示<br>如何加入分类</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a><br><a href="https://hexo.io/docs/" target="_blank" rel="noopener">https://hexo.io/docs/</a><br><a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting.html</a><br><a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">https://github.com/hexojs/hexo/issues</a><br><a href="https://xuanwo.io/2014/08/14/hexo-usual-problem/" target="_blank" rel="noopener">https://xuanwo.io/2014/08/14/hexo-usual-problem/</a> 常见问题</p><p><a href="http://moxfive.xyz/2015/08/20/blog-building/" target="_blank" rel="noopener">http://moxfive.xyz/2015/08/20/blog-building/</a> moxfive的建站日志<br><a href="http://moxfive.xyz/" target="_blank" rel="noopener">http://moxfive.xyz/</a> moxfive个人网站<br><a href="https://github.com/MOxFIVE" target="_blank" rel="noopener">https://github.com/MOxFIVE</a><br><a href="http://www.w3school.com.cn/cssref/css_colorsfull.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/cssref/css_colorsfull.asp</a> 十六进制值排序颜色<br><a href="https://www.sioe.cn/yingyong/yanse-rgb-16/" target="_blank" rel="noopener">https://www.sioe.cn/yingyong/yanse-rgb-16/</a> 在线颜色转换</p><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><ol><li>检查<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">安装</a></li><li><code>hexo init</code></li><li>将 <a href="https://github.com/cjql/blog" target="_blank" rel="noopener">https://github.com/cjql/blog</a> 克隆并复制覆盖到仓库目录</li><li><code>npm install hexo-deployer-git --save</code></li><li><code>npm install --save hexo-generator-search</code></li><li>在/source/_posts中新增文章</li><li><code>hexo g</code></li><li><code>hexo d</code></li><li><code>hexo s</code></li><li><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检查_config.yml的空格</span><br><span class="line">Template render error</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://hexo.io/docs/troubleshooting#Escape-Contents" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting#Escape-Contents</a><br><a href="https://github.com/hexojs/hexo/issues/2384" target="_blank" rel="noopener">https://github.com/hexojs/hexo/issues/2384</a><br><a href="https://hexo.io/docs/troubleshooting#Template-render-error" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting#Template-render-error</a></p><h2 id="历次修改"><a href="#历次修改" class="headerlink" title="历次修改"></a>历次修改</h2><h3 id="扩展自定义主题及子目录博客快速部署"><a href="#扩展自定义主题及子目录博客快速部署" class="headerlink" title="扩展自定义主题及子目录博客快速部署"></a>扩展自定义主题及子目录博客快速部署</h3><ol><li><p>打开git，在git中输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;subrepo&gt;&amp;&amp; <span class="built_in">cd</span> &lt;subrepo&gt; &amp;&amp;(git <span class="built_in">clone</span> https://github.com/cjql/hexosub;npm install hexo-deployer-git --save)</span><br></pre></td></tr></table></figure></li><li><p>将<code>hexosub文件夹里的_config.yml文件、themes文件夹、scaffolds文件夹</code>复制到<code>&lt;subrepo&gt;文件夹</code>并替换</p></li><li>删除hexosub文件夹</li><li>打开<subrepo>/_config.yml，在里面找到下面几行：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">http://yoursite.com/&lt;subrepo&gt;</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/&lt;subrepo&gt;/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">'git'</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/cjql/&lt;subrepo&gt;</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></subrepo></li></ol><p>将<subrepo>替换为你的子目录对应的GitHub上的仓库的名称。</subrepo></p><h3 id="全局添加到顶部按钮"><a href="#全局添加到顶部按钮" class="headerlink" title="全局添加到顶部按钮"></a>全局添加到顶部按钮</h3><p><a href="http://howiefh.github.io/2014/02/07/hexo-note/" target="_blank" rel="noopener">http://howiefh.github.io/2014/02/07/hexo-note/</a><br><a href="https://www.iconfont.cn/search/index?q=%E7%AE%AD%E5%A4%B4%20%E4%B8%8A" target="_blank" rel="noopener">https://www.iconfont.cn/search/index?q=%E7%AE%AD%E5%A4%B4%20%E4%B8%8A</a></p><h3 id="在子目录里部署GitHub博客"><a href="#在子目录里部署GitHub博客" class="headerlink" title="在子目录里部署GitHub博客"></a>在子目录里部署GitHub博客</h3><p><a href="https://hexo.io/docs/github-pages#Project-page" target="_blank" rel="noopener">https://hexo.io/docs/github-pages#Project-page</a></p><blockquote><p>Step1 在GitHub中准备仓库。</p><ol><li>Create a new repository <code>&lt;reponame&gt;</code></li><li>settings of reponame </li><li>GitHub Pages.Source.master branch</li></ol></blockquote><blockquote><p>step2 获取博客环境文件夹</p><ul><li>方案一 直接复制已部署的博客文件夹，删除_post里面的所有文件。</li><li>方案二 重头再来。在bash里依次输入下面几行命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init my-blog</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>参考连接： <a href="https://www.jianshu.com/p/18356b0a7494" target="_blank" rel="noopener">https://www.jianshu.com/p/18356b0a7494</a></p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h3 id="查看文章更新"><a href="#查看文章更新" class="headerlink" title="查看文章更新"></a>查看文章更新</h3><p><a href="https://github.com/cjql/blog/edit/master/themes/iyelee/layout/_partial/post/copyright.ejs" target="_blank" rel="noopener">themes\iyelee\layout_partial\post\copyright.ejs</a><br>非常值得细看，参考<a href="http://moxfive.xyz/2016/01/10/hexo-post-version-control/" target="_blank" rel="noopener">moxfive</a></p><h3 id="头像和icon"><a href="#头像和icon" class="headerlink" title="头像和icon"></a>头像和icon</h3><p><a href="https://github.com/cjql/blog/tree/master/themes/iyelee/source/resources" target="_blank" rel="noopener">themes\iyelee\source\resources</a></p><h3 id="设置背景图案"><a href="#设置背景图案" class="headerlink" title="设置背景图案"></a>设置背景图案</h3><p><a href="https://github.com/cjql/blog/tree/master/themes/iyelee/source/background" target="_blank" rel="noopener">themes\iyelee\source\background</a></p><h3 id="社区链接图标"><a href="#社区链接图标" class="headerlink" title="社区链接图标"></a>社区链接图标</h3><p><a href="https://github.com/cjql/blog/tree/master/themes/iyelee/source/img" target="_blank" rel="noopener">themes\iyelee\source\img</a></p><h3 id="修改头像背景"><a href="#修改头像背景" class="headerlink" title="修改头像背景"></a>修改头像背景</h3><p><a href="https://github.com/cjql/blog/edit/master/themes/iyelee/source/css/_partial/main.styl" target="_blank" rel="noopener">themes\iyelee\source\css_partial\main.styl</a></p><h3 id="标题字体颜色"><a href="#标题字体颜色" class="headerlink" title="标题字体颜色"></a>标题字体颜色</h3><p><a href="https://github.com/cjql/blog/edit/master/themes/iyelee/source/css/_partial/customise/heading.styl" target="_blank" rel="noopener">themes\iyelee\source\css_partial\customise\heading.styl</a><br>似乎会覆盖themes\iyelee\source\css_extend.styl文件</p><h3 id="标题字体大小"><a href="#标题字体大小" class="headerlink" title="标题字体大小"></a>标题字体大小</h3><p><a href="https://github.com/cjql/blog/edit/master/themes/iyelee/source/css/_extend.styl" target="_blank" rel="noopener">themes\iyelee\source\css_extend.styl</a></p><h3 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h3><p><a href="https://github.com/cjql/blog/edit/master/themes/iyelee/_config.yml" target="_blank" rel="noopener">blog\themes\iyelee_config.yml</a></p><h3 id="站点配置文件"><a href="#站点配置文件" class="headerlink" title="站点配置文件"></a>站点配置文件</h3><p><a href="https://github.com/cjql/blog/edit/master/_config.yml" target="_blank" rel="noopener">blog_config.yml</a><br>2018年12月10日<br>发现一个 bug ，hexo 的 post 里面不能建立一个名为 tags 的文章。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/SQL/"/>
      <url>/SQL/</url>
      
        <content type="html"><![CDATA[<p>SQL知识概览。<br><a id="more"></a></p><h1 id="1-刷题"><a href="#1-刷题" class="headerlink" title="1. 刷题"></a>1. 刷题</h1><p>UPDATE salary<br>SET sex = char(ASCII(SEX)^ASCII(‘m’)^ASCII(‘f’))</p><p>SELECT *<br>FROM cinema<br>WHERE id %2 = 1 and description != ‘boring’ SQL里判断相等用的是一个等号<br>ORDER BY rating DESC 默认的排序为升序</p><p><a href="https://leetcode.com/problems/classes-more-than-5-students/submissions/" target="_blank" rel="noopener">https://leetcode.com/problems/classes-more-than-5-students/submissions/</a><br>SELECT<br>    class<br>FROM<br>    courses<br>GROUP BY<br>    class<br>HAVING<br>    COUNT(DISTINCT student)&gt;=5;</p><p><a href="https://leetcode.com/problems/duplicate-emails/" target="_blank" rel="noopener">https://leetcode.com/problems/duplicate-emails/</a></p><p>SELECT<br>    Email<br>FROM<br>    Person<br>GROUP BY<br>    Email<br>HAVING<br> COUNT(*) &gt; 1 </p><p><a href="https://leetcode.com/problems/combine-two-tables/" target="_blank" rel="noopener">https://leetcode.com/problems/combine-two-tables/</a><br>SELECT FirstName, LastName, City, State<br>FROM Person LEFT JOIN Address USING(PersonId)</p><p><a href="https://leetcode.com/problems/employees-earning-more-than-their-managers/" target="_blank" rel="noopener">https://leetcode.com/problems/employees-earning-more-than-their-managers/</a><br>SELECT E1.Name AS Employee<br>FROM Employee AS E1, Employee AS E2<br>WHERE E1.ManagerId = E2.Id AND E1.Salary &gt; E2.Salary</p><p><a href="https://leetcode.com/problems/customers-who-never-order/description/" target="_blank" rel="noopener">https://leetcode.com/problems/customers-who-never-order/description/</a><br>连接和子查询两种方法(子查询更快leetcode上)<br>到底是哪个ID，不同表中同一名称的列代表了不同的内容</p><p>SELECT Name AS Customers<br>FROM Customers<br>WHERE Id NOT IN (SELECT CustomerId FROM Orders)</p><p>SELECT C1.Name AS Customers<br>FROM Customers C1 LEFT JOIN Orders O1 ON C1.Id=O1.CustomerId<br>WHERE O1.CustomerId IS NULL</p><h1 id="2-概述"><a href="#2-概述" class="headerlink" title="2. 概述"></a>2. 概述</h1><h2 id="2-1-模式"><a href="#2-1-模式" class="headerlink" title="2.1. 模式"></a>2.1. 模式</h2><p>模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。</p><h2 id="2-2-主键"><a href="#2-2-主键" class="headerlink" title="2.2. 主键"></a>2.2. 主键</h2><p>主键的值不允许修改，也不允许复用（不能将已经删除的主键值赋给新数据行的主键）。</p><h2 id="2-3-SQL"><a href="#2-3-SQL" class="headerlink" title="2.3. SQL"></a>2.3. SQL</h2><p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p><h2 id="2-4-大小写"><a href="#2-4-大小写" class="headerlink" title="2.4. 大小写"></a>2.4. 大小写</h2><p>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。</p><p>SQL 支持以下三种注释：</p><h1 id="3-语法"><a href="#3-语法" class="headerlink" title="3. 语法"></a>3. 语法</h1><h2 id="3-1-注释"><a href="#3-1-注释" class="headerlink" title="3.1. 注释"></a>3.1. 注释</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable; <span class="comment">-- 注释</span></span><br><span class="line"><span class="comment">/* 注释1</span></span><br><span class="line"><span class="comment">   注释2 */</span></span><br></pre></td></tr></table></figure><h2 id="3-2-创建数据库与使用数据库"><a href="#3-2-创建数据库与使用数据库" class="headerlink" title="3.2. 创建数据库与使用数据库"></a>3.2. 创建数据库与使用数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">USE</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h2 id="3-3-创建表"><a href="#3-3-创建表" class="headerlink" title="3.3. 创建表"></a>3.3. 创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable (</span><br><span class="line">  <span class="comment"># int 类型，不为空，自增</span></span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="comment"># int 类型，不可为空，默认值为 1，不为空</span></span><br><span class="line">  col1 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">  <span class="comment"># 变长字符串类型，最长为 45 个字符，可以为空</span></span><br><span class="line">  col2 <span class="built_in">VARCHAR</span>(<span class="number">45</span>) <span class="literal">NULL</span>,</span><br><span class="line">  <span class="comment"># 日期类型，可为空</span></span><br><span class="line">  col3 <span class="built_in">DATE</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="comment"># 设置主键为 id</span></span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>));</span><br></pre></td></tr></table></figure><h2 id="3-4-创建新子表"><a href="#3-4-创建新子表" class="headerlink" title="3.4. 创建新子表"></a>3.4. 创建新子表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newtable <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure><h2 id="3-5-增加列"><a href="#3-5-增加列" class="headerlink" title="3.5. 增加列"></a>3.5. 增加列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">col</span> <span class="built_in">CHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h2 id="3-6-删除行"><a href="#3-6-删除行" class="headerlink" title="3.6. 删除行"></a>3.6. 删除行</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 使用更新和删除操作时一定要用 WHERE 子句，不然会把整张表的数据都破坏。可以先用 SELECT 语句进行测试，防止错误删除。</span></span><br></pre></td></tr></table></figure><h2 id="3-7-删除列"><a href="#3-7-删除列" class="headerlink" title="3.7. 删除列"></a>3.7. 删除列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="keyword">col</span>;</span><br></pre></td></tr></table></figure><h2 id="3-8-删除表"><a href="#3-8-删除表" class="headerlink" title="3.8. 删除表"></a>3.8. 删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> mytable;</span><br></pre></td></tr></table></figure><h2 id="3-9-清空表"><a href="#3-9-清空表" class="headerlink" title="3.9. 清空表"></a>3.9. 清空表</h2><p>– TRUNCATE TABLE 可以清空表，也就是删除所有行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> mytable;</span><br></pre></td></tr></table></figure></p><h2 id="3-10-增加行"><a href="#3-10-增加行" class="headerlink" title="3.10. 增加行"></a>3.10. 增加行</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable(col1, col2)</span><br><span class="line"><span class="keyword">VALUES</span>(val1, val2);</span><br></pre></td></tr></table></figure><h2 id="3-11-跨表增加行"><a href="#3-11-跨表增加行" class="headerlink" title="3.11. 跨表增加行"></a>3.11. 跨表增加行</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable1(col1, col2)</span><br><span class="line"><span class="keyword">SELECT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable2;</span><br></pre></td></tr></table></figure><h2 id="3-12-改"><a href="#3-12-改" class="headerlink" title="3.12. 改"></a>3.12. 改</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mytable</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">col</span> = val</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="3-13-DISTINCT"><a href="#3-13-DISTINCT" class="headerlink" title="3.13. DISTINCT"></a>3.13. DISTINCT</h2><p>相同值只会出现一次。它作用于所有列，也就是说所有列的值都相同才算相同。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br><span class="line">LIMIT</span><br></pre></td></tr></table></figure></p><h2 id="3-14-LIMIT"><a href="#3-14-LIMIT" class="headerlink" title="3.14. LIMIT"></a>3.14. LIMIT</h2><p>限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。</p><p>返回前 5 行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>; </span><br><span class="line"><span class="comment">-- 返回前5行</span></span><br><span class="line">LIMIT 0, 5;</span><br><span class="line"><span class="comment">-- 返回前5行</span></span><br><span class="line">LIMIT 2, 3;</span><br><span class="line"><span class="comment">-- 返回第 3 ~ 5 行</span></span><br></pre></td></tr></table></figure></p><h2 id="3-15-ORDER-BY排序"><a href="#3-15-ORDER-BY排序" class="headerlink" title="3.15. ORDER BY排序"></a>3.15. ORDER BY排序</h2><p>ASC ：升序（默认）<br>DESC ：降序<br>可以按多个列进行排序，并且为每个列指定不同的排序方式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> col1 <span class="keyword">DESC</span>, col2 <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure></p><h2 id="3-16-WHERE过滤"><a href="#3-16-WHERE过滤" class="headerlink" title="3.16. WHERE过滤"></a>3.16. WHERE过滤</h2><p>不进行过滤的数据非常大，导致通过网络传输了多余的数据，从而浪费了网络带宽。因此尽量使用 SQL 语句来过滤不必要的数据，而不是传输所有的数据到客户端中然后由客户端进行过滤。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></p><p>下表显示了 WHERE 子句可用的操作符</p><p>操作符    说明<br>=    等于<br>&lt;    小于</p><blockquote><p>   大于<br>&lt;&gt; !=    不等于<br>&lt;= !&gt;    小于等于<br>= !&lt;    大于等于<br>BETWEEN    在两个值之间<br>IS NULL    为 NULL 值<br>应该注意到，NULL 与 0、空字符串都不同。</p></blockquote><p>AND 和 OR 用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用 () 来决定优先级，使得优先级关系更清晰。</p><p>IN 操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。</p><p>NOT 操作符用于否定一个条件。</p><h2 id="3-17-通配符"><a href="#3-17-通配符" class="headerlink" title="3.17. 通配符"></a>3.17. 通配符</h2><p>通配符也是用在过滤语句中，但它只能用于文本字段。</p><p>% 匹配 &gt;=0 个任意字符；</p><p>_ 匹配 ==1 个任意字符；</p><p>[ ] 可以匹配集合内的字符，例如 [ab] 将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。</p><p>使用 Like 来进行通配符匹配。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> <span class="keyword">LIKE</span> <span class="string">'[^AB]%'</span>; <span class="comment">-- 不以 A 和 B 开头的任意文本</span></span><br></pre></td></tr></table></figure></p><p>不要滥用通配符，通配符位于开头处匹配会非常慢。</p><h2 id="3-18-计算字段"><a href="#3-18-计算字段" class="headerlink" title="3.18. 计算字段"></a>3.18. 计算字段</h2><p>在数据库服务器上完成数据的转换和格式化的工作往往比客户端上快得多，并且转换和格式化后的数据量更少的话可以减少网络通信量。</p><p>计算字段通常需要使用 AS 来取别名，否则输出的时候字段名为计算表达式。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1 * col2 <span class="keyword">AS</span> <span class="keyword">alias</span></span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="keyword">TRIM</span>(col1), <span class="string">'('</span>, <span class="keyword">TRIM</span>(col2), <span class="string">')'</span>) <span class="keyword">AS</span> concat_col</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br><span class="line"><span class="comment">-- CONCAT() 用于连接两个字段。</span></span><br><span class="line"><span class="comment">-- TRIM() 可以去除首尾空格。许多数据库会使用空格把值填充为列宽，因此连接的结果会出现一些不必要的空格。</span></span><br></pre></td></tr></table></figure><h2 id="3-19-函数"><a href="#3-19-函数" class="headerlink" title="3.19. 函数"></a>3.19. 函数</h2><p>各个 DBMS 的函数都是不相同的，因此不可移植，以下主要是 MySQL 的函数。</p><p>汇总<br>函 数    说 明<br>AVG()    返回某列的平均值<br>COUNT()    返回某列的行数<br>MAX()    返回某列的最大值<br>MIN()    返回某列的最小值<br>SUM()    返回某列值之和<br>AVG() 会忽略 NULL 行。</p><p>使用 DISTINCT 可以汇总不同的值。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(<span class="keyword">DISTINCT</span> col1) <span class="keyword">AS</span> avg_col</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure></p><p>文本处理<br>函数    说明<br>LEFT()    左边的字符<br>RIGHT()    右边的字符<br>LOWER()    转换为小写字符<br>UPPER()    转换为大写字符<br>LTRIM()    去除左边的空格<br>RTRIM()    去除右边的空格<br>LENGTH()    长度<br>SOUNDEX()    转换为语音值<br>其中， SOUNDEX() 可以将一个字符串转换为描述其语音表示的字母数字模式。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">SOUNDEX</span>(col1) = <span class="keyword">SOUNDEX</span>(<span class="string">'apple'</span>)</span><br></pre></td></tr></table></figure></p><p>日期和时间处理<br>日期格式：YYYY-MM-DD<br>时间格式：HH:MM:SS<br>函 数    说 明<br>ADDDATE()    增加一个日期（天、周等）<br>ADDTIME()    增加一个时间（时、分等）<br>CURDATE()    返回当前日期<br>CURTIME()    返回当前时间<br>DATE()    返回日期时间的日期部分<br>DATEDIFF()    计算两个日期之差<br>DATE_ADD()    高度灵活的日期运算函数<br>DATE_FORMAT()    返回一个格式化的日期或时间串<br>DAY()    返回一个日期的天数部分<br>DAYOFWEEK()    对于一个日期，返回对应的星期几<br>HOUR()    返回一个时间的小时部分<br>MINUTE()    返回一个时间的分钟部分<br>MONTH()    返回一个日期的月份部分<br>NOW()    返回当前日期和时间<br>SECOND()    返回一个时间的秒部分<br>TIME()    返回一个日期时间的时间部分<br>YEAR()    返回一个日期的年份部分<br>mysql&gt; SELECT NOW();<br>2018-4-14 20:25:11<br>数值处理<br>函数    说明<br>SIN()    正弦<br>COS()    余弦<br>TAN()    正切<br>ABS()    绝对值<br>SQRT()    平方根<br>MOD()    余数<br>EXP()    指数<br>PI()    圆周率<br>RAND()    随机数</p><h2 id="3-20-分组GROUP-BY"><a href="#3-20-分组GROUP-BY" class="headerlink" title="3.20. 分组GROUP BY"></a>3.20. 分组GROUP BY</h2><p>把具有相同的数据值的行放在同一组中。</p><p>可以对同一分组数据使用汇总函数进行处理，例如求分组数据的平均值等。</p><p>指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">col</span>;</span><br></pre></td></tr></table></figure></p><p>GROUP BY 自动按分组字段进行排序，ORDER BY 也可以按汇总字段来进行排序。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">num</span>;</span><br></pre></td></tr></table></figure></p><p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">num</span> &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>分组规定：</p><p>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；<br>除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；<br>NULL 的行会单独分为一组；<br>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。</p><h2 id="3-21-子查询"><a href="#3-21-子查询" class="headerlink" title="3.21. 子查询"></a>3.21. 子查询</h2><p>子查询中只能返回一个字段的数据。</p><p>可以将子查询的结果作为 WHRER 语句的过滤条件：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable1</span><br><span class="line"><span class="keyword">WHERE</span> col1 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> col2</span><br><span class="line">               <span class="keyword">FROM</span> mytable2);</span><br></pre></td></tr></table></figure></p><p>下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*)</span><br><span class="line">                   <span class="keyword">FROM</span> Orders</span><br><span class="line">                   <span class="keyword">WHERE</span> Orders.cust_id = Customers.cust_id)</span><br><span class="line">                   <span class="keyword">AS</span> orders_num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure></p><h2 id="3-22-连接"><a href="#3-22-连接" class="headerlink" title="3.22. 连接"></a>3.22. 连接</h2><p>连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 WHERE。</p><p>连接可以替换子查询，并且比子查询的效率一般会更快。</p><p>可以用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。</p><p>内连接<br>内连接又称等值连接，使用 INNER JOIN 关键字。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.key = B.key;</span><br></pre></td></tr></table></figure></p><p>可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A, tableb <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">WHERE</span> A.key = B.key;</span><br></pre></td></tr></table></figure></p><p>自连接<br>自连接可以看成内连接的一种，只是连接的表是自身而已。</p><p>一张员工表，包含员工姓名和员工所属部门，要找出与 Jim 处在同一部门的所有员工姓名。</p><p>子查询版本<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span> employee</span><br><span class="line"><span class="keyword">WHERE</span> department = (</span><br><span class="line">      <span class="keyword">SELECT</span> department</span><br><span class="line">      <span class="keyword">FROM</span> employee</span><br><span class="line">      <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">"Jim"</span>);</span><br></pre></td></tr></table></figure></p><p>自连接版本<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.name</span><br><span class="line"><span class="keyword">FROM</span> employee <span class="keyword">AS</span> e1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e2</span><br><span class="line"><span class="keyword">ON</span> e1.department = e2.department</span><br><span class="line">      <span class="keyword">AND</span> e2.name = <span class="string">"Jim"</span>;</span><br></pre></td></tr></table></figure></p><p>自然连接<br>自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。</p><p>内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B;</span><br></pre></td></tr></table></figure></p><p>外连接<br>外连接保留了没有关联的那些行。分为左外连接，右外连接以及全外连接，左外连接就是保留左表没有关联的行。</p><p>检索所有顾客的订单信息，包括还没有订单信息的顾客。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id = Orders.cust_id;</span><br></pre></td></tr></table></figure></p><p>customers 表：</p><p>cust_id    cust_name<br>1    a<br>2    b<br>3    c<br>orders 表：</p><p>order_id    cust_id<br>1    1<br>2    1<br>3    3<br>4    3<br>结果：</p><p>cust_id    cust_name    order_id<br>1    a    1<br>1    a    2<br>3    c    3<br>3    c    4<br>2    b    Null</p><h2 id="3-23-组合查询"><a href="#3-23-组合查询" class="headerlink" title="3.23. 组合查询"></a>3.23. 组合查询</h2><p>使用 UNION 来组合两个查询，如果第一个查询返回 M 行，第二个查询返回 N 行，那么组合查询的结果一般为 M+N 行。</p><p>每个查询必须包含相同的列、表达式和聚集函数。</p><p>默认会去除相同行，如果需要保留相同行，使用 UNION ALL。</p><p>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> =<span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><h2 id="3-24-视图"><a href="#3-24-视图" class="headerlink" title="3.24. 视图"></a>3.24. 视图</h2><p>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。</p><p>对视图的操作和对普通表的操作一样。</p><p>视图具有如下好处：</p><p>简化复杂的 SQL 操作，比如复杂的连接；<br>只使用实际表的一部分数据；<br>通过只给用户访问视图的权限，保证数据的安全性；<br>更改数据格式和表示。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myview <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">Concat</span>(col1, col2) <span class="keyword">AS</span> concat_col, col3*col4 <span class="keyword">AS</span> compute_col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col5 = val;</span><br></pre></td></tr></table></figure></p><h2 id="3-25-存储过程"><a href="#3-25-存储过程" class="headerlink" title="3.25. 存储过程"></a>3.25. 存储过程</h2><p>存储过程可以看成是对一系列 SQL 操作的批处理。</p><p>使用存储过程的好处：</p><p>代码封装，保证了一定的安全性；<br>代码复用；<br>由于是预先编译，因此具有很高的性能。<br>命令行中创建存储过程需要自定义分隔符，因为命令行是以 ; 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。</p><p>包含 in、out 和 inout 三种参数。</p><p>给变量赋值都需要用 select into 语句。</p><p>每次只能给一个变量赋值，不支持集合的操作。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myprocedure( <span class="keyword">out</span> ret <span class="built_in">int</span> )</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> y <span class="built_in">int</span>;</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">sum</span>(col1)</span><br><span class="line">        <span class="keyword">from</span> mytable</span><br><span class="line">        <span class="keyword">into</span> y;</span><br><span class="line">        <span class="keyword">select</span> y*y <span class="keyword">into</span> ret;</span><br><span class="line">    <span class="keyword">end</span> //</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> myprocedure(@ret);</span><br><span class="line"><span class="keyword">select</span> @ret;</span><br></pre></td></tr></table></figure></p><h2 id="3-26-游标"><a href="#3-26-游标" class="headerlink" title="3.26. 游标"></a>3.26. 游标</h2><p>在存储过程中使用游标可以对一个结果集进行移动遍历。</p><p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</p><p>使用游标的四个步骤：</p><p>声明游标，这个过程没有实际检索出数据；<br>打开游标；<br>取出数据；<br>关闭游标；<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myprocedure(<span class="keyword">out</span> ret <span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> done <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">declare</span> mycursor <span class="keyword">cursor</span> <span class="keyword">for</span></span><br><span class="line">        <span class="keyword">select</span> col1 <span class="keyword">from</span> mytable;</span><br><span class="line">        <span class="comment"># 定义了一个 continue handler，当 sqlstate '02000' 这个条件出现时，会执行 set done = 1</span></span><br><span class="line">        <span class="keyword">declare</span> continue <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">'02000'</span> <span class="keyword">set</span> done = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        open mycursor;</span><br><span class="line"></span><br><span class="line">        repeat</span><br><span class="line">            fetch mycursor into ret;</span><br><span class="line">            <span class="keyword">select</span> ret;</span><br><span class="line">        until done <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line"></span><br><span class="line">        close mycursor;</span><br><span class="line">    <span class="keyword">end</span> //</span><br><span class="line"> delimiter ;</span><br></pre></td></tr></table></figure></p><h2 id="3-27-触发器"><a href="#3-27-触发器" class="headerlink" title="3.27. 触发器"></a>3.27. 触发器</h2><p>触发器会在某个表执行以下语句时而自动执行：DELETE、INSERT、UPDATE。</p><p>触发器必须指定在语句执行之前还是之后自动执行，之前执行使用 BEFORE 关键字，之后执行使用 AFTER 关键字。BEFORE 用于数据验证和净化，AFTER 用于审计跟踪，将修改记录到另外一张表中。</p><p>INSERT 触发器包含一个名为 NEW 的虚拟表。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> mytrigger <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> mytable</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">SELECT</span> NEW.col <span class="keyword">into</span> @<span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">result</span>; <span class="comment">-- 获取结果</span></span><br></pre></td></tr></table></figure></p><p>DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。</p><p>UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表，其中 NEW 是可以被修改的，而 OLD 是只读的。</p><p>MySQL 不允许在触发器中使用 CALL 语句，也就是不能调用存储过程。</p><h2 id="3-28-事务管理"><a href="#3-28-事务管理" class="headerlink" title="3.28. 事务管理"></a>3.28. 事务管理</h2><p>基本术语：</p><p>事务（transaction）指一组 SQL 语句；<br>回退（rollback）指撤销指定 SQL 语句的过程；<br>提交（commit）指将未存储的 SQL 语句结果写入数据库表；<br>保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。<br>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。</p><p>MySQL 的事务提交默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。</p><p>设置 autocommit 为 0 可以取消自动提交；autocommit 标记是针对每个连接而不是针对服务器的。</p><p>如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处；如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span></span><br><span class="line">// ...</span><br><span class="line"><span class="keyword">SAVEPOINT</span> delete1</span><br><span class="line">// ...</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> delete1</span><br><span class="line">// ...</span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></table></figure></p><h2 id="3-29-字符集"><a href="#3-29-字符集" class="headerlink" title="3.29. 字符集"></a>3.29. 字符集</h2><p>基本术语：</p><p>字符集为字母和符号的集合；<br>编码为某个字符集成员的内部表示；<br>校对字符指定如何比较，主要用于排序和分组。<br>除了给表指定字符集和校对外，也可以给列指定：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(<span class="keyword">col</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin <span class="keyword">COLLATE</span> latin1_general_ci )</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> hebrew <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure></p><p>可以在排序、分组时指定校对：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">col</span> <span class="keyword">COLLATE</span> latin1_general_ci;</span><br></pre></td></tr></table></figure></p><h2 id="3-30-权限管理"><a href="#3-30-权限管理" class="headerlink" title="3.30. 权限管理"></a>3.30. 权限管理</h2><p>MySQL 的账户信息保存在 mysql 这个数据库中。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></p><h3 id="3-30-1-创建账户"><a href="#3-30-1-创建账户" class="headerlink" title="3.30.1. 创建账户"></a>3.30.1. 创建账户</h3><p>新创建的账户没有任何权限。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> myuser <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mypassword'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="3-30-2-修改账户名"><a href="#3-30-2-修改账户名" class="headerlink" title="3.30.2. 修改账户名"></a>3.30.2. 修改账户名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> myuser <span class="keyword">TO</span> newuser;</span><br></pre></td></tr></table></figure><h3 id="3-30-3-删除账户"><a href="#3-30-3-删除账户" class="headerlink" title="3.30.3. 删除账户"></a>3.30.3. 删除账户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> myuser;</span><br></pre></td></tr></table></figure><h3 id="3-30-4-查看权限"><a href="#3-30-4-查看权限" class="headerlink" title="3.30.4. 查看权限"></a>3.30.4. 查看权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> myuser;</span><br></pre></td></tr></table></figure><h3 id="3-30-5-授予权限"><a href="#3-30-5-授予权限" class="headerlink" title="3.30.5. 授予权限"></a>3.30.5. 授予权限</h3><p>账户用 username@host 的形式定义，username@% 使用的是默认主机名。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> mydatabase.* <span class="keyword">TO</span> myuser;</span><br></pre></td></tr></table></figure></p><h3 id="3-30-6-删除权限"><a href="#3-30-6-删除权限" class="headerlink" title="3.30.6. 删除权限"></a>3.30.6. 删除权限</h3><p>GRANT 和 REVOKE 可在几个层次上控制访问权限：</p><p>整个服务器，使用 GRANT ALL 和 REVOKE ALL；<br>整个数据库，使用 ON database.<em>；<br>特定的表，使用 ON database.table；<br>特定的列；<br>特定的存储过程。<br>REVOKE SELECT, INSERT ON mydatabase.</em> FROM myuser;</p><h3 id="3-30-7-更改密码"><a href="#3-30-7-更改密码" class="headerlink" title="3.30.7. 更改密码"></a>3.30.7. 更改密码</h3><p>必须使用 Password() 函数进行加密。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWROD <span class="keyword">FOR</span> myuser = <span class="keyword">Password</span>(<span class="string">'new_password'</span>);</span><br></pre></td></tr></table></figure></p><h1 id="4-牛客"><a href="#4-牛客" class="headerlink" title="4. 牛客"></a>4. 牛客</h1><p>常见的sql优化技巧，不正确的是？<em>乐信笔试题|c5c977fbc9e0453486e244c5a88a8678<br>关于SQL优化，哪些是正确的？</em>唯品会笔试题|be873ae5acd448b18a5045677c87c84c            </p><p>写出下面2个PHP操作Mysql函数的作用及区别。_微博笔试题|db95632130dc414e9af675444b04ce87            </p><p>现有Mysql数据库，写Spring + Hibernate_|7633c7c52a8447fda1d76e83d77070aa<br>mysql数据库，game_order表表结构如下，下面哪些<em>|7d2af51194e14e708c71c855f5f28a36<br>Linux下MySQL数据库安装方式分为[$##$]、[$#</em>搜狐畅游笔试题|0b2b724678fc408f959e5469a05517d2<br>PHP只能跟MySQL数据库进行联合编程说法是否正确()<em>|33b69ee0d53d4bda8cb28ab8129e117d<br>在配置APP连接MySQL数据库的时候，字符串&ldquo;</em>搜狐畅游笔试题|38b46989ee664be2a91fe0464da47c1d<br>MySQL数据库提供了四种级别的事务隔离，其中默认的隔离级别<em>搜狐畅游笔试题|4bd14ee6743841e29d5c899a00ccdf93<br>PHP只能跟MySQL数据库进行联合编程说法是否正确()</em>|7856c6be6c8c41b4826bcc6ea70ce334<br>MySQL数据库中可使用（）语句增加新用户并限制用户访问数据<em>|827ef567d596425e98ff86cf28ad4b9b<br>MySQL数据库查询操作中可使用（）子句指定查询结果的排序规</em>|98c2182584e0499db2dd2c3e0e7241fd<br>如下哪些日志可以记录到MySQL数据库的所有更新操作<em>搜狐畅游笔试题|a2ce8dcfcc57434bb16b4e9e0ad75701<br>假设MySQL数据库</em>搜狗笔试题|aeff9b71bc4f45b3987a82fab508e852            </p><p>Mysql查询时，只有满足联接条件的记录才包含在查询结果，这<em>第四范式笔试题|6a383d264d1c42029b7d3ffd3fc7bdcd<br>Mysql查询时，只有满足联接条件的记录才包含在查询结果，这</em>摩拜笔试题|ec152f2aa7ce485cb1e9772dfef2b307<br>在SQL查询时，如果需要去掉查询结果中的重复组，应使用____|0ff9a20f04a4458eb108af559782bd78<br>在SQL查询时，使用WHERE子句指出的<em>|2af4e50a36894d9f8e4ffadfb5ecbd6a<br>PDO通过执行SQL查询与数据库进行交互，可以分为多种不同的</em>|86cdf39c251149c3ba207219391e76c8<br>在SQL查询中使用WHERE子句指出的是（）。_|9a65de6327df4a4288acc151d4e01a2b<br>SQL查询语句中where、group by、having <em>摩拜笔试题|cd7d70aea97b450593f1263defe18a92<br>哪种不是SQL查询的联接算法</em>招商银行信用卡中心笔试题|d7e33038eea04c88bd34ff6d49a4f108<br>在SQL查询时，如果需要去掉查询结果中的重复组，应使用（ ）_|d93cdbf234094c619a9259f776817dd5            </p><p>Mysql sql注入中使用延时注入时常用的语句是（）<em>|04139bac8c024c0a970add8504e5e028<br>Mysql sql注入中使用延时注入时常用的语句是（）</em>小米笔试题|1f9d81d3747a43af9ff952584bce3010<br>分类列举sql注入常用判断方法?_|c3593d010fa745c88c84a830bfbe7cd8            </p><p>使用sql语句查询class列不是NULL的记录，WHERE_快手笔试题|a3140cd056dd4262a539f73396e28765<br>写出以下sql语句。<em>网易笔试题|a9889965d6fd40aebe8f1865b965f072<br>写出符合条件的sql语句。</em>腾讯笔试题|bcd7133020df49eeab0c656718a876d7<br>在SQL语句中，与表达式&quot;仓库号&nbsp;NOT_搜狐畅游笔试题|254487b011c64320abeced5d56239201<br>已知表T1中有2行数据，T2中有3行数据，执行SQL语句,&amp;<em>摩拜笔试题|2a35d7a4d6b24d43a3b32a27ef92418c<br>SQL语句执行的顺序是</em>网易笔试题|2bee77aff9c94b2dae43e493cf3df319<br>下述SQL语句中，起修改表中数据作用的命令动词是（）<em>|2e2ddd5123794a8aa27a18f64484dd88<br>对于满足SQL92标准的SQL语句：SELECT foo,c</em>招商银行信用卡中心笔试题|2f0a9189f17847a5af6f17dd7ab62b59<br>下面关于SQL语句”SELECT&nbsp;<em>&nbsp;F_搜狐畅游笔试题|487036093b2248138a1bd57c4e56682c<br>&nbsp;SQL语句性能分析的关键字是什么？<em>腾讯笔试题|5d5b782a1a484af4ac3ab07e437d468f<br>ADO.net访问SQL server数据库时，在SQL语句</em>|5f2c5766357c4d48988d319288f74dc7<br>在SQL语句中，用“%”表示任何一个字符 ，这种说法正确吗(<em>|6243c96f1d034d8cb12033e1b8aab0f9<br>下列哪一个Transact-SQL语句能够实现收回user2</em>|6300f4878d83446db352c9fb46641841<br>SQL语句中，删除一个表的命令是()。<em>猿辅导笔试题|6b1b19602fbe423b82b59d87c7cdfd79<br>SQL语句中，可以查看到学生信息表中，学生姓名的SQL语句为</em>小米笔试题|6fdd1a3594824233aaee3e2909ac5dfb<br>对于满足SQL92标准的SQL语句：SELECT foo,c_腾讯笔试题|7abd397a22054bbb99e2b3982ff81d01<br>下列SQL语句中，修改表结构的是（）_|7f5a506326c944ef95f6b9b62bd44708<br>对于SQL语句select </em> from t where a_网易笔试题|a9755786616e4049aa3d3041f3a99c41<br>下列SQL语句可以将查询结果降序排列的是<em>|b07884418c3448fd8e91b097eca8a259<br>为何SQL语句需要使用大写字母？</em>|b6b2ce1ae18c48a99047e61a70592a67<br>用SQL语句建立表时将属性定义为主关键字，应使用短语( )<em>第四范式笔试题|ba8e4dfd1d3f4b1bbc0bd74f727195ad<br>SQL语句中与Having子句同时使用的语句是？（）</em>顺丰科技笔试题|d35fee69aefa4ff6af06fe4a74706db7<br>下列两条SQL语句的检索结果为何不同？<em>华为笔试题|d3980009a1094d2a88fc4270820a665b<br>使用Transact-SQL语句拒绝user4查询视图MyV</em>|ddcbfe05f1d0477c9a56d7124759c2f0            </p><p>以下hive sql语法正确的是<em>网易笔试题|185a862dc74e42d49f6937e3cd4fef42<br>关于isql语法分析器的常用参数，下面说法正确的有：（&amp;nb</em>|7895f6e3d3d94dd09b606f2db01ba615<br>以下hive sql语法正确的是<em>网易笔试题|f4476d751a4c41e6ba27730163641faa<br>增加数据库一列的SQL语法是什么？</em>人人网笔试题|91f0508367e34d318bcca2786823dccf            </p><p>SQL语言具有的功能是　( )_|047aec571bea474896313c3e7689848e<br>在SQL语言中授权的操作是通过<strong>___</strong>语句实现的。<em>|0b73d04ce6e6491d848a950ee6539eec<br>在SQL语言的SELECT语句中，能实现选择操作的是：</em>|1301822371f94a818a44012ad07775cf<br>SQL语言是（）的语言，易学习。<em>|18414cc2a1cf4207a43c14980b4468e0<br>SQL语言中，用于授权的语句是()。 &lt;div&gt;</em>|18d8039d8cd84276b7121129d13a3f76<br>在SQL语言中，子查询是&lt;/span&gt;<em>|217ddfe703754efb909d747bbc378151<br>SQL语言的功能包括()、()、()、()。</em>|58d3e034df4748fdbdd99672a65e0a28<br>在SQL语言的SELECT查询中，需要去掉查询结果中的重复记<em>|6b5dc36d8553441382647b2683262ff3<br>SQL语言的关键字包括SELECT、INSERT、UPDAT</em>百度笔试题|6d7c074de2644e118845dacebd95a042<br>在SQL语言的Select语句中实现选择运算的子句是（ ）。<em>|6fa9dbb6f740449e8d7334a8680d782a<br>标准SQL语言集数据查询、数据操作、数据定义和数据控制功能于</em>|7697bc2262e444aabf3dce7ab4e0ecf7<br>SQL语言具有（       ）的功能。<em>|a3c2b0afb9134f06bfc62b4c8e3118ec<br>SQL语言集数据查询、数据操纵、数据定义和数据控制功能于一体</em>|a6ceec080b7948359a0375efa7ea879e<br>标准SQL语言集数据查询、数据操作、数据定义和数据控制功能于<em>|a8522e7b766c445596ebfb72bf31836a<br>SQL语言允许使用通配符进行字符串匹配的操作,其中&amp;lsqu</em>摩拜笔试题|aca0f342bb9e46c7ae576e90f94db787<br>SQL语言中删除一个表的指令是<em>快手笔试题|b15436e05f354461af026c66f209a2a6<br>SQL语言共分为三大类（亦有说法分为四大类），那么不属于数据</em>顺丰科技笔试题|b2ff34be83de4dc4a81f3902c25ef9f5<br>在SQL语言的SELECT语句中，对应关系代数中“投影”运算<em>|b962888aa0644610bd05c3366aec5ee7<br>在数据库的SQL语言开发中，下述关于Union和Union&amp;</em>唯品会笔试题|bd4453be5de94445916bae4aa8965666<br>SQL语言集数据查询、数据操纵、数据定义和数据控制功能于一体<em>腾讯笔试题|ccecce1c5f1a48b99302dfc58b2c4c66<br>在SQL语言中，子查询是（&nbsp;&nbsp;&amp;nbsp</em>摩拜笔试题|e849c014eeb5449fb4c45578ec3cd2ab<br>&nbsp;SQL语言中删除一个表的指令是（）_腾讯笔试题|efb2f754ab9a4601a7dd9fb184809983            </p><p>使用SQLServer数据库系统时如何减少事务的死锁<em>招商银行信用卡中心笔试题|9f9ca757f11d489ebe4af3847f507135<br>1&nbsp;[问答]简单介绍SQLite数据库。</em>|91a9a0a75013423788e1acd8a25c7490            </p><p>mysql主从复制？_|85b17fb014eb46ffb653465681af1775                     </p><p>现有Mysql数据库，写Spring + Hibernate_|7633c7c52a8447fda1d76e83d77070aa<br>Linux下MySQL数据库安装方式分为[$##$]、[$#<em>搜狐畅游笔试题|0b2b724678fc408f959e5469a05517d2<br>PHP只能跟MySQL数据库进行联合编程说法是否正确()</em>|33b69ee0d53d4bda8cb28ab8129e117d<br>在配置APP连接MySQL数据库的时候，字符串&ldquo;<em>搜狐畅游笔试题|38b46989ee664be2a91fe0464da47c1d<br>MySQL数据库提供了四种级别的事务隔离，其中默认的隔离级别</em>搜狐畅游笔试题|4bd14ee6743841e29d5c899a00ccdf93<br>PHP只能跟MySQL数据库进行联合编程说法是否正确()<em>|7856c6be6c8c41b4826bcc6ea70ce334<br>MySQL数据库中可使用（）语句增加新用户并限制用户访问数据</em>|827ef567d596425e98ff86cf28ad4b9b<br>MySQL数据库查询操作中可使用（）子句指定查询结果的排序规<em>|98c2182584e0499db2dd2c3e0e7241fd<br>如下哪些日志可以记录到MySQL数据库的所有更新操作</em>搜狐畅游笔试题|a2ce8dcfcc57434bb16b4e9e0ad75701<br>假设MySQL数据库_搜狗笔试题|aeff9b71bc4f45b3987a82fab508e852<br>mysql数据库，game_order表表结构如下，下面哪些_|7d2af51194e14e708c71c855f5f28a36            </p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python知识结构</title>
      <link href="/Python%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/"/>
      <url>/Python%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>Python知识大全。<br><a href="https://github.com/daacheng/PythonBasic" target="_blank" rel="noopener">https://github.com/daacheng/PythonBasic</a> 平时工作中常用的Python零碎知识总结，爬虫学习总结与练习，Python数据分析学习总结<br><a href="https://github.com/looly/python-basic" target="_blank" rel="noopener">https://github.com/looly/python-basic</a> 老齐（qiwsir）的Python基础教程<br><a href="https://github.com/MiracleYoung/You-are-Pythonista" target="_blank" rel="noopener">https://github.com/MiracleYoung/You-are-Pythonista</a><br><a href="https://github.com/Prodesire/Python-Guide-CN" target="_blank" rel="noopener">https://github.com/Prodesire/Python-Guide-CN</a> Python最佳实践指南<br>基础语法、控制流、函数、模块、文件操作、异常处理、面向对象编程<br><a id="more"></a></p><h1 id="1-程序交互"><a href="#1-程序交互" class="headerlink" title="1. 程序交互"></a>1. 程序交互</h1><p>input():带提示语的input。name=input(‘Please enter your name:’) 把输入以字符串的形式保存在name里<br>print():print<code>多项</code>、print的<code>%</code>格式化占位符、print的<code>format</code>形式 #可以接收多参<br>三引号：原样输出<br>转意符号<br>学习，思考，应用，校正。人做事情，都需要有个反馈，反馈的周期越久，感觉上就越困难。很多大事情，都是由一个个小事务重复或迭代而成，每个小事务中，包含了反馈和校正。学了什么，启示是什么，和其它知识的联系是什么<br><!-- more --><br>r:优先级最高<br>\:把字母转义为特殊字符。防止引号表示字符串。</p><p>\n:制表符<br>\t:换行符<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'a\nb'</span>)</span><br><span class="line">print(<span class="string">r'a\nb'</span>)</span><br><span class="line">print(<span class="string">'I\'m OK'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># b</span></span><br><span class="line"><span class="comment"># a\nb</span></span><br><span class="line"><span class="comment"># I'm OK</span></span><br></pre></td></tr></table></figure></p><h1 id="2-文件读写"><a href="#2-文件读写" class="headerlink" title="2. 文件读写"></a>2. 文件读写</h1><p><a href="https://docs.python.org/3/tutorial/inputoutput.html" target="_blank" rel="noopener">官方文档</a></p><h2 id="2-1-无with"><a href="#2-1-无with" class="headerlink" title="2.1. 无with"></a>2.1. 无with</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f= open(<span class="string">"file1.txt"</span>,encoding=<span class="string">'utf-8'</span>)<span class="comment">#不写encoding，默认为操作系统编码</span></span><br><span class="line">file_data=f.read() <span class="comment">#完全读取</span></span><br><span class="line">print(file_data)</span><br><span class="line">f.close() <span class="comment">#需要执行关闭操作</span></span><br></pre></td></tr></table></figure><h2 id="2-2-有with"><a href="#2-2-有with" class="headerlink" title="2.2. 有with"></a>2.2. 有with</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,encoding=<span class="string">'utf-8'</span>)<span class="keyword">as</span> f:</span><br><span class="line">    file_data=f.read()</span><br><span class="line">    print(file_data)  <span class="comment">#不需要执行close(),系统会自动关闭。</span></span><br></pre></td></tr></table></figure><h2 id="2-3-readline"><a href="#2-3-readline" class="headerlink" title="2.3. readline()"></a>2.3. readline()</h2><p>默认从文件左上角开始，读取一行，指针下移。通过f.seek()可改变指针位置和要开始读的内容。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,encoding=<span class="string">'utf-8'</span>)<span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable()) <span class="comment">#判断是否可读</span></span><br><span class="line">    print(f.writable()) <span class="comment">#判断是否可写</span></span><br><span class="line">    print(<span class="number">1</span>, f.readline()) <span class="comment">#一次只读一行</span></span><br><span class="line">    print(<span class="number">2</span>, f.readline())</span><br><span class="line">    print(<span class="number">3</span>, f.readline())</span><br><span class="line">    print(<span class="number">4</span>, f.readline())</span><br><span class="line">    print(<span class="number">5</span>, f.readline())</span><br><span class="line">    print(<span class="number">6</span>, f.readline())</span><br><span class="line">    print(<span class="number">7</span>, f.readline())</span><br><span class="line">    print(<span class="number">8</span>, f.readline())</span><br></pre></td></tr></table></figure></p><h2 id="2-4-readlines"><a href="#2-4-readlines" class="headerlink" title="2.4. readlines()"></a>2.4. readlines()</h2><p>从文件左上角开始，将文件内容读取到列表中。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,encoding=<span class="string">'utf-8'</span>)<span class="keyword">as</span> f:</span><br><span class="line">   print(f.readlines()) </span><br><span class="line"><span class="comment"># ['1111\n', '222\n', '333\n', '44\n', '5555\n', '666\n', '你好!\n', 'hello']</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">        print(i)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 你好!</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># hello</span></span><br></pre></td></tr></table></figure></p><h2 id="2-5-不打印换行符"><a href="#2-5-不打印换行符" class="headerlink" title="2.5. 不打印换行符"></a>2.5. 不打印换行符</h2><p>print(,end=’’)<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readlines())</span><br><span class="line"><span class="comment"># #     ['1111\r\n', '222\r\n', '333\r\n', '44\r\n', '5555\r\n', '666\r\n', '你好!\r\n', 'hello']</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">        print(i,end=<span class="string">''</span>) <span class="comment">#不打印换行符</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 你好!</span></span><br><span class="line"><span class="comment"># hello</span></span><br></pre></td></tr></table></figure></p><h2 id="2-6-r"><a href="#2-6-r" class="headerlink" title="2.6. r+"></a>2.6. r+</h2><p>按读的内容和指针位置逐行覆盖原来的内容<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'r+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f: <span class="comment">#从指针位置所在处写入</span></span><br><span class="line">    m = f.read()</span><br><span class="line">    m = m.replace(<span class="string">'a'</span>,<span class="string">'h'</span>)</span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    f.write(m)</span><br><span class="line">    f.write(<span class="string">'a1\n'</span>)</span><br><span class="line">    f.write(<span class="string">'b1\nc1\n'</span>)</span><br><span class="line">    <span class="comment"># f.writelines(['d1\n', 'e1\n'])</span></span><br><span class="line">    f.seek(<span class="number">0</span>) <span class="comment">#将指针seek到0位置，否则读不出数据</span></span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure></p><h2 id="2-7-a"><a href="#2-7-a" class="headerlink" title="2.7. a+"></a>2.7. a+</h2><p>写到文件最后<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'写到文件最后'</span>)</span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 你好!</span></span><br><span class="line"><span class="comment"># hello写到文件最后</span></span><br></pre></td></tr></table></figure></p><h2 id="2-8-w"><a href="#2-8-w" class="headerlink" title="2.8. w+"></a>2.8. w+</h2><p>在with那行语句结束时，整个文件原来的内容被清空，无法读取原文件的数据。但后面的内容可以边读边写。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file_data = <span class="string">'test wb'</span></span><br><span class="line">    f.write(file_data.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="comment"># b'test wb'</span></span><br></pre></td></tr></table></figure></p><h2 id="2-9-查看文件编码"><a href="#2-9-查看文件编码" class="headerlink" title="2.9. 查看文件编码"></a>2.9. 查看文件编码</h2><p>待查证<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.encoding) <span class="comment">#查看文件编码</span></span><br><span class="line"><span class="comment"># utf - 8</span></span><br><span class="line"><span class="comment"># #'字符串'---------encode---------》bytes</span></span><br><span class="line"><span class="comment"># #bytes---------decode---------》'字符串'</span></span><br></pre></td></tr></table></figure></p><h2 id="2-10-b模式不能指定编码"><a href="#2-10-b模式不能指定编码" class="headerlink" title="2.10. b模式不能指定编码"></a>2.10. b模式不能指定编码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file_data=f.read()</span><br><span class="line">    print(file_data)</span><br><span class="line">    print(file_data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment"># b'1111\r\n222\r\n333\r\n44\r\n5555\r\n666\r\n\xe4\xbd\xa0\xe5\xa5\xbd!\r\nhello'</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 你好!</span></span><br><span class="line"><span class="comment"># hello</span></span><br></pre></td></tr></table></figure><h2 id="2-11-flush-tell-seek-truncate"><a href="#2-11-flush-tell-seek-truncate" class="headerlink" title="2.11. flush(),tell(),seek(),truncate()"></a>2.11. flush(),tell(),seek(),truncate()</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flush() <span class="comment">#文件内容从内存刷到硬盘</span></span><br><span class="line">tell()  <span class="comment">#查看文件当前指针位置</span></span><br><span class="line">seek(<span class="number">3</span>) <span class="comment">#从开头开始算，将指针移动到第三个字节</span></span><br><span class="line">        <span class="comment">#   seek 有三种工作方式，seek(offset[, whence])</span></span><br><span class="line">        <span class="comment">#   seek(2,0)=seek(2),0是默认方式，相当于从0字节位置开始</span></span><br><span class="line">        <span class="comment">#   seek(2,1)   1 相对当前位置</span></span><br><span class="line">        <span class="comment">#   seek(-2,2)  2 从文件末尾开始</span></span><br><span class="line">truncate(<span class="number">10</span>) <span class="comment">#从开头开始算，将文件只保留从0-10个字节的内容，文件打开方式必须包含"写"，</span></span><br><span class="line">               <span class="comment">#但是w和w+除外，因为这两种方式会首先把文件清空。</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>,<span class="string">'ab'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.truncate(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="2-12-打印文件最后一行"><a href="#2-12-打印文件最后一行" class="headerlink" title="2.12. 打印文件最后一行"></a>2.12. 打印文件最后一行</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:   <span class="comment">#这种方式不会读取整个文件，需要从哪里读取才从哪里开始读取，循环文件的推荐方式</span></span><br><span class="line">        offs=<span class="number">-5</span>         <span class="comment">#偏移量，根据一行大小确定</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            f.seek(offs,<span class="number">2</span>)</span><br><span class="line">            data=f.readlines()</span><br><span class="line">            <span class="keyword">if</span> len(data) &gt; <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">'这是最后一行：'</span>,data[<span class="number">-1</span>].decode(<span class="string">'utf-8'</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            offs*=<span class="number">2</span></span><br><span class="line"><span class="comment"># 这是最后一行： hello你好!hello你好!hello你好!hello你好!</span></span><br></pre></td></tr></table></figure><h1 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3. 字符串"></a>3. 字符串</h1><p><a href="https://docs.python.org/3/library/string.html" target="_blank" rel="noopener">https://docs.python.org/3/library/string.html</a></p><h2 id="3-1-dir-str"><a href="#3-1-dir-str" class="headerlink" title="3.1. dir(str)"></a>3.1. dir(str)</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(str)</span><br><span class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__getnewargs__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mod__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__rmod__'</span>, <span class="string">'__rmul__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'capitalize'</span>, <span class="string">'casefold'</span>, <span class="string">'center'</span>, <span class="string">'count'</span>, <span class="string">'encode'</span>, <span class="string">'endswith'</span>, <span class="string">'expandtabs'</span>, <span class="string">'find'</span>, <span class="string">'format'</span>, <span class="string">'format_map'</span>, <span class="string">'index'</span>, <span class="string">'isalnum'</span>, <span class="string">'isalpha'</span>, <span class="string">'isascii'</span>, <span class="string">'isdecimal'</span>, <span class="string">'isdigit'</span>, <span class="string">'isidentifier'</span>, <span class="string">'islower'</span>, <span class="string">'isnumeric'</span>, <span class="string">'isprintable'</span>, <span class="string">'isspace'</span>, <span class="string">'istitle'</span>, <span class="string">'isupper'</span>, <span class="string">'join'</span>, <span class="string">'ljust'</span>, <span class="string">'lower'</span>, <span class="string">'lstrip'</span>, <span class="string">'maketrans'</span>, <span class="string">'partition'</span>, <span class="string">'replace'</span>, <span class="string">'rfind'</span>, <span class="string">'rindex'</span>, <span class="string">'rjust'</span>, <span class="string">'rpartition'</span>, <span class="string">'rsplit'</span>, <span class="string">'rstrip'</span>, <span class="string">'split'</span>, <span class="string">'splitlines'</span>, <span class="string">'startswith'</span>, <span class="string">'strip'</span>, <span class="string">'swapcase'</span>, <span class="string">'title'</span>, <span class="string">'translate'</span>, <span class="string">'upper'</span>, <span class="string">'zfill'</span>]</span><br></pre></td></tr></table></figure><p>upper()/lower()：改变字符串中字母的大小写。<br>strip()：删除字符串首尾空白符（如’\n’、’\n\r’）或指定字符。<br>lstrip()：删除字符串左边空白符或指定字符。<br>rstrip()：删除字符串右边空白符或指定字符。  </p><p>去空格及特殊符号:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.strip().lstrip().rstrip(<span class="string">','</span>)</span><br></pre></td></tr></table></figure></p><h2 id="3-2"><a href="#3-2" class="headerlink" title="3.2. *"></a>3.2. *</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Ab'</span></span><br><span class="line">print(str1*<span class="number">5</span>)  <span class="comment">## AbAbAbAbAb</span></span><br><span class="line">print(<span class="number">5</span>*str1)  <span class="comment">## AbAbAbAbAb</span></span><br></pre></td></tr></table></figure><p><a href="https://www.pythontab.com/html/2015/pythonhexinbiancheng_1112/981.html" target="_blank" rel="noopener">python字符串连接的三种方法及其效率、适用场景详解</a></p><h2 id="3-3"><a href="#3-3" class="headerlink" title="3.3. +"></a>3.3. +</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="string">'a'</span></span><br><span class="line">str2=<span class="string">'b'</span></span><br><span class="line"><span class="keyword">print</span> str1+str2  <span class="comment">## ab</span></span><br></pre></td></tr></table></figure><h2 id="3-4-join"><a href="#3-4-join" class="headerlink" title="3.4. join"></a>3.4. join</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S.join(seq) #把seq代表的字符串序列，用S连接起来</span></span><br><span class="line">delimiter = <span class="string">','</span></span><br><span class="line">mylist = [<span class="string">'Brazil'</span>, <span class="string">'Russia'</span>, <span class="string">'India'</span>, <span class="string">'China'</span>]  <span class="comment">#Brazil,Russia,India,China</span></span><br><span class="line"><span class="keyword">print</span> delimiter.join(mylist)</span><br></pre></td></tr></table></figure><h2 id="3-5-format及百分号操作符"><a href="#3-5-format及百分号操作符" class="headerlink" title="3.5. format及百分号操作符"></a>3.5. format及百分号操作符</h2><p>默认：顺序传递<br>标准格式：{位置:值}<br><a href="https://docs.python.org/3/library/string.html#format-string-syntax" target="_blank" rel="noopener">https://docs.python.org/3/library/string.html#format-string-syntax</a><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&#123;1&#125; is better than &#123;0&#125;'</span>.format(<span class="string">'a'</span>,<span class="string">'b'</span>)  </span><br><span class="line"><span class="comment"># 'b is better than a'</span></span><br><span class="line"><span class="string">'&#123;:10.2f&#125;'</span>.format(<span class="number">1.23456</span>) <span class="comment"># 长度为10，保留两位小数，前面空格填补</span></span><br></pre></td></tr></table></figure></p><p>百分号操作符<br>%操作符：格式化符号。更高级别的控制。</p><ul><li>%和字母间加数字，点前为总长，点后为小数位数。<br>eg：%S%d%4.2f:占位符（格式化符号）</li><li>%s:字符串</li><li>%d:整数</li><li>%f:浮点数</li><li>%5d:前面添加空格，总长度为5</li><li>%4.2f:总长4，2个小数位的浮点数<br>print(“I’m %s. I’m %d year old” % (‘Vamei’, 99))</li></ul><h2 id="3-6-split"><a href="#3-6-split" class="headerlink" title="3.6. split()"></a>3.6. split()</h2><p>分割字符串<br>split()：按指定分隔符来切割字符串，返回列表。无分隔符时，默认分隔符是空格。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S.rsplit([sep, [maxsplit]])</span></span><br><span class="line"><span class="comment"># 以sep为分隔符，把S分成一个list。maxsplit表示分割的次数。默认的分割符为空白字符</span></span><br><span class="line">s = <span class="string">'ab,cde,fgh,ijk'</span></span><br><span class="line">print(s.split(<span class="string">','</span>)) <span class="comment">#返回列表 ['ab', 'cde', 'fgh', 'ijk']</span></span><br></pre></td></tr></table></figure></p><h2 id="3-7-splitlines"><a href="#3-7-splitlines" class="headerlink" title="3.7. splitlines()"></a>3.7. splitlines()</h2><p>按行分割字符串<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S.splitlines([keepends])</span><br><span class="line"><span class="comment"># 把S按照行分割符分为一个list，keepends是一个bool值，如果为真每行后而会保留行分割符。</span></span><br></pre></td></tr></table></figure></p><h2 id="3-8-replace"><a href="#3-8-replace" class="headerlink" title="3.8. replace()"></a>3.8. replace()</h2><p>replace()：替换目标字符串中的子串。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">S.replace(oldstr, newstr, [count])</span><br><span class="line"><span class="comment"># 把S中的oldstar替换为newstr，count为替换次数。这是替换的通用形式，还有一些函数进行特殊字符的替换</span></span><br><span class="line">S.strip([chars])</span><br><span class="line"><span class="comment"># 把S中前后chars中有的字符全部去掉，可以理解为把S前后chars替换为None</span></span><br><span class="line">S.lstrip([chars])</span><br><span class="line">S.rstrip([chars])</span><br><span class="line">S.expandtabs([tabsize])<span class="comment">#把S中的tab字符替换没空格，每个tab替换为tabsize个空格，默认是8个</span></span><br></pre></td></tr></table></figure></p><h2 id="3-9-translate"><a href="#3-9-translate" class="headerlink" title="3.9. translate()"></a>3.9. translate()</h2><p>批量替换<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S.translate(table[,deletechars])</span></span><br><span class="line"><span class="comment">## 49.1. 使用上面的函数产后的翻译表，把S进行翻译，并把deletechars中有的字符删掉。需要注意的是，如果S为unicode字符串，那么就不支持 deletechars参数，可以使用把某个字符翻译为None的方式实现相同的功能。此外还可以使用codecs模块的功能来创建更加功能强大的翻译表。</span></span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> maketrans   <span class="comment"># 引用 maketrans 函数。</span></span><br><span class="line">intab = <span class="string">"aeiou"</span></span><br><span class="line">outtab = <span class="string">"12345"</span></span><br><span class="line">trantab = maketrans(intab, outtab)  <span class="comment">#这里注意一下</span></span><br><span class="line">str = <span class="string">"this is string example....wow!!!"</span>;</span><br><span class="line"><span class="keyword">print</span> str.translate(trantab);</span><br></pre></td></tr></table></figure></p><h2 id="3-10-index"><a href="#3-10-index" class="headerlink" title="3.10. index()"></a>3.10. index()</h2><p>查找字符，返回第一个字符出现的位置。&lt; 0 为未找到<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'strchr'</span></span><br><span class="line">substr = <span class="string">'ch'</span></span><br><span class="line">n = str.index(substr)</span><br><span class="line"><span class="keyword">print</span> n  <span class="comment">## 3 非子字符串时报错，其余返回子字符串第一个字符的下标。中文报错</span></span><br></pre></td></tr></table></figure></p><h2 id="3-11-find"><a href="#3-11-find" class="headerlink" title="3.11. find()"></a>3.11. find()</h2><p>查找字符串<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sStr1 = <span class="string">'abcdefg'</span></span><br><span class="line">sStr2 = <span class="string">'cde'</span></span><br><span class="line"><span class="keyword">print</span> sStr1.find(sStr2) <span class="comment">#非子字符串时返回-1。否则返回子字符串第一个字符的下标。中文报错。</span></span><br></pre></td></tr></table></figure></p><h2 id="3-12-index、rfind、rindex、count"><a href="#3-12-index、rfind、rindex、count" class="headerlink" title="3.12. index、rfind、rindex、count"></a>3.12. index、rfind、rindex、count</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回S中出现substr的第一个字母的标号，如果S中没有substr则返回-1。start和end作用就相当于在S[start:end]中搜索</span></span><br><span class="line">S.index(substr, [start, [end]])</span><br><span class="line"><span class="comment"># 与find()相同，只是在S中没有substr时，会返回一个运行时错误</span></span><br><span class="line">S.rfind(substr, [start, [end]])</span><br><span class="line"><span class="comment"># 返回S中最后出现的substr的第一个字母的标号，如果S中没有substr则返回-1，也就是说从右边算起的第一次出现的substr的首字母标号</span></span><br><span class="line">S.rindex(substr, [start, [end]])</span><br><span class="line">S.count(substr, [start, [end]]) <span class="comment">#计算substr在S中出现的次数</span></span><br></pre></td></tr></table></figure><h2 id="3-13-ljust、rjust、center、zfill"><a href="#3-13-ljust、rjust、center、zfill" class="headerlink" title="3.13. ljust、rjust、center、zfill"></a>3.13. ljust、rjust、center、zfill</h2><p>字符串在输出时的对齐<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"this is string example wow!!!"</span></span><br><span class="line">print(str.ljust(<span class="number">40</span>,<span class="string">'a'</span>))   </span><br><span class="line">print(str.ljust(<span class="number">41</span>,<span class="string">'a'</span>))   </span><br><span class="line">print(str.rjust(<span class="number">40</span>,<span class="string">'a'</span>))  </span><br><span class="line">print(str.center(<span class="number">40</span>,))</span><br><span class="line">print(str.zfill(<span class="number">40</span>))</span><br><span class="line"><span class="comment">## 52.1. this is string example wow!!!aaaaaaaaaaa</span></span><br><span class="line"><span class="comment">## 52.2. this is string example wow!!!aaaaaaaaaaaa</span></span><br><span class="line"><span class="comment">## 52.3. aaaaaaaaaaathis is string example wow!!!</span></span><br><span class="line"><span class="comment">## 52.4. this is string example wow!!!</span></span><br><span class="line"><span class="comment">## 52.5. this is string example wow!!!</span></span><br></pre></td></tr></table></figure></p><h2 id="3-14-cmp-str1-str2"><a href="#3-14-cmp-str1-str2" class="headerlink" title="3.14. cmp(str1,str2)"></a>3.14. cmp(str1,str2)</h2><p>比较字符串。<a href="http://www.runoob.com/python/func-number-cmp.html" target="_blank" rel="noopener">http://www.runoob.com/python/func-number-cmp.html</a></p><h2 id="3-15-len-str"><a href="#3-15-len-str" class="headerlink" title="3.15. len(str)"></a>3.15. len(str)</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sStr1 = <span class="string">'strlen'</span></span><br><span class="line"><span class="keyword">print</span> len(sStr1)</span><br></pre></td></tr></table></figure><h2 id="3-16"><a href="#3-16" class="headerlink" title="3.16. [:]"></a>3.16. [:]</h2><p>字符串切片<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tr1 = <span class="string">'1234567890'</span></span><br><span class="line">print(tr1[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment">#截取第一位到第三位的字符 123</span></span><br><span class="line">print(tr1[:]) <span class="comment">#截取字符串的全部字符 1234567890</span></span><br><span class="line">print(tr1[<span class="number">6</span>:]) <span class="comment">#截取第七个字符到结尾 7890</span></span><br><span class="line">print(tr1[:<span class="number">-3</span>]) <span class="comment">#截取从头开始到倒数第三个字符之前 1234567</span></span><br><span class="line">print(tr1[<span class="number">2</span>]) <span class="comment">#截取第三个字符 3</span></span><br><span class="line">print(tr1[<span class="number">-1</span>]) <span class="comment">#截取倒数第一个字符 0</span></span><br><span class="line">print(tr1[:<span class="number">-1</span>]) <span class="comment">#123456789 </span></span><br><span class="line">print(tr1[::<span class="number">-1</span>]) <span class="comment">#创造一个与原字符串顺序相反的字符串 0987654321 翻转字符串</span></span><br><span class="line">print(tr1[<span class="number">-3</span>:<span class="number">-1</span>]) <span class="comment">#截取倒数第三位与倒数第一位之前的字符 89</span></span><br><span class="line">print(tr1[<span class="number">-3</span>:]) <span class="comment">#截取倒数第三位到结尾 890</span></span><br><span class="line">print(tr1[:<span class="number">-5</span>:<span class="number">-3</span>]) <span class="comment">#逆序截取，具体啥意思没搞明白？ 07</span></span><br></pre></td></tr></table></figure></p><h2 id="3-17-lower-、upper-、swapcase-、capitalize"><a href="#3-17-lower-、upper-、swapcase-、capitalize" class="headerlink" title="3.17. lower()、upper()、swapcase()、capitalize()"></a>3.17. lower()、upper()、swapcase()、capitalize()</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S=<span class="string">'abEfeDg'</span></span><br><span class="line">print(S.lower()) <span class="comment">#小写 abefedg</span></span><br><span class="line">print(S.upper()) <span class="comment">#大写 ABEFEDG</span></span><br><span class="line">print(S.swapcase()) <span class="comment">#大小写互换 ABeFEdG</span></span><br><span class="line">print(S.capitalize()) <span class="comment">#首字母大写 Abefedg</span></span><br></pre></td></tr></table></figure><h2 id="3-18-encode、decode"><a href="#3-18-encode、decode" class="headerlink" title="3.18. encode、decode"></a>3.18. encode、decode</h2><p>字符串还有一对编码和解码的函数<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S.encode([encoding,[errors]])</span></span><br><span class="line"><span class="comment">## 53.1. 其中encoding可以有多种值，</span></span><br><span class="line"><span class="comment">## 53.2. 比如gb2312 gbk gb18030 bz2 zlib big5 bzse64等都支持。</span></span><br><span class="line"><span class="comment">## 53.3. errors默认值为"strict"，意思是UnicodeError。</span></span><br><span class="line"><span class="comment">## 53.4. 可能的值还有'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' 和所有的通过codecs.register_error注册的值。</span></span><br><span class="line"><span class="comment">## 53.5. 这一部分内容涉及codecs模块</span></span><br><span class="line">S.decode([encoding,[errors]])</span><br></pre></td></tr></table></figure></p><h2 id="3-19-startswith、endswith、is"><a href="#3-19-startswith、endswith、is" class="headerlink" title="3.19. startswith、endswith、is"></a>3.19. startswith、endswith、is</h2><p>字符串的测试、判断函数<br>这一类函数在string模块中没有，这些函数返回的都是bool值<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">S.startswith(prefix[,start[,end]])</span><br><span class="line"><span class="comment"># 是否以prefix开头</span></span><br><span class="line">S.endswith(suffix[,start[,end]])</span><br><span class="line"><span class="comment"># 以suffix结尾</span></span><br><span class="line">S.islower() <span class="comment">#S中的字母是否全是小写</span></span><br><span class="line">S.isupper() <span class="comment">#S中的字母是否全是大写</span></span><br><span class="line">S.istitle() <span class="comment">#S是否是首字母大写的</span></span><br><span class="line">S.isspace() <span class="comment">#是否全是空白字符，并至少有一个字符</span></span><br><span class="line">S.isalpha() <span class="comment">#是否全是字母，并至少有一个字符</span></span><br><span class="line">S.isalnum() <span class="comment">#是否全是字母和数字，并至少有一个字符</span></span><br><span class="line">S.isdigit() <span class="comment">#是否全是数字，并至少有一个字符</span></span><br></pre></td></tr></table></figure></p><h2 id="3-20-atoi、atol、atof"><a href="#3-20-atoi、atol、atof" class="headerlink" title="3.20. atoi、atol、atof"></a>3.20. atoi、atol、atof</h2><p>字符串类型转换函数，这几个函数只在string模块中有<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string.atoi(s[,base])</span><br><span class="line"><span class="comment"># base默认为10，如果为0,那么s就可以是012或0x23这种形式的字符串，如果是16那么s就只能是0x23或0X12这种形式的字符串</span></span><br><span class="line">string.atol(s[,base]) <span class="comment">#转成long</span></span><br><span class="line">string.atof(s[,base]) <span class="comment">#转成float</span></span><br></pre></td></tr></table></figure></p><h2 id="3-21-and"><a href="#3-21-and" class="headerlink" title="3.21. and"></a>3.21. and</h2><p>如果为真，则返回左边第一个真值。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sStr1 = <span class="string">'12345678'</span></span><br><span class="line">sStr2 = <span class="string">'ab'</span></span><br><span class="line"><span class="keyword">print</span> (sStr2 <span class="keyword">and</span> sStr1) <span class="comment">## 12345678</span></span><br><span class="line"><span class="keyword">print</span> (sStr1 <span class="keyword">and</span> sStr2) <span class="comment">## ab</span></span><br><span class="line"><span class="keyword">print</span> len(sStr2 <span class="keyword">and</span> sStr1) <span class="comment">## 8</span></span><br><span class="line"><span class="keyword">print</span> len(sStr1 <span class="keyword">and</span> sStr2) <span class="comment">## 2</span></span><br></pre></td></tr></table></figure></p><h2 id="3-22-for-in-if-in"><a href="#3-22-for-in-if-in" class="headerlink" title="3.22. for in, if in"></a>3.22. for in, if in</h2><p>扫描字符串<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># strpbrk(sStr1,sStr2)</span></span><br><span class="line">sStr1 = <span class="string">'cekjgdklab'</span></span><br><span class="line">sStr2 = <span class="string">'gka'</span></span><br><span class="line">nPos = <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> sStr1:</span><br><span class="line">    print(c)</span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">in</span> sStr2:</span><br><span class="line">        nPos = sStr1.index(c)</span><br><span class="line">        print(nPos)</span><br><span class="line"><span class="comment">## 57.1. c</span></span><br><span class="line"><span class="comment">## 57.2. e</span></span><br><span class="line"><span class="comment">## 57.3. k</span></span><br><span class="line"><span class="comment">## 57.4. 2</span></span><br><span class="line"><span class="comment">## 57.5. j</span></span><br><span class="line"><span class="comment">## 57.6. g</span></span><br><span class="line"><span class="comment">## 57.7. 4</span></span><br><span class="line"><span class="comment">## 57.8. d</span></span><br><span class="line"><span class="comment">## 57.9. k </span></span><br><span class="line"><span class="comment">## 57.10. index这里永远都是第一次出现的位置</span></span><br><span class="line"><span class="comment">## 57.11. l</span></span><br><span class="line"><span class="comment">## 57.12. a</span></span><br><span class="line"><span class="comment">## 57.13. 8</span></span><br><span class="line"><span class="comment">## 57.14. b</span></span><br></pre></td></tr></table></figure></p><h2 id="3-23-addslashes-的实现"><a href="#3-23-addslashes-的实现" class="headerlink" title="3.23. addslashes 的实现"></a>3.23. addslashes 的实现</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addslashes</span><span class="params">(s)</span>:</span></span><br><span class="line">    d = &#123;<span class="string">'"'</span>:<span class="string">'\\"'</span>, <span class="string">"'"</span>:<span class="string">"\\'"</span>, <span class="string">"\0"</span>:<span class="string">"\\\0"</span>, <span class="string">"\\"</span>:<span class="string">"\\\\"</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(d.get(c, c) <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br><span class="line"></span><br><span class="line">s = <span class="string">"John 'Johny' Doe (a.k.a. \"Super Joe\")\\\0"</span></span><br><span class="line">print(s)</span><br><span class="line">print(addslashes(s))</span><br></pre></td></tr></table></figure><h2 id="3-24-取字母与数字"><a href="#3-24-取字母与数字" class="headerlink" title="3.24. 取字母与数字"></a>3.24. 取字母与数字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">OnlyCharNum</span><span class="params">(s)</span>:</span></span><br><span class="line">    s2 = s.lower()</span><br><span class="line">    fomart = <span class="string">'abcdefghijklmnopqrstuvwxyz0123456789'</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s2:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> c <span class="keyword">in</span> fomart:</span><br><span class="line">            s = s.replace(c,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">print(OnlyCharNum(<span class="string">"a000 Aaa-b"</span>)) <span class="comment">## a000Aaab</span></span><br></pre></td></tr></table></figure><h2 id="3-25-说明"><a href="#3-25-说明" class="headerlink" title="3.25. 说明"></a>3.25. 说明</h2><h3 id="3-25-1-字符串对象是不可改变的"><a href="#3-25-1-字符串对象是不可改变的" class="headerlink" title="3.25.1. 字符串对象是不可改变的"></a>3.25.1. 字符串对象是不可改变的</h3><p>也就是说在python创建一个字符串后，你不能把这个字符中的某一部分改变。<br>任何上面的函数改变了字符串后，都会返回一个新的字符串，原字串并没有变。</p><h3 id="3-25-2-也有变通的办法的"><a href="#3-25-2-也有变通的办法的" class="headerlink" title="3.25.2. 也有变通的办法的"></a>3.25.2. 也有变通的办法的</h3><p>可以用S=list(S)这个函数把S变为由单个字符为成员的list.<br>这样的话就可以使用S[3]=’a’的方式改变值，然后再使用S=” “.join(S)还原成字符串</p><h1 id="4-特殊方法"><a href="#4-特殊方法" class="headerlink" title="4. 特殊方法"></a>4. 特殊方法</h1><p>面向对象编程的类中具有特殊意义的方法<br>方法名|含义<br>–|–<br><strong>init</strong>()|初始化，进行初始化操作<br><strong>del</strong>()|在对象消失前一刻用的<br><strong>len</strong>()|对对象执行len()函数调用时，自动触发。一般用于设置对象长度。’’’def <strong>len</strong>(self): return’’’ 一个类的预设的长度<br><strong>str</strong>()|对对象使用print()或str()时被自动调用，返回字符串</p><h1 id="5-数据库"><a href="#5-数据库" class="headerlink" title="5. 数据库"></a>5. 数据库</h1><h2 id="5-1-pymysql"><a href="#5-1-pymysql" class="headerlink" title="5.1. pymysql"></a>5.1. pymysql</h2><blockquote><ul><li><a href="https://www.apachefriends.org/zh_cn/index.html" target="_blank" rel="noopener">xampp</a></li><li><figure class="highlight plain"><figcaption><span>install pymysql --user```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">- /xampp/phpMyadmin，打开config.inc.php文件，查看MySQL配置的用户和密码</span><br><span class="line"></span><br><span class="line">参考教程：</span><br><span class="line">&gt; - 菜鸟教程：[mysql](http://www.runoob.com/python3/python3-mysql.html) 、[mysql-connector](http://www.runoob.com/python3/python-mysql-connector.html)</span><br><span class="line">- [MySQL官方文档](https://dev.mysql.com/doc/refman/8.0/en/mysql-internals.html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 5.2. 错误处理</span><br><span class="line"></span><br><span class="line">DB API中定义了一些数据库操作的错误及异常，下表列出了这些错误和异常:</span><br><span class="line"></span><br><span class="line">异常|描述</span><br><span class="line">--|--</span><br><span class="line">Warning|当有严重警告时触发，例如插入数据是被截断等等。必须是 StandardError 的子类。</span><br><span class="line">Error|警告以外所有其他错误类。必须是 StandardError 的子类。</span><br><span class="line">InterfaceError|当有数据库接口模块本身的错误（而不是数据库的错误）发生时触发。 必须是Error的子类。</span><br><span class="line">DatabaseError|和数据库有关的错误发生时触发。 必须是Error的子类。</span><br><span class="line">DataError|当有数据处理时的错误发生时触发，例如：除零错误，数据超范围等等。 必须是DatabaseError的子类。</span><br><span class="line">OperationalError|指非用户控制的，而是操作数据库时发生的错误。例如：连接意外断开、 数据库名未找到、事务处理失败、内存分配错误等等操作数据库是发生的错误。 必须是DatabaseError的子类。</span><br><span class="line">IntegrityError|完整性相关的错误，例如外键检查失败等。必须是DatabaseError子类。</span><br><span class="line">InternalError|数据库的内部错误，例如游标（cursor）失效了、事务同步失败等等。 必须是DatabaseError子类。</span><br><span class="line">ProgrammingError|程序错误，例如数据表（table）没找到或已存在、SQL语句语法错误、 参数数量错误等等。必须是DatabaseError的子类。</span><br><span class="line">NotSupportedError|不支持错误，指使用了数据库不支持的函数或API等。例如在连接对象上 使用.rollback()函数，然而数据库并不支持事务或者事务已关闭。 必须是DatabaseError的子类。</span><br><span class="line"></span><br><span class="line">## 5.3. OperationalError: (1045, &quot;Access denied for user &apos;testuser&apos;@&apos;localhost&apos; (using password: YES)&quot;)</span><br><span class="line">数据库连接错误，如何添加密码</span><br><span class="line"></span><br><span class="line"># 6. 样式</span><br><span class="line">```py</span><br><span class="line"># Python代码块：</span><br><span class="line">&gt;&gt;&gt;import nltk</span><br><span class="line">&gt;&gt;&gt;import numpy</span><br><span class="line"></span><br><span class="line"># 一般性的代码块：</span><br><span class="line"></span><br><span class="line">add FILE vectorizer.pkl;</span><br><span class="line">add FILE classifier.pkl;</span><br><span class="line"></span><br><span class="line"># Scrapy shell中的IPython 记法，其样式如下：</span><br><span class="line"></span><br><span class="line">In [1] : sel.xpath(&apos;//title/text()&apos;)</span><br><span class="line">Out[1]: [&lt;Selector xpath=&apos;//title/text()&apos; data=u&apos; Google News&apos;&gt;]</span><br><span class="line"></span><br><span class="line"># 所有命令行输入或输出信息的样式：</span><br><span class="line"></span><br><span class="line"># cp /usr/src/asterisk-addons/configs/cdr_mysql.conf.sample</span><br><span class="line"># /etc/asterisk/cdr_mysql.conf</span><br></pre></td></tr></table></figure></li></ul></blockquote><h1 id="7-列表"><a href="#7-列表" class="headerlink" title="7. 列表"></a>7. 列表</h1><p>Python列表</p><p>定义：相关数据的集合。数据的一种保存形式（相对于变量）。<br>索引:<code>list[0]</code>、<code>list[-1]</code><br>申明：<code>[]</code>,英文逗号隔开。<br>空列表（初始化）：<code>list1=[]</code><br>增：<code>list1.append(&#39;a&#39;)</code><br>删：del list1[i]<br>改: 直接list[i]=newdata<br>切片: list[m:n:i] 左闭右开,i为步距。m省略的话，默认为0。n:-1。i:1</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">myList=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'hello'</span>]</span><br><span class="line">print(myList)</span><br><span class="line">print(myList[<span class="number">2</span>])</span><br><span class="line">print(myList[<span class="number">-1</span>])</span><br><span class="line">myList[<span class="number">1</span>]=<span class="number">20</span></span><br><span class="line">print(myList)</span><br><span class="line">myList.append(<span class="number">6</span>)</span><br><span class="line">print(myList)</span><br><span class="line"><span class="keyword">del</span> myList[<span class="number">5</span>]</span><br><span class="line">print(myList)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 'hello']</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># hello</span></span><br><span class="line"><span class="comment"># [1, 20, 3, 4, 5, 'hello']</span></span><br><span class="line"><span class="comment"># [1, 20, 3, 4, 5, 'hello', 6]</span></span><br><span class="line"><span class="comment"># [1, 20, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h1 id="8-字典"><a href="#8-字典" class="headerlink" title="8. 字典"></a>8. 字典</h1><p>列表和元组是数据集合。字典是键值对集合。<br>字典键重合的问题。字典的改和增。<br>列表和元组的索引对应字典的键。<br>键为数字的字典。<br>字典除了用{}申明外，还可以用dict()申明，用<code>dict()</code>时，键不能带引号。否则报错 <code>SyntaxError: keyword can&#39;t be an expression</code><br>学习，思考，应用，校正。人做事情，都需要有个反馈，反馈的周期越久，感觉上就越困难。很多大事情，都是由一个个小事务重复或迭代而成，每个小事务中，包含了反馈和校正<br>列表和元组形式上是[]、()的区别。元组的值不能修改。<br>定义：数据对集合。<br>申明：字典的关键字必须是唯一的。不能重复。但申明时不会报错。后面的键值对会自动覆盖前面的同名键值对。<br>        <code>{}</code>没写而且没调用<code>dict</code>函数会报错<code>SyntaxError: invalid syntax</code><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重复的键</span></span><br><span class="line">myDic=&#123;<span class="string">'one'</span>:<span class="number">1</span>,<span class="string">'two'</span>:<span class="number">2</span>,<span class="string">'two'</span>:<span class="number">3</span>&#125; <span class="comment">#重复的键自动覆盖，和字典改数据一个理</span></span><br><span class="line">print(len(myDic)) <span class="comment"># 2</span></span><br><span class="line">print(myDic) <span class="comment"># &#123;'one': 1, 'two': 3&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#125;申明</span></span><br><span class="line">myDic1=&#123;<span class="string">'one'</span>:<span class="number">1</span>,<span class="string">'two'</span>:<span class="number">2</span>,<span class="string">'three'</span>:<span class="number">3</span>&#125; <span class="comment">#键也可以是数字</span></span><br><span class="line">print(myDic1)  <span class="comment"># &#123;'one': 1, 'two': 2, 'three': 3&#125;</span></span><br><span class="line"><span class="comment"># dict()申明</span></span><br><span class="line">myDic2=dict(one=<span class="number">1</span>,two=<span class="number">2</span>,three=<span class="number">3</span>) <span class="comment">#dict函数申明时建不能带引号，否则报错 SyntaxError: keyword can't be an expression</span></span><br><span class="line">print(myDic2) <span class="comment">#&#123;'one': 1, 'two': 2, 'three': 3&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="8-1-查"><a href="#8-1-查" class="headerlink" title="8.1. 查"></a>8.1. 查</h2><p>dicName[‘keyName’]</p><h2 id="8-2-改"><a href="#8-2-改" class="headerlink" title="8.2. 改"></a>8.2. 改</h2><p>dicName[‘keyName’]=newData</p><h2 id="8-3-增"><a href="#8-3-增" class="headerlink" title="8.3. 增"></a>8.3. 增</h2><p>dicName[‘keyName’]=newData</p><h2 id="8-4-删"><a href="#8-4-删" class="headerlink" title="8.4. 删"></a>8.4. 删</h2><p>del dicName[‘keyName’]</p><h2 id="8-5-排序"><a href="#8-5-排序" class="headerlink" title="8.5. 排序"></a>8.5. 排序</h2><p>用字典的值对字典进行排序，将{1: 2, 3: 4, 4:3, 2:1, 0:0}按照字典的值从大到小进行排序。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">x = &#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">4</span>, <span class="number">4</span>:<span class="number">3</span>, <span class="number">2</span>:<span class="number">1</span>, <span class="number">0</span>:<span class="number">0</span>&#125;</span><br><span class="line">sorted_x = sorted(x.items(), key=operator.itemgetter(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span> (sorted_x)</span><br></pre></td></tr></table></figure></p><p>[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]<br>对字典进行排序是【不可能】的，只有把字典【转换】成另一种方式才能排序。字典本身是无序的，但是如列表元组等其他类型是有序的，所以需要用一个元组列表来表示排序的字典。</p><h1 id="9-类型转换"><a href="#9-类型转换" class="headerlink" title="9. 类型转换"></a>9. 类型转换</h1><p>int(number)<br>float(number)<br>for key,value in dict.items()<br>Python 100例 <a href="https://www.w3cschool.cn/python/python-100-examples.html" target="_blank" rel="noopener">https://www.w3cschool.cn/python/python-100-examples.html</a></p><h1 id="10-类"><a href="#10-类" class="headerlink" title="10. 类"></a>10. 类</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>   <span class="comment"># 创建类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        <span class="comment"># _init_()方法称为类的构造方法。会自动执行。初始化以及规定传递的参数。self后面的参数列表。实例则传给self</span></span><br><span class="line">        <span class="comment"># self 仅在类的定义中使用。表示对整个传递来的对象进行操作。</span></span><br><span class="line">        <span class="comment"># 运行时类中self.会自动转为传进来obInstance.进行运算，即self = obInstance【自我理解】</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(self)</span>:</span> <span class="comment">#通过self调用被封装的内容</span></span><br><span class="line">        <span class="keyword">print</span> (self.name)</span><br><span class="line">        <span class="keyword">print</span> (self.age)</span><br><span class="line">obj1 = Person(<span class="string">'santos'</span>,<span class="number">18</span>)</span><br><span class="line">obj1.detail()</span><br><span class="line"><span class="comment"># Python将obj1传给self参数，'santos'和18传给类的构造方法_init_中的name和age</span></span><br><span class="line"><span class="comment"># 猫可以：喵喵叫、吃、喝、拉、撒</span></span><br><span class="line"><span class="comment"># 狗可以：汪汪叫、吃、喝、拉、撒</span></span><br><span class="line"><span class="comment"># 如果用继承的思想，就可以写成：</span></span><br><span class="line"><span class="comment"># 动物：吃喝拉撒</span></span><br><span class="line"><span class="comment"># 猫：喵喵叫（猫继承动物的功能）</span></span><br><span class="line"><span class="comment"># 狗：汪汪叫（狗继承动物的功能）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"%s吃 "</span> %self.name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"%s喝 "</span> %self.name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"%s拉 "</span> %self.name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pee</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"%s撒 "</span> %self.name)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cry</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'喵喵叫'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cry</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'汪汪叫'</span>)</span><br><span class="line">c1 = Cat(<span class="string">'小白家的小黑猫'</span>)</span><br><span class="line">c1.eat()</span><br><span class="line">c1.cry()</span><br><span class="line">d1 = Dog(<span class="string">'胖子家的小瘦狗'</span>)</span><br><span class="line">d1.eat()</span><br><span class="line"><span class="comment"># 小白家的小黑猫吃</span></span><br><span class="line"><span class="comment"># 喵喵叫</span></span><br><span class="line"><span class="comment"># 胖子家的小瘦狗吃</span></span><br></pre></td></tr></table></figure><h1 id="11-函数、类，可变与不可变"><a href="#11-函数、类，可变与不可变" class="headerlink" title="11. 函数、类，可变与不可变"></a>11. 函数、类，可变与不可变</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">fun(a)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span></span><br><span class="line">a为数字int，函数改变不了函数以外a的值。当一个引用传递给函数时，函数自动复制一份引用。函数里和函数外的引用是不一样的。</span><br><span class="line">a = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span></span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line">fun(a)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>]</span><br><span class="line">a为列表，函数将函数以外的a值改变了。函数内的引用指向的是可变对象列表a，函数内的列表a和函数外的列表a是同一个。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name=<span class="string">"aaa"</span></span><br><span class="line">p1=Person()</span><br><span class="line">p2=Person()</span><br><span class="line">p1.name=<span class="string">"bbb"</span></span><br><span class="line"><span class="keyword">print</span> (p1.name)</span><br><span class="line"><span class="keyword">print</span> (p2.name)</span><br><span class="line"><span class="keyword">print</span> (Person.name)</span><br><span class="line">&gt;&gt;&gt;bbb</span><br><span class="line">&gt;&gt;&gt;aaa</span><br><span class="line">&gt;&gt;&gt;aaa</span><br><span class="line">p1.name=<span class="string">"bbb"</span>表示实例调用了类变量，其实就是函数传参的问题。p1.name一开始指向类变量name=<span class="string">"aaa"</span>，但是在实例的作用域里把类变量的引用改变了，就变成了一个实例变量，self.name不再引用Person的类变量name了。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name=[]</span><br><span class="line">p1=Person()</span><br><span class="line">p2=Person()</span><br><span class="line">p1.name.append(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> (p1.name)</span><br><span class="line"><span class="keyword">print</span> (p2.name)</span><br><span class="line"><span class="keyword">print</span> (Person.name)</span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>]</span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>]</span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>]</span><br><span class="line">!类中的可变量的慎重使用！！！！！！！！！！！！！！！ist、dict等是可更改对象，因此修改一个指向的对象时会把类变量也改变了。</span><br></pre></td></tr></table></figure><h1 id="12-安装"><a href="#12-安装" class="headerlink" title="12. 安装"></a>12. 安装</h1><p>Python3 in Ubuntu：</p><p>apt list –installed | grep python<br>sudo apt-get update<br>sudo apt-get upgrade python3<br>sudo apt install python3-pip<br>sudo apt-get install build-essential libssl-dev libffi-dev python-dev<br>pip3 -V<br>sudo apt install -y python3-venv<br>mkdir wx<br>cd wx<br>python3 -m venv wx<br>ls wx<br>source wx/bin/activate<br>vim hello.py<br>i(Escape)<br>zz<br>:wq</p><p>pip3 install flask<br>python3 hello.py</p><p><a href="https://stackoverflow.com/questions/38298652/permissionerror-errno-13-permission-denied-flask-run" target="_blank" rel="noopener">https://stackoverflow.com/questions/38298652/permissionerror-errno-13-permission-denied-flask-run</a>  change port to 5000(tencent denies port 80)<br><a href="https://vitux.com/install-python3-on-ubuntu-and-set-up-a-virtual-programming-environment/" target="_blank" rel="noopener">https://vitux.com/install-python3-on-ubuntu-and-set-up-a-virtual-programming-environment/</a></p><h1 id="13-Python第三方库"><a href="#13-Python第三方库" class="headerlink" title="13. Python第三方库"></a>13. Python第三方库</h1><p>基本格式：（安装时，把name替换为要安装的第三方库）</p><ul><li><code>pip install name</code></li><li><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple name</code></li></ul><ul><li>科学计算的包，如Numpy、Scipy、Pandas和Matplotlib。</li><li>机器学习、生物医学和天体物理学计算，如Scikit-Learn、BioPython。</li><li>获取网页：requests、urllib、selenium</li><li>解析数据：lxml、bs4的BeautifulSoup、re(标准库)</li><li>存储数据：MySQL、MongoDB<h1 id="14-基础算法"><a href="#14-基础算法" class="headerlink" title="14. 基础算法"></a>14. 基础算法</h1><h2 id="14-1-循环打印输出从1到100的所有奇数"><a href="#14-1-循环打印输出从1到100的所有奇数" class="headerlink" title="14.1. 循环打印输出从1到100的所有奇数"></a>14.1. 循环打印输出从1到100的所有奇数</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> (i)</span><br></pre></td></tr></table></figure></li></ul><h2 id="14-2-字符串批量替换"><a href="#14-2-字符串批量替换" class="headerlink" title="14.2. 字符串批量替换"></a>14.2. 字符串批量替换</h2><p>请将字符串“你好$$$我正在学Python@#@#现在需要&amp;<em>&amp;</em>&amp;修改字符串”中的符号变成一个空格，需要输出的格式为：“你好 我正在学Python现在需要 修改字符串”。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">str1 = <span class="string">'你好$$$我正在学Python@#@#现在需要&amp;%&amp;%&amp;修改字符串'</span></span><br><span class="line">str2 = str1.replace(<span class="string">'$$$'</span>, <span class="string">' '</span>).replace(<span class="string">'@#@#'</span>, <span class="string">' '</span>).replace(<span class="string">'&amp;%&amp;%&amp;'</span>, <span class="string">' '</span>)</span><br><span class="line"><span class="keyword">print</span> (str2)</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str1 = <span class="string">'你好$$$我正在学Python@#@#现在需要&amp;%&amp;%&amp;修改字符串'</span></span><br><span class="line">str2 = re.sub(<span class="string">'[$@#&amp;%]+'</span>, <span class="string">' '</span> ,str1)</span><br><span class="line"><span class="keyword">print</span> (str2)</span><br></pre></td></tr></table></figure></p><h2 id="14-3-输出9×9乘法口诀表"><a href="#14-3-输出9×9乘法口诀表" class="headerlink" title="14.3. 输出9×9乘法口诀表"></a>14.3. 输出9×9乘法口诀表</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此法会有多余的换行和末尾对于的空格</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'&#123;&#125;×&#123;&#125;=&#123;&#125;'</span>.format(j,i,j*i),end=<span class="string">' '</span>)</span><br><span class="line">    print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment"># 更好的方法，没有对齐</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'&#123;&#125;×&#123;&#125;=&#123;&#125; '</span>.format(j,i,j*i),end=<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line"><span class="comment"># 最好的方法 这里是对齐的。由此可见，'\t'是用来【显示】对齐的，但似乎len就是1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'&#123;&#125;×&#123;&#125;=&#123;&#125;\t'</span>.format(j,i,j*i),end=<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line"><span class="comment"># 最好的方法 这里是对齐的</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"%dx%d=%d\t"</span> % (j, i, i*j), end=<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line"><span class="comment"># 1×1=1</span></span><br><span class="line"><span class="comment"># 1×2=2 2×2=4</span></span><br><span class="line"><span class="comment"># 1×3=3 2×3=6 3×3=9</span></span><br><span class="line"><span class="comment"># 1×4=4 2×4=8 3×4=12 4×4=16</span></span><br><span class="line"><span class="comment"># 1×5=5 2×5=10 3×5=15 4×5=20 5×5=25 </span></span><br><span class="line"><span class="comment"># 1×6=6 2×6=12 3×6=18 4×6=24 5×6=30 6×6=36</span></span><br><span class="line"><span class="comment"># 1×7=7 2×7=14 3×7=21 4×7=28 5×7=35 6×7=42 7×7=49</span></span><br><span class="line"><span class="comment"># 1×8=8 2×8=16 3×8=24 4×8=32 5×8=40 6×8=48 7×8=56 8×8=64</span></span><br><span class="line"><span class="comment"># 1×9=9 2×9=18 3×9=27 4×9=36 5×9=45 6×9=54 7×9=63 8×9=72 9×9=81</span></span><br><span class="line"><span class="comment"># 1×1=1</span></span><br><span class="line"><span class="comment"># 1×2=2 2×2=4</span></span><br><span class="line"><span class="comment"># 1×3=3 2×3=6 3×3=9</span></span><br><span class="line"><span class="comment"># 1×4=4 2×4=8 3×4=12 4×4=16</span></span><br><span class="line"><span class="comment"># 1×5=5 2×5=10 3×5=15 4×5=20 5×5=25</span></span><br><span class="line"><span class="comment"># 1×6=6 2×6=12 3×6=18 4×6=24 5×6=30 6×6=36</span></span><br><span class="line"><span class="comment"># 1×7=7 2×7=14 3×7=21 4×7=28 5×7=35 6×7=42 7×7=49</span></span><br><span class="line"><span class="comment"># 1×8=8 2×8=16 3×8=24 4×8=32 5×8=40 6×8=48 7×8=56 8×8=64</span></span><br><span class="line"><span class="comment"># 1×9=9 2×9=18 3×9=27 4×9=36 5×9=45 6×9=54 7×9=63 8×9=72 9×9=81</span></span><br><span class="line"><span class="comment"># 1×1=1</span></span><br><span class="line"><span class="comment"># 1×2=2   2×2=4</span></span><br><span class="line"><span class="comment"># 1×3=3   2×3=6   3×3=9</span></span><br><span class="line"><span class="comment"># 1×4=4   2×4=8   3×4=12  4×4=16</span></span><br><span class="line"><span class="comment"># 1×5=5   2×5=10  3×5=15  4×5=20  5×5=25</span></span><br><span class="line"><span class="comment"># 1×6=6   2×6=12  3×6=18  4×6=24  5×6=30  6×6=36</span></span><br><span class="line"><span class="comment"># 1×7=7   2×7=14  3×7=21  4×7=28  5×7=35  6×7=42  7×7=49</span></span><br><span class="line"><span class="comment"># 1×8=8   2×8=16  3×8=24  4×8=32  5×8=40  6×8=48  7×8=56  8×8=64</span></span><br><span class="line"><span class="comment"># 1×9=9   2×9=18  3×9=27  4×9=36  5×9=45  6×9=54  7×9=63  8×9=72  9×9=81</span></span><br><span class="line"><span class="comment"># 1x1=1</span></span><br><span class="line"><span class="comment"># 1x2=2   2x2=4</span></span><br><span class="line"><span class="comment"># 1x3=3   2x3=6   3x3=9</span></span><br><span class="line"><span class="comment"># 1x4=4   2x4=8   3x4=12  4x4=16</span></span><br><span class="line"><span class="comment"># 1x5=5   2x5=10  3x5=15  4x5=20  5x5=25</span></span><br><span class="line"><span class="comment"># 1x6=6   2x6=12  3x6=18  4x6=24  5x6=30  6x6=36</span></span><br><span class="line"><span class="comment"># 1x7=7   2x7=14  3x7=21  4x7=28  5x7=35  6x7=42  7x7=49</span></span><br><span class="line"><span class="comment"># 1x8=8   2x8=16  3x8=24  4x8=32  5x8=40  6x8=48  7x8=56  8x8=64</span></span><br><span class="line"><span class="comment"># 1x9=9   2x9=18  3x9=27  4x9=36  5x9=45  6x9=54  7x9=63  8x9=72  9x9=81</span></span><br><span class="line">print(len(<span class="string">'&#123;&#125;\t'</span>.format(<span class="number">5</span>*<span class="number">6</span>)))</span><br><span class="line">print(len(<span class="string">'&#123;&#125;\t'</span>.format(<span class="number">5</span>*<span class="number">60</span>)))</span><br><span class="line">print(len(<span class="string">'&#123;&#125;\t'</span>.format(<span class="number">5</span>*<span class="number">600</span>)))</span><br><span class="line">print(len(<span class="string">'&#123;&#125;\t'</span>.format(<span class="number">5</span>*<span class="number">6000</span>)))</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h2 id="14-4-利润分段计算"><a href="#14-4-利润分段计算" class="headerlink" title="14.4. 利润分段计算"></a>14.4. 利润分段计算</h2><p>请写出一个函数，当输入函数变量月利润为I时，能返回应发放奖金的总数。例如，输出“利润为100000元时，应发放奖金总数为10000元”。<br>其中，企业发放的奖金根据利润提成。<br>利润（I）低于或等于10万元时，奖金可提10%；<br>利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；<br>利润在20万元到40万元之间时，高于20万元的部分可提成5%；<br>利润在40万元到60万元之间时，高于40万元的部分可提成3%；<br>利润在60万元到100万元之间时，高于60万元的部分可提成1.5%；<br>利润高于100万元时，超过100万元的部分按1%提成。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcute_profit</span><span class="params">(I)</span>:</span></span><br><span class="line">    I = I / <span class="number">10000</span></span><br><span class="line">    <span class="keyword">if</span> I &lt;= <span class="number">10</span>:</span><br><span class="line">        a = I * <span class="number">0.01</span></span><br><span class="line">        <span class="keyword">return</span> a * <span class="number">10000</span></span><br><span class="line">    <span class="keyword">elif</span> I &lt;= <span class="number">20</span> <span class="keyword">and</span> I &gt; <span class="number">10</span>:</span><br><span class="line">        b =<span class="number">0.25</span> + I * <span class="number">0.075</span></span><br><span class="line">        <span class="keyword">return</span> b * <span class="number">10000</span></span><br><span class="line">    <span class="keyword">elif</span> I &lt;= <span class="number">40</span> <span class="keyword">and</span> I &gt; <span class="number">20</span>:</span><br><span class="line">        c = <span class="number">0.75</span> + I * <span class="number">0.05</span></span><br><span class="line">        <span class="keyword">return</span> c * <span class="number">10000</span></span><br><span class="line">    <span class="keyword">elif</span> I &lt;= <span class="number">60</span> <span class="keyword">and</span> I &gt; <span class="number">40</span>:</span><br><span class="line">        d = <span class="number">0.95</span> + I * <span class="number">0.03</span></span><br><span class="line">        <span class="keyword">return</span> d * <span class="number">10000</span></span><br><span class="line">    <span class="keyword">elif</span> I &lt;= <span class="number">60</span> <span class="keyword">and</span> I &gt; <span class="number">100</span>:</span><br><span class="line">        e = <span class="number">2</span> + I * <span class="number">0.015</span></span><br><span class="line">        <span class="keyword">return</span> e * <span class="number">10000</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="number">2.95</span> + I * <span class="number">0.01</span></span><br><span class="line">        <span class="keyword">return</span> f * <span class="number">10000</span></span><br><span class="line"></span><br><span class="line">I = int(input(<span class="string">'净利润:'</span>))</span><br><span class="line">profit = calcute_profit(I)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'利润为%d元时，应发奖金总数为%d元'</span> % (I, profit))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcute_profit</span><span class="params">(I)</span>:</span></span><br><span class="line">    arr = [<span class="number">1000000</span>,<span class="number">600000</span>,<span class="number">400000</span>,<span class="number">200000</span>,<span class="number">100000</span>,<span class="number">0</span>] <span class="comment">#这应该就是各个分界值了，把它们放在列表里方便访问</span></span><br><span class="line">    rat = [<span class="number">0.01</span>,<span class="number">0.015</span>,<span class="number">0.03</span>,<span class="number">0.05</span>,<span class="number">0.075</span>,<span class="number">0.1</span>] <span class="comment">#这是各个分界值所对应的奖金比例值</span></span><br><span class="line">    r = <span class="number">0</span>                       <span class="comment">#这是总奖金的初始值</span></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):      <span class="comment">#有6个分界值当然要循环6次</span></span><br><span class="line">        <span class="keyword">if</span> I &gt; arr[idx]:</span><br><span class="line">            r = r + (I - arr[idx]) * rat[idx]</span><br><span class="line">            I = arr[idx]</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">I = int(input(<span class="string">'净利润:'</span>))</span><br><span class="line">profit = calcute_profit(I)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'利润为%d元时，应发奖金总数为%d元'</span> % (I, profit))</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件操作</title>
      <link href="/%E6%96%87%E4%BB%B6/"/>
      <url>/%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>计算机基础笔记。<br><a id="more"></a></p><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><h2 id="巧记"><a href="#巧记" class="headerlink" title="巧记"></a>巧记</h2><blockquote><p>+：双可<br>b：二进制<br>单个：只<br>r报错，w新建 （文件不存在时）</p></blockquote><h2 id="一览表"><a href="#一览表" class="headerlink" title="一览表"></a>一览表</h2><table><thead><tr><th></th><th>方式</th><th>权限</th><th>文件不存在</th><th>其他</th></tr></thead><tbody><tr><td>r</td><td></td><td>只读</td><td>报错</td><td></td></tr><tr><td>rb</td><td>二进制读</td><td>只读</td><td></td><td></td></tr><tr><td>w</td><td></td><td>只写</td><td>新建</td><td>文件内容只能是字符串</td></tr><tr><td>wb</td><td>二进制写</td><td>只写</td><td></td><td></td></tr><tr><td>a</td><td></td><td>追加文件，不可读</td><td></td><td></td></tr><tr><td>ab</td><td>二进制追加</td><td>追加文件，不可读</td><td></td><td></td></tr><tr><td>r+</td><td></td><td>可读可写</td><td>报错</td><td></td></tr><tr><td>rb+</td><td>二进制读写</td><td>可读可写</td><td>报错</td><td></td></tr><tr><td>w+</td><td></td><td>可读可写</td><td>新建</td><td></td></tr><tr><td>wb+</td><td>二进制读写</td><td>可读可写</td><td>新建</td><td></td></tr><tr><td>a+</td><td></td><td>追加文件，可读可写</td><td></td><td></td></tr><tr><td>ab+</td><td>二进制读写</td><td>追加文件，可读可写</td><td></td></tr></tbody></table><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment">#     False</span></span><br><span class="line"><span class="comment">#     True</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment">#     True</span></span><br><span class="line"><span class="comment">#     False</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">'r+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment">#     True</span></span><br><span class="line"><span class="comment">#     True</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment">#     False</span></span><br><span class="line"><span class="comment">#     True</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment">#     True</span></span><br><span class="line"><span class="comment">#     True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 编程语言 </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLTK</title>
      <link href="/NLTK/"/>
      <url>/NLTK/</url>
      
        <content type="html"><![CDATA[<p>《NLTK基础教程——用NLTK和Python库构建机器学习应用》笔记。<br><a id="more"></a><br>维基百科上与NLP相关的页面：<a href="https://en.wikipedia.org/wiki/NLP" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/NLP</a></p><p>目前，NLP已被认为是业界最为稀缺的技能之一。<br>NLTK 库是当前自然语言处理（NLP）领域最为流行、使用最为广泛的库之一。<br>——Gartner公司新一轮的趋势报告，NLP技术赫然高居榜首。</p><h2 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h2><h3 id="函数式统计词频"><a href="#函数式统计词频" class="headerlink" title="函数式统计词频"></a>函数式统计词频</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordfreq</span><span class="params">(str1)</span>:</span></span><br><span class="line">    word_freq=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> tok <span class="keyword">in</span> str1.split():</span><br><span class="line">        <span class="keyword">if</span> tok <span class="keyword">in</span> word_freq:</span><br><span class="line">            word_freq[tok]+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            word_freq[tok]=<span class="number">1</span></span><br><span class="line">    print(word_freq)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    str1=<span class="string">'Hello Python. I like Python.'</span></span><br><span class="line">    wordfreq(str1)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="清理数据"><a href="#清理数据" class="headerlink" title="清理数据"></a>清理数据</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HtmlText</span><span class="params">(url0)</span>:</span></span><br><span class="line">    html0 = requests.get(url).text</span><br><span class="line">    <span class="keyword">return</span> html0</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://python.org/'</span></span><br><span class="line">html = HtmlText(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">tokens = [tok <span class="keyword">for</span> tok <span class="keyword">in</span> BeautifulSoup(html,<span class="string">'lxml'</span>).get_text().split()]</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Total num of tokens:'</span>,str(len(tokens)))</span><br><span class="line">print(tokens[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><h3 id="清洗-词频统计-排序"><a href="#清洗-词频统计-排序" class="headerlink" title="清洗+词频统计+排序"></a>清洗+词频统计+排序</h3><p>注意字典取子集与字典排序。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HtmlText</span><span class="params">(url0)</span>:</span></span><br><span class="line">    html0 = requests.get(url).text</span><br><span class="line">    <span class="keyword">return</span> html0</span><br><span class="line">url = <span class="string">'http://python.org/'</span></span><br><span class="line">html = HtmlText(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">tokens = [tok <span class="keyword">for</span> tok <span class="keyword">in</span> BeautifulSoup(html,<span class="string">'lxml'</span>).get_text().split()]</span><br><span class="line"></span><br><span class="line">freq_dis = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> tok <span class="keyword">in</span> tokens:</span><br><span class="line">    <span class="keyword">if</span> tok <span class="keyword">in</span> freq_dis:</span><br><span class="line">        freq_dis[tok] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        freq_dis[tok] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">sorted_freq_dis= sorted(freq_dis.items(), key=operator.itemgetter(<span class="number">1</span>),reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># key=operator.itemgetter(1)【按第二列排序】</span></span><br><span class="line">print(<span class="string">'Total num of tokens:'</span>,str(len(sorted_freq_dis)))</span><br><span class="line">print(sorted_freq_dis[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure></p><h3 id="nltk-词频-可视化"><a href="#nltk-词频-可视化" class="headerlink" title="nltk+词频+可视化"></a>nltk+词频+可视化</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HtmlText</span><span class="params">(url0)</span>:</span></span><br><span class="line">    html0 = requests.get(url).text</span><br><span class="line">    <span class="keyword">return</span> html0</span><br><span class="line">url = <span class="string">'http://python.org/'</span></span><br><span class="line">html = HtmlText(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">tokens = [tok <span class="keyword">for</span> tok <span class="keyword">in</span> BeautifulSoup(html,<span class="string">'lxml'</span>).get_text().split()]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line">freq_dis_nltk = nltk.FreqDist(tokens)</span><br><span class="line">print(freq_dis_nltk)</span><br><span class="line"><span class="comment">#&lt;FreqDist with 584 samples and 1069 outcomes&gt;</span></span><br><span class="line">print(type(freq_dis_nltk)) </span><br><span class="line"><span class="comment"># &lt;class 'nltk.probability.FreqDist'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> freq_dis_nltk.items():</span><br><span class="line">    print(k,v)</span><br><span class="line">freq_dis_nltk.plot(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><a href="https://upload-images.jianshu.io/upload_images/6908911-5c1a13d8bdc6e418.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">结果</a></p><h3 id="停用词"><a href="#停用词" class="headerlink" title="停用词"></a>停用词</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;stopwords=[word.strip().lower() <span class="keyword">for</span> word <span class="keyword">in</span> open(<span class="string">"english.stop.txt"</span>)]</span><br><span class="line">&gt;&gt;&gt;clean_tokens=[tok <span class="keyword">for</span> tok <span class="keyword">in</span> tokens <span class="keyword">if</span> len(tok.lower())&gt;<span class="number">1</span> <span class="keyword">and</span> (tok.lower() <span class="keyword">not</span> <span class="keyword">in</span> stopwords)]</span><br><span class="line">&gt;&gt;&gt;Freq_dist_nltk=nltk.FreqDist(clean_tokens)</span><br><span class="line">&gt;&gt;&gt;Freq_dist_nltk.plot(<span class="number">50</span>, cumulative=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h2 id="技能树"><a href="#技能树" class="headerlink" title="技能树"></a>技能树</h2><h3 id="里程碑"><a href="#里程碑" class="headerlink" title="里程碑"></a>里程碑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">充分整合了自己的技能</span><br><span class="line">在数据科学领域拥有丰富的项目经验</span><br><span class="line">数据分析和商业智能项目相关的软件开发经验</span><br><span class="line">帮助公司改进了不同产品的一些特性并构建了一些新特性</span><br></pre></td></tr></table></figure><h3 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">正则表达式</span><br><span class="line">Python编程语言基础</span><br><span class="line">语言学</span><br><span class="line">    NLP无疑是对计算机语言学的具体应用。</span><br><span class="line">    计算机语言学家：专用名词，将计算机科学应用于语言处理领域的人。</span><br><span class="line">        主要研究的是语言处理理论</span><br><span class="line">        足够的语言理解能力</span><br><span class="line">        用计算机技能来模拟出语言的不同方面</span><br><span class="line">NLP</span><br><span class="line">    背景知识</span><br><span class="line">    基本概念</span><br><span class="line">        NLP多数情况下指的是</span><br><span class="line">            计算机上各种大同小异的语言处理应用</span><br><span class="line">            用NLP技术构建实际应用程序</span><br><span class="line">            在实践中，NLP与教孩子学语言的过程非常类似</span><br><span class="line">            大多数任务对于人类而言都是非常自然的能力</span><br><span class="line">                如对单词、语句的理解，形成语法和结构都正确的语句等</span><br><span class="line">        NLP的一些任务必须要转向文本分析</span><br><span class="line">            一大部分还仍是当前计算机领域中非常棘手的挑战</span><br><span class="line">    相关的特性</span><br><span class="line">    NLP任务和机器学习应用</span><br><span class="line">    实践</span><br><span class="line">        自行构建出一个能实际运行的、涉及云词的小型应用程序</span><br><span class="line">        构建基本的单词云实例、顺利地产生出云词</span><br><span class="line">        构建一些NLP应用</span><br><span class="line">        构建出大部分与数据科学相关问题的单点解决方案</span><br><span class="line">        本体开发</span><br><span class="line">NLTK</span><br><span class="line">    与文本挖掘或自然语言处理任务相关的库</span><br><span class="line">    NLTK、scikit-learn、panda和NumPy</span><br></pre></td></tr></table></figure><h3 id="NLP工具清单"><a href="#NLP工具清单" class="headerlink" title="NLP工具清单"></a>NLP工具清单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GATE</span><br><span class="line">Mallet</span><br><span class="line">Open NLP</span><br><span class="line">UIMA</span><br><span class="line">Stanford toolkit</span><br><span class="line">Genism</span><br><span class="line">Natural Language Tool Kit (NLTK)</span><br></pre></td></tr></table></figure><p>上述大多数工具都是用Java编写的，在功能上也都很相似，强大实用。有些是由相关组织在建立自己的NLP应用时开发的，有些是开源项目。</p><h3 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h3><p>对于我们所生产出来的那些博客、微博、Facebook订阅、聊天信息、E-mail以及网络评论等，各公司都在致力于收集所有不同种类的数据，以便建立更好的客户针对性，形成有意义的见解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">大数据的概念问世 ⇒ 主要挑战</span><br><span class="line">    业界需要越来越多不仅能处理结构化数据，同时也能处理半结构化或非结构化数据的人才</span><br><span class="line">        要想处理所有的这些非结构化数据源，就需要掌握一些NLP技能的人员</span><br></pre></td></tr></table></figure></p><h3 id="现实应用"><a href="#现实应用" class="headerlink" title="现实应用"></a>现实应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">拼写校正（MS Word/其他编辑器）</span><br><span class="line">信息检索、网页抓取及检索</span><br><span class="line">搜索引擎（Google、Bing、Yahoo!、WolframAlpha）</span><br><span class="line">语音引擎（Siri、Google Voice）、语音识别</span><br><span class="line">垃圾邮件分类（所有电子邮件服务）、垃圾过滤器来过滤垃圾邮件</span><br><span class="line">新闻订阅（Google、Yahoo!等）</span><br><span class="line">机器翻译（Google翻译与其他类似服务）</span><br><span class="line">IBM Watson</span><br><span class="line">虚拟系统的性能优化</span><br><span class="line">气候变化的预测</span><br><span class="line">人力资源分析</span><br><span class="line">语言处理、文本分析、文本处理、文本分类、社交媒体挖掘、用户输入、Twitter句柄及代码</span><br><span class="line">大规模文本挖掘、大型非结构化数据、分布式处理</span><br><span class="line">语块分解</span><br><span class="line">机器学习</span><br><span class="line">数据科学、数据处理</span><br><span class="line">最基本的事情用到Siri</span><br></pre></td></tr></table></figure><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">文本的歧义及其清理</span><br><span class="line">    基本、通用的预处理技术、步骤。在任何文本挖掘和NLP任务中所需的所有预处理步骤。</span><br><span class="line">        断词处理、词干处理、停用词去除</span><br><span class="line">        标识化处理（tokenization）</span><br><span class="line">        词干提取（stemming）</span><br><span class="line">        停用词（stop word）去除</span><br><span class="line">        文本清理技术，如何用NLTK来简化实现</span><br><span class="line">    专属于NPL领域的预处理技术</span><br><span class="line">        词性标注（part-of-speech tagging）</span><br><span class="line">        命名实体识别（Named-entity recognition，NER）</span><br><span class="line">            大多数文本相关的NLP任务都会涉及</span><br><span class="line">    更为复杂的NLP任务上，例如语法解析（parsing）以及其他NLP应用</span><br><span class="line">    NLP应用</span><br><span class="line">        如何进行文本分类，可以用NLTK搭配scikit-learn库来进行</span><br><span class="line">        如何从网页和社交媒体中采集数据</span><br><span class="line">        如何用NLTK进行大规模的文本处理</span><br></pre></td></tr></table></figure><h3 id="探索性数据分析"><a href="#探索性数据分析" class="headerlink" title="探索性数据分析"></a>探索性数据分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">探索性数据分析（EDA）。通常对于一段文本域而言，EDA可能包含了多重含义。</span><br><span class="line">文档的主体术语类型是其中的一个简单用例。</span><br><span class="line">主题是什么？</span><br><span class="line">它们的出现频率如何？</span><br><span class="line">整个分析过程还会或多或少地涉及一些预处理层面的步骤。</span><br><span class="line">试着先用纯Python的方式来实现它，然后用NLTK再将其实现一次。</span><br><span class="line">一种可行的做法是只选取其中的标记，包括数字和字符。</span><br></pre></td></tr></table></figure><h3 id="NLTK背景相关"><a href="#NLTK背景相关" class="headerlink" title="NLTK背景相关"></a>NLTK背景相关</h3><p>NLTK的设计充分体现了简单的魅力。也就是说，对于大多数复杂的NLP任务，它都可以用寥寥几行代码来实现。<br>NLTK：易用性（NLTK库是一个非常易学的工具包）和其对相关概念的解释度。<br>这得益于Python本身非常平缓的学习曲线（毕竟NLTK是用它编写的），人们学习起来会非常快。<br>NLTK库中收纳了NLP领域中的绝大部分任务，它们都被实现得非常优雅，且易于使用。<br>正是出于上述的这些原因，NLTK如今已成为了NLP社区最流行的库之一。</p><h3 id="停用词-1"><a href="#停用词-1" class="headerlink" title="停用词"></a>停用词</h3><p>无用词。由于冠词、代词在大多数文档中都是普遍存在的，因而对信息的识别没有帮助。<br>a an the<br>of for =<br>在大多数NLP及信息检索任务中，人们通常都会先删除掉这些停用词。</p><h2 id="背景相关"><a href="#背景相关" class="headerlink" title="背景相关"></a>背景相关</h2><h3 id="浪潮"><a href="#浪潮" class="headerlink" title="浪潮"></a>浪潮</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AlphaGo</span><br><span class="line">Master已经对人类顶级高手连胜60局了。</span><br><span class="line">媒体的热度，越来越火了。</span><br><span class="line">Google在汽车驾驶和围棋这两个领域的项目得到了很好的进展和宣传</span><br><span class="line">    而这两个领域在过去被很多人想当然地认为是人类的专属领域。</span><br></pre></td></tr></table></figure><p><a href="https://upload-images.jianshu.io/upload_images/6908911-6c01a13213e00401.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">发展轨迹</a></p><h3 id="恐惧"><a href="#恐惧" class="headerlink" title="恐惧"></a>恐惧</h3><p>在专属领域接连被突破情况下，一些人得了“机器恐惧症”。例如高晓松先生的这段微博：</p><p><blockquote><br>@高晓松　<br>作为自幼学棋，崇拜国手的业余棋手，看了Master50 : 0横扫中日韩顶尖高手的对局，难过极了。为所有的大国手伤心，路已经走完了。多少代大师上下求索，求道求术，全被破解。未来一个八岁少年只要一部手机就可以战胜九段，荣誉信仰灰飞烟灭。等有一天，机器做出了所有的音乐和诗歌，我们的路也会走完。<br></blockquote><br>对于机器来说，围棋是一种基于统计学概率的决策模型，属于数学领域的问题，它本来就是机器的强项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">人们在讨论人工智能的时候容易将机器“人格化” ⇒ 恐惧</span><br><span class="line">很多科幻作品就是这么干的，这看起来很合理，但问题是机器无论如何都不是人。</span><br><span class="line">用围棋对于人类的难度来推导机器智能的进步，其实是很没有逻辑的事情。</span><br></pre></td></tr></table></figure></p><p>事实上，今天所流行的这些人工智能方法都是在20世纪70年代前后提出的理论。<br>今天的辉煌主要是由于硬件的进步为实现提供了基础，但在智能上并没有多大的实质突破。<br>人们对于鉴定人工智能的主要标准早有定论，那就是图灵测试。</p><h3 id="图灵测试"><a href="#图灵测试" class="headerlink" title="图灵测试"></a>图灵测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">对于以下两种智能来说，困难的定义是截然不同的</span><br><span class="line">    机器的专长是数学领域</span><br><span class="line">    图灵测试关注的是人机对话能力</span><br><span class="line">        自然语言处理就是首当其冲的一个领域</span><br><span class="line">            目的就是把人类的文本、音频转换成可被分析的数学模型</span><br><span class="line">                这对于机器来说是比围棋困难得多的事情</span><br><span class="line">                这也是人类和机器的根本区别</span><br><span class="line">                机器能通过对话骗到你的一百块钱，也比它下棋下赢世界冠军更智能</span><br></pre></td></tr></table></figure><h2 id="名片"><a href="#名片" class="headerlink" title="名片"></a>名片</h2><h3 id="Nitin-Hardeniya"><a href="#Nitin-Hardeniya" class="headerlink" title="Nitin Hardeniya"></a>Nitin Hardeniya</h3><p>Nitin Hardeniya。数据科学家。本书作者。<br>拥有IIIT-H的计算语言学硕士学位，并且是5项客户体验专利的作者。<br>4年以上从业经验，期间分别任职于Fidelity、Groupon等公司，业务横跨各个不同的领域。<br>至少拥有5年日常使用Python的工作经验。他相信，用Python可以构建出大部分与数据科学相关问题的单点解决方案。<br>他热衷于研究语言处理及大型非结构化数据。<br>他将自己写这本书的经历看成是自己职业生涯的众多荣誉之一，希望用一种非常简单的形式为人们介绍与NLP和机器学习相关的、所有的这些复杂工具。在这本书中，他为读者提供了一种变通方法，即使用一些相关特定能力的Python库，如NLTK、scikit-learn、panda和NumPy等。</p><h3 id="Afroz-Hussain"><a href="#Afroz-Hussain" class="headerlink" title="Afroz Hussain"></a>Afroz Hussain</h3><p>Afroz Hussain。数据科学家。本书审阅者。<br>目前在PredictifyMe公司从事与美国基础数据科学、机器学习起步相关的研究。<br>他在数据科学领域拥有丰富的项目经验、多年使用Python、scikit-learn，以及基于NLTK进行文本挖掘的工作经历。<br>10年以上的编程经验以及与数据分析和商业智能项目相关的软件开发经验。<br>此外，他还通过在线课程以及参加Kaggle比赛等活动，获得了不少数据科学领域的新技能。</p><h3 id="Sujit-Pal"><a href="#Sujit-Pal" class="headerlink" title="Sujit Pal"></a>Sujit Pal</h3><p>Sujit Pal。本书审阅者。<br>目前就职于<code>Elsevier实验室</code>，这是一个包含了<code>Reed-Elsevier PLC工作组</code>在内的研发团队。<br>他的兴趣主要集中在信息检索、分布式处理、本体开发、自然语言处理和机器学习这几个领域。<br>他很喜欢用Python、Scala和Java来编写自己的代码。<br>他充分整合了自己在这些方面的技能，帮助公司改进了不同产品的一些特性并构建了一些新特性。<br>他深信自己需要终身学习，并且也在博客<a href="http://sujitpal.blogspot.com/" target="_blank" rel="noopener">sujitpal.blogspot.com</a>中分享其经验。</p><h3 id="Kumar-Raj"><a href="#Kumar-Raj" class="headerlink" title="Kumar Raj"></a>Kumar Raj</h3><p>Kumar Raj。第二代数据科学家。本书审阅者。<br>印度理工学院Kharagpur技术分校。<br>目前就职于惠普软件的研发部门，为其提供相关的解决方案。<br>主要负责开发以惠普软件产品为核心的分析层。<br>两年以上各种大数据分析领域的工作经验，涉及文本分析、网页抓取及检索、人力资源分析、虚拟系统的性能优化，以及气候变化的预测等。</p><h2 id="优质教程"><a href="#优质教程" class="headerlink" title="优质教程"></a>优质教程</h2><p>《Google Python class》的参考资料：<a href="https://developers.google.com/edu/python" target="_blank" rel="noopener">https://developers.google.com/edu/python</a><br><a href="https://wiki.python.org/moin/BeginnersGuide。" target="_blank" rel="noopener">https://wiki.python.org/moin/BeginnersGuide。</a></p><h2 id="机器学习工具箱"><a href="#机器学习工具箱" class="headerlink" title="机器学习工具箱"></a>机器学习工具箱</h2><p><a href="http://www.wordle.net/advanced" target="_blank" rel="noopener">http://www.wordle.net/advanced</a>  词云。按频率得到词云图。是在大量非结构化文本中进行可视化处理的一种好方法。也是文本分析领域中相当流行的一种运用。</p><h2 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h2><p><a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a><br><a href="https://www.anaconda.com/" target="_blank" rel="noopener">https://www.anaconda.com/</a><br><a href="http://www.nltk.org/" target="_blank" rel="noopener">http://www.nltk.org/</a><br><a href="http://www.nltk.org/install.html" target="_blank" rel="noopener">http://www.nltk.org/install.html</a>  安装说明<br><a href="https://scikit-learn.org/stable/" target="_blank" rel="noopener">https://scikit-learn.org/stable/</a><br><a href="http://www.numpy.org/" target="_blank" rel="noopener">http://www.numpy.org/</a><br><a href="http://www.scipy.org/" target="_blank" rel="noopener">http://www.scipy.org/</a><br><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">https://pandas.pydata.org/</a><br><a href="https://matplotlib.org/" target="_blank" rel="noopener">https://matplotlib.org/</a><br><a href="https://radimrehurek.com/" target="_blank" rel="noopener">https://radimrehurek.com/</a><br><a href="https://scrapy.org" target="_blank" rel="noopener">https://scrapy.org</a><br><a href="https://dev.twitter.com/overview/api/twitter-libraries" target="_blank" rel="noopener">https://dev.twitter.com/overview/api/twitter-libraries</a><br><a href="https://developers.facebook.com/" target="_blank" rel="noopener">https://developers.facebook.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 软件开发 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫知识结构</title>
      <link href="/%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/"/>
      <url>/%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>爬虫体系归纳。<br><a id="more"></a></p><h1 id="1-爬虫基础"><a href="#1-爬虫基础" class="headerlink" title="1. 爬虫基础"></a>1. 爬虫基础</h1><p>爬虫工程师的前景、爬虫工作原理、网络爬虫工作原理详解</p><ul><li>从结构化（HTML）和非结构化（流数据）的数据中获取信息<br>什么是网络爬虫、如何分析静态网站、如何开发一个完整的爬虫<br>动态网站分析和爬取的两种思路<br>如何从HTML页面中提取出有效的数据，以及对如何将数据合理地存储成各类文件以实现持久化。<br>一个爬虫所应该具有的全部功能组件以及编码实现<br>分布式爬虫，功能和基础爬虫一致，在单机爬虫的基础上进行分布式改进，帮助大家从根本上了解分布式爬虫，消除分布式爬虫的神秘感。<br>、动态网站的抓取、协议分析<br>爬虫的设计及实现流程<br>熟悉抓包分析请求并模拟<br>正则表达式、Path、css选择器、Xpath<br>熟练使用selenium、lxml、bs4，对xml、html的文本进行抓取解析清洗<br>完整地介绍了爬虫程序的每一个知识模块<br>网络爬虫<br>组成<br>什么是<br>初识<br>爬虫（网页）抓取原理及技术<br>基本议题和框架<br>遇到爬虫问题的时候的各种解决方法<h2 id="1-1-为什么要学"><a href="#1-1-为什么要学" class="headerlink" title="1.1. 为什么要学"></a>1.1. 为什么要学</h2>为什么、好处、重要性、作用、意义、优势、不足、历史、现状、趋势、大背景。<br>不断解决遇到的疑惑。<br>科技如何给大家带来实效<br>数据的存储对公司有什么影响<br>如何存储数据⇒高效利用 方便对接其他部门和业务<br>如何使用淘宝网上所有绿色产品（如空气净化器）的销量数据来做潜在市场评估<br>如何一直高效率、持续不断地从日新月异的网站中获取信息<br>互联网的运作和结构<br>爬虫程序是收集信息的基础。</li><li>学习网络爬虫的原因</li><li>网络爬虫带来的价值</li><li>飞速发展的大数据时代。<br>市场营销：丰富的数据信息让我们有能力更好地了解消费者、顾客和竞争对手。电商网站评论收集可以及时知悉顾客对于产品的看法，通过微博数据收集可以及时洞察潜在消费者的购买意向和需求。<br>企业管理人员：通过对手网站信息收集可以及时知晓对手的实时动态，真正做到运筹帷幄之中，决胜千里之外。<br>打开数据信息收集大门的钥匙。<br>有志于在数据分析方面有所突破。<br>使用Python编写网络爬虫程序获取互联网上的大数据是当前的热门专题。<br>技术创新驱动变革的潮流。<br>数据量爆发式增长的互联网时代。<br>大数据分析的火热。<br>大数据成为业界与学术界最火热的话题之一。<br>数据已经成为每个公司极为重要的资产。<br>互联网大量的公开数据为个人和公司提供了以往想象不到的可以获取的数据量。<br>网络爬虫技术是大数据分析的第一环。有助于获取有用的公开数据集。<br>理解了信息的获取、存储和整理，才有可能系统地收集和应用不同源头和千变万化的网站信息。<br>DT的核心是从信息的源头去理解和分析，以做出能打动对方的行动决策方案。<br>由谷歌搜索到现在的大数据时代，爬虫技术的重要性和广泛性一直很突出。<br>爬取目标网站的资料、分析和建立应用。 获取数据自动、实时、及时、省时。<br>电商市场的重要性日益凸显。了解对手的产品特点、价格以及销量情况，及时跟进产品开发进度和营销策略，从而知己知彼，赢得竞争。过去，两个痛点——无法自动化和无法实时获取。产品研发部门会手动访问一个个电商产品页面，人工复制并粘贴到Excel表格中，制作竞品分析报告。但是这种重复性的手动工作不仅浪费宝贵的时间，一不留神复制少了一个数字还会导致数据错误；对手产品的销量则是由某一家咨询公司提供报告，每周一次，但是报告缺乏实时性，难以针对快速多变的市场及时调整价格和营销策略。<br>学会一项新的技术<br>第一方企业（也就是拥有这些数据的企业）做出更好的决策<br>第三方企业也可从中受益<br>数据共享<br>Python：热门的开源软件（这意味着有人源源不断地开发更新且更强大的包给你用）<br>Python：简单、简洁、易学、有效、可扩展性的计算机语言。 最受欢迎的程序语言之一。 强大而丰富的库。<br>C语言：底层，学习成本大。<h2 id="1-2-类型"><a href="#1-2-类型" class="headerlink" title="1.2. 类型"></a>1.2. 类型</h2>有哪些</li><li>聚焦</li><li>增量式<h2 id="1-3-技能"><a href="#1-3-技能" class="headerlink" title="1.3. 技能"></a>1.3. 技能</h2>技能总览<br>实现原理<br>实现技术<br>可以做什么<br>开发技术</li><li>三大库</li><li>中间件（Middleware）、中间件的变化、中间件延伸</li><li>提升速度、迅速技巧、倍速</li><li>抓包与中间人</li><li>定向爬取技术<br>部署与计划运行<br>攻防战<br>Android原生App<br>基于逆向分析小程序的<br>常见搜索算法<br>JSONAPl和AJAX<h2 id="1-4-应用场景"><a href="#1-4-应用场景" class="headerlink" title="1.4. 应用场景"></a>1.4. 应用场景</h2>一些附加值更高的“事”，如人工智能、统计建模等。<br>机器学习和统计算法分析<br>在营销领域可以帮助企业做好4P（Product：产品创新，Place：智能选址，Price：动态价格，Promotion：数据驱动的营销活动）<br>在金融领域，数据驱动的征信等应用会带来越来越大的价值。<br>公开数据的应用价值<br>所有网络数据<br>社交媒体的每一条发帖。社交媒体在用户生态圈的自我交互下产生大量文本、图片和视频数据。<br>团购网站的价格及点评。电商商产品的描述、价格<br>招聘网站的招聘信息<br>搜索引擎从数据库中提取搜索结果<h2 id="1-5-流程图"><a href="#1-5-流程图" class="headerlink" title="1.5. 流程图"></a>1.5. 流程图</h2>具体步骤及各步骤之间的关系。<br>获【取】网页、解【析】网页（提取数据）、【存】储数据、整【理】。</li><li>获取网页：给一个网址发送请求，该网址会返回整个网页的数据。类似于在浏览器中键入网址并按回车键，然后可以看到网站的整个页面。</li><li>解析网页：从整个网页的数据中提取想要的数据。类似于在浏览器中看到网站的整个页面，但是你想找的是产品的价格，价格就是你想要的数据。</li><li>存储数据：把数据存储下来。<br>三个流程的技术实现:</li><li>获取网页<br>获取网页的基础技术：request、urllib和selenium（模拟浏览器）。<br>获取网页的进阶技术：多进程多线程抓取、登录抓取、突破IP封禁和服务器抓取。<br>并发编程(多线程(池)、多进程(池)、futures)<br>异步编程(asyncio)</li><li>解析网页<br>解析网页的基础技术：re正则表达式、BeautifulSoup和lxml。<br>解析网页的进阶技术：解决中文乱码。</li><li>存储数据<br>存储数据的基础技术：存入txt文件和存入csv文件。<br>存储数据的进阶技术：存入MySQL数据库和存入MongoDB数据库。<br>发起请求——通过HTTP库向⽬目标站点发起请求，即发送一个Request，请求可以包含额外的headers等信息，等待服务器器响应。<br>获取响应内容 ——如果服务器器能正常响应，会得到一个Response，Response的内容便便是所要获取的⻚页⾯面内容，类型可能有HTML，Json字符串串，二进制数据（如图⽚片视频）等类型。<br>解析内容 ——得到的内容可能是HTML，可以⽤用正则表达式、⽹网⻚页解析库进⾏解析。可能是Json，可以直接转为Json对象解析，可能是二进制数据，可以做保存或者进一步的处理理。<br>保存数据 ——保存形式多样，可以存为文本，也可以保存⾄至数据库，或者保存特定格式的文件。<h1 id="2-获取网页"><a href="#2-获取网页" class="headerlink" title="2. 获取网页"></a>2. 获取网页</h1><h2 id="2-1-法律和道德、注意事项"><a href="#2-1-法律和道德、注意事项" class="headerlink" title="2.1. 法律和道德、注意事项"></a>2.1. 法律和道德、注意事项</h2>网络爬虫是否合法<br>法律问题<br>道德协议<br>在充满爬虫的世界里做一个好公民<br>用户爬虫的那些事儿<br>是否合法<br>基本议题<br>成规模的爬虫一般都会使用集群，一般的小网站服务器规模可能不如爬虫集群的规模大。所以很多时候我们最好对要爬的网站限制一下频率。否则这些爬虫就相当于DoS攻击集群了！一般的网站都会有robots.txt可以参考。<br>爬虫有哪些潜在的法律纠纷、公司的爬虫合不合法 。<br>建立共利的互联网环境，不能把爬虫作为窃取数据的工具。<br>爬虫必须在合情、合法、合理的情况下获取和应用。<br>尊重数据供应者的知识产权和正常运作才能产生长久共利的环境。<br>保障对方平台的正常运作是每个程序员都应当做到的<br>法律：<br>互联网世界已经通过自身的协议建立起一定的道德规范（Robots协议）。该协议是国际互联网界通行的道德规范，虽然没有写入法律，但是每一个爬虫都应该遵守这项协议。<br>法律部分还在建立和完善中。<br>如果抓取的数据属于个人使用或科研范畴，基本不存在问题。当你爬取网站数据时，无论是否仅供个人使用，都应该遵守Robots协议。<br>而如果数据属于商业盈利范畴，就要就事而论，有可能属于违法行为，也有可能不违法。<br>大部分网站不欢迎使用程序进行登录，因为需要登录才能查看的数据不属于公开数据。最好不要使用此程序获取非公开数据或批量注册，若出现了问题，可能需负法律责任。<br>建议使用API。<br>Robots协议<br>Robots协议（爬虫协议）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。<br><a href="https://www.taobao.com/robots.txt。" target="_blank" rel="noopener">https://www.taobao.com/robots.txt。</a><br>Allow开头的URL是允许robot访问的。例如，Allow:/article允许百度爬虫引擎访问/article.htm、/article/12345.com等。<br>Disallow不允许百度爬虫引擎访问的。例如，Disallow:/product/不允许百度爬虫引擎访问/product/12345.com等。<br>Disallow:/禁止百度爬虫访问除了Allow规定页面外的其他所有页面。<br>taobao的robots.txt对不同的搜索引擎所允许爬行范围不同。/product项对应淘宝内部的产品信息。当在搜索框中搜索“淘宝iphone7”的时候，Google可搜到淘宝中的产品，而百度不能。<br>过于快速或者频密的网络爬虫都会对服务器产生巨大的压力。→调集资源限制爬虫，保护用户的流量和减少有价值数据的流失。<br>反爬方维权：网站封锁你IP，法律行动。<br>将请求的速度限定在一个合理的范围之内。<br>每年的三月份会迎来一个爬虫高峰期。因为有大量的大学生五月份交论文，在写论文的时候会选择爬取数据，也就是3月份爬取数据，4月份分析数据，5月份交论文。<br>2007年，爱帮网利用垂直搜索技术获取了大众点评网上的商户简介和消费者点评，并且直接大量使用，大众点评网多次要求爱帮网停止使用这些内容，而爱帮网以自己是使用垂直搜索获得的数据为由，拒绝停止抓取大众点评网上的内容，并且质疑大众点评网对这些内容所享有的著作权。为此，双方开打了两场官司。2011年1月，北京海淀法院做出判决：爱帮网侵犯大众点评网著作权成立，应当停止侵权并赔偿大众点评网经济损失和诉讼必要支出。<br>2013年10月，百度诉360违反Robots协议。百度方面认为，360违反了Robots协议，擅自抓取、复制百度网站内容并生成快照向用户提供。2014年8月7日，北京市第一中级人民法院做出一审判决，法院认为被告奇虎360的行为违反了《反不正当竞争法》相关规定，应赔偿原告百度公司70万元。<br>虽然说大众点评上的点评数据、百度知道的问答由用户创建而非企业，但是搭建平台需要投入运营、技术和人力成本，所以平台拥有对数据的所有权、使用权和分发权。【网站的知识产权】<br>以上两起败诉告诉我们，在爬取网站的时候需要限制自己的爬虫，遵守Robots协议和约束网络爬虫程序的速度。如果违反了这些规定，很可能会吃官司，并且败诉的概率相当高。<h2 id="2-2-网页特点"><a href="#2-2-网页特点" class="headerlink" title="2.2. 网页特点"></a>2.2. 网页特点</h2>静态网页：纯粹HTML格式的网页通常被称为静态网页。其在浏览器中展示的内容都在HTML源代码中。早期的网站一般都是由静态网页制作的。容易爬。<br>动态网页：使用JavaScript、AJAX等技术展现的网页。很多内容并不会出现在HTML源代码中。主流网站一般都会使用。不容易爬。<br>如何获取网页</li><li>如何使用API获取数据【API是官方提供的数据获取通道，因此数据的获取是没有争议的。如果一个网站提供API获取数据，那么最好使用API获取，既简单又方便。】</li><li>如何安装Requests库？如何使用Requests库获取响应内容（整个网页的源代码）</li><li>基于深度和广度的爬虫。取深度加大到第3层，看看最短在多少秒之内能够完成前3层的爬虫。【深度优先的递归爬虫，广度优先的多线程爬虫】</li><li>静态网页是啥</li><li>动态网页是啥</li><li>动态网页的实例</li><li>什么是动态抓取？两种动态网页抓取技术获取动态网页的数据<ul><li>通过浏览器审查元素解析真实网页地址【AJAX动态解析地址】</li><li>使用selenium模拟浏览器的方法<h3 id="2-2-1-获取动态网页的真实地址"><a href="#2-2-1-获取动态网页的真实地址" class="headerlink" title="2.2.1. 获取动态网页的真实地址"></a>2.2.1. 获取动态网页的真实地址</h3>Chrome浏览器的检查（审查元素）功能：浏览器右键⇒检查⇒Network⇒XHR或JS选项<br>Network：显示浏览器从网页服务器中得到的所有文件。一般这些数据以json文件格式获取。<br>在Network选项卡下，找到真正的评论文件。<br>单击Preview标签即可查看数据。可以按 ctrl+F 进行查找。顶部search也可以。<br>Elements会出现相应的code所在的地方。<h2 id="2-3-抓包分析工具"><a href="#2-3-抓包分析工具" class="headerlink" title="2.3. 抓包分析工具"></a>2.3. 抓包分析工具</h2>Fiddler<br>什么是<br>与爬虫的关系<br>基本原理与基本界面<br>捕获会话功能<br>QuickExec命令行<br>断点功能<br>会话查找功能<br>的其他功能<h2 id="2-4-API"><a href="#2-4-API" class="headerlink" title="2.4. API"></a>2.4. API</h2>网站API分析<br>使用<br>秘钥获取<br>数据获取<h2 id="2-5-常用库"><a href="#2-5-常用库" class="headerlink" title="2.5. 常用库"></a>2.5. 常用库</h2>Urllib库</li></ul></li><li>什么是</li><li>快速使用</li><li>URLError异常处理<br>requests<br>BeautifulSoup4<br>CSVFeedSpider<br>强大的Requests库能够让你轻易地发送HTTP请求，这个库功能完善，而且操作非常简单<h2 id="2-6-requests"><a href="#2-6-requests" class="headerlink" title="2.6. requests"></a>2.6. requests</h2><a href="http://cn.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="noopener">http://cn.python-requests.org/zh_CN/latest/user/quickstart.html</a></li></ul><p>chardet</p><source lang="py"><br>import requests<br>import chardet<br>r = requests.get(‘<a href="http://www.baidu.com&#39;" target="_blank" rel="noopener">http://www.baidu.com&#39;</a>)<br>print(chardet.detect(r.content))<br>r.encoding = chardet.detect(r.content)[‘encoding’]<br>print(r.text)<br><source lang="py"><br>import requests<br><br># POST<br>postdata = {‘username’: ‘blog:qiyeboy’, ‘password’:1}<br>r = requests.post(‘<a href="http://www.xxxxxx.com/login&#39;" target="_blank" rel="noopener">http://www.xxxxxx.com/login&#39;</a>, data=postdata)<br><br># OTHERS<br>r = requests.put(‘<a href="http://www.xxxxxx.com/put&#39;" target="_blank" rel="noopener">http://www.xxxxxx.com/put&#39;</a>, data = {‘key’:’value’})<br>r = requests.delete(‘<a href="http://www.xxxxxx.com/delete&#39;" target="_blank" rel="noopener">http://www.xxxxxx.com/delete&#39;</a>)<br>r = requests.head(‘<a href="http://www.xxxxxx.com/get&#39;" target="_blank" rel="noopener">http://www.xxxxxx.com/get&#39;</a>)<br>r = requests.options(‘<a href="http://www.xxxxxx.com/get&#39;" target="_blank" rel="noopener">http://www.xxxxxx.com/get&#39;</a>)<br><br># 带参数的get【?&amp;】：网址后面紧跟着“? ”, “? ”后面还有参数<br>payload = {‘Keywords’: ‘blog:qiyeboy’, ‘pageindex’:1}<br>r = requests.get(‘<a href="http://zzk.cnblogs.com/s/blogpost&#39;" target="_blank" rel="noopener">http://zzk.cnblogs.com/s/blogpost&#39;</a>, params=payload)<br>print(r.url)<br><br># 编码<br>r.content #返回字节<br>r.text #返回文本<br>r.encoding #根据HTTP头猜测的网页编码格式<br>r.encoding=’utf-8’ # 自行设置编码格式<br>print(r.text)<br><br># 使用chardet  confidence 检测精度<br>import chardet<br>print(chardet.detect(r.content)) # {‘encoding’: ‘utf-8’, ‘confidence’: 0.99, ‘language’: ‘’}<br>r.encoding = chardet.detect(r.content)[‘encoding’]  #直接将chardet检测到的编码赋值给r.encoding后text就不会出现乱码<br><br># 流模式<br><br>顺序page for循环<br>urllib.request.urlretrive()<br>信息过滤<br>唯一特殊标识<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://www.santostang.com/'</span>)</span><br><span class="line"><span class="comment"># ========【r的方法】========</span></span><br><span class="line"><span class="comment"># r response响应对象，存储了服务器响应的内容，以从中获取需要的信息</span></span><br><span class="line"><span class="comment"># r.encoding  服务器内容使用的文本编码。</span></span><br><span class="line"><span class="comment"># r.status_code 响应状态码。检测请求是否正确响应。</span></span><br><span class="line"><span class="comment"># r.text  字符串方式的响应体。会自动根据响应头部的字符编码进行解码。</span></span><br><span class="line"><span class="comment"># r.content 字节方式的响应体。会自动解码gzip和deflate编码的响应数据。gzip文件用这个。</span></span><br><span class="line"><span class="comment"># r.json()  Requests中内置的JSON解码器。</span></span><br><span class="line"><span class="comment"># r.url r对应的请求的页面网址</span></span><br><span class="line"><span class="comment"># ========【requests.get的参数设置】========</span></span><br><span class="line"><span class="comment">## URL参数、请求头、发送POST请求、设置超时</span></span><br><span class="line"><span class="comment">## ----------【params】：dict ----------</span></span><br><span class="line"><span class="comment">### get传递url参数。http://httpbin.org/get?key1=value1&amp;key2=value2</span></span><br><span class="line">key_dict = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">'http://httpbin.org/get'</span>, params=key_dict)</span><br><span class="line"><span class="comment">## ----------【headers】：dict ----------</span></span><br><span class="line"><span class="comment">### 有的网站不带请求头会返回错误的数据。带请求头使程序更像人的手动行为</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,</span><br><span class="line"><span class="string">'Host'</span>: <span class="string">'www.santostang.com'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">'http://www.santostang.com/'</span>, headers=headers)</span><br><span class="line"><span class="comment">## ----------【data】: dict ----------</span></span><br><span class="line"><span class="comment">### 用于提交表单。data在发出请求的时候会自动编码为表单形式。</span></span><br><span class="line">key_dict = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data=key_dict)</span><br><span class="line"><span class="comment">## ----------【timeout】: 单位为秒 ----------</span></span><br><span class="line"><span class="comment">### 如果服务器在timeout秒内没有应答，就返回异常。一般会把这个值设置为20秒。</span></span><br><span class="line">link = <span class="string">"http://www.santostang.com/"</span></span><br><span class="line">r = requests.get(link, timeout= <span class="number">0.001</span>)</span><br><span class="line"><span class="comment">## 返回的异常为：</span></span><br><span class="line"><span class="comment">## ConnectTimeout: HTTPConnectionPool(host='www.santostang.com', port=80): Max retries exceeded with url: / (Caused by ConnectTimeoutError(&lt;requests.packages.urllib3.connection.HTTPConnection object at 0x00000000077806D8&gt;, 'Connection to www.santostang.com timed out. (connect timeout=0.001)'))</span></span><br><span class="line"><span class="comment">## 异常值的意思是，时间限制在0.001秒内，连接到地址为www.santostang.com的时间已到。</span></span><br><span class="line"><span class="comment"># https://github.com/Santostang/PythonScraping/blob/master/第一版/Cha 3 -静态网页抓取/Cha 3 -静态网页抓取.ipynb</span></span><br></pre></td></tr></table></figure><h2 id="2-7-urllib"><a href="#2-7-urllib" class="headerlink" title="2.7. urllib"></a>2.7. urllib</h2><h3 id="2-7-1-核心代码"><a href="#2-7-1-核心代码" class="headerlink" title="2.7.1. 核心代码"></a>2.7.1. 核心代码</h3><p><code>urllib2.urlopen(&lt;&gt;).read()</code><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 核心代码</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="comment">## 请求1</span></span><br><span class="line">response = urllib2.urlopen(&lt;&gt;)</span><br><span class="line"><span class="comment">## 请求2</span></span><br><span class="line">values = &#123;&#125;</span><br><span class="line">values[<span class="string">'username'</span>] = <span class="string">"XX"</span></span><br><span class="line">values[<span class="string">'password'</span>] = <span class="string">"XXXX"</span></span><br><span class="line"><span class="comment"># 此三行等价于  values = &#123;"username":"XX","password":"XXXX"&#125;</span></span><br><span class="line">data = urllib.urlencode(values)</span><br><span class="line">request = urllib2.Request(url,data)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">text = response.read()</span><br></pre></td></tr></table></figure></p><h3 id="2-7-2-eg-1-直接GET"><a href="#2-7-2-eg-1-直接GET" class="headerlink" title="2.7.2. eg.1 直接GET"></a>2.7.2. eg.1 直接GET</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line">response = urllib2.urlopen(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="keyword">print</span> response.read()</span><br></pre></td></tr></table></figure><h3 id="2-7-3-eg-2-带参数的GET"><a href="#2-7-3-eg-2-带参数的GET" class="headerlink" title="2.7.3. eg.2 带参数的GET"></a>2.7.3. eg.2 带参数的GET</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"> </span><br><span class="line">values=&#123;&#125;</span><br><span class="line">values[<span class="string">'username'</span>] = <span class="string">"XX"</span></span><br><span class="line">values[<span class="string">'password'</span>]=<span class="string">"XXXX"</span></span><br><span class="line">data = urllib.urlencode(values)</span><br><span class="line">url = <span class="string">"http://passport.csdn.net/account/login"</span></span><br><span class="line">geturl = url + <span class="string">"?"</span>+data</span><br><span class="line">request = urllib2.Request(geturl)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"><span class="keyword">print</span> response.read()</span><br></pre></td></tr></table></figure><h3 id="2-7-4-eg-3-POST"><a href="#2-7-4-eg-3-POST" class="headerlink" title="2.7.4. eg.3 POST"></a>2.7.4. eg.3 POST</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"> </span><br><span class="line">values = &#123;<span class="string">"username"</span>:<span class="string">"XX"</span>,<span class="string">"password"</span>:<span class="string">"XXXX"</span>&#125;</span><br><span class="line">data = urllib.urlencode(values)</span><br><span class="line">url = <span class="string">"&lt;post网址&gt;"</span></span><br><span class="line">request = urllib2.Request(url,data)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"><span class="keyword">print</span> response.read()</span><br></pre></td></tr></table></figure><h3 id="2-7-5-等效写法"><a href="#2-7-5-等效写法" class="headerlink" title="2.7.5. 等效写法"></a>2.7.5. 等效写法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># response = urllib2.urlopen("http://www.baidu.com")</span></span><br><span class="line">request = urllib2.Request(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"><span class="comment"># request对象，推荐写法，通过构建一个request，服务器响应请求得到应答，逻辑上清晰明确</span></span><br></pre></td></tr></table></figure><h3 id="2-7-6-类方法解析"><a href="#2-7-6-类方法解析" class="headerlink" title="2.7.6. 类方法解析"></a>2.7.6. 类方法解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlopen(url, data, timeout)</span><br><span class="line">url，必选。</span><br><span class="line">data，可选。默认为空None。访问URL时要传送的数据。</span><br><span class="line">timeout，可选。默认为 socket._GLOBAL_DEFAULT_TIMEOUT。设置超时时间。</span><br><span class="line">urlopen方法之后，返回一个response对象。</span><br></pre></td></tr></table></figure><h3 id="2-7-7-response"><a href="#2-7-7-response" class="headerlink" title="2.7.7. response"></a>2.7.7. response</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> response</span><br><span class="line">&lt;addinfourl at <span class="number">139728495260376</span> whose fp = &lt;socket._fileobject object at <span class="number">0x7f1513fb3ad0</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="2-7-8-设置代理"><a href="#2-7-8-设置代理" class="headerlink" title="2.7.8. 设置代理"></a>2.7.8. 设置代理</h3><p><code>proxy_handler = urllib2.ProxyHandler({&quot;http&quot; : &#39;http://some-proxy.com:8080&#39;})</code><br>设置代理 ProxyHandler 参数为http字典<br><code>opener = urllib2.build_opener(proxy_handler)</code><br>打开代理 build_opener 参数为ProxyHandler<br><code>urllib2.install_opener(opener)</code><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line">enable_proxy = <span class="keyword">True</span></span><br><span class="line">proxy_handler = urllib2.ProxyHandler(&#123;<span class="string">"http"</span> : <span class="string">'http://some-proxy.com:8080'</span>&#125;)</span><br><span class="line">proxy_handler_null = urllib2.ProxyHandler(&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> enable_proxy:</span><br><span class="line">    opener = urllib2.build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    opener = urllib2.build_opener(proxy_handler_null)</span><br><span class="line">urllib2.install_opener(opener)</span><br></pre></td></tr></table></figure></p><p>urllib2 默认会使用环境变量 http_proxy 来设置 HTTP Proxy。<br>有些网站会检测某一时间段内某个IP 的访问次数，如果访问次数过多，网站会禁止访问。<br>这时可以设置一些代理服务器来工作，每隔一段时间换一个代理。 </p><h3 id="2-7-9-设置headers"><a href="#2-7-9-设置headers" class="headerlink" title="2.7.9. 设置headers"></a>2.7.9. 设置headers</h3><p><code>request = urllib2.Request(url, data, headers)</code><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123; <span class="string">'User-Agent'</span> : <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span>  , </span><br><span class="line">            <span class="string">'Referer'</span>:<span class="string">'http://www.zhihu.com/articles'</span> &#125; </span><br><span class="line"><span class="comment"># 有些防盗链，服务器会识别headers中的referer是不是它自己，如果不是，服务器就不响应</span></span><br><span class="line">user_agent = <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></span><br><span class="line">headers = &#123; <span class="string">'User-Agent'</span> : user_agent &#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-8-Selenium"><a href="#2-8-Selenium" class="headerlink" title="2.8. Selenium"></a>2.8. Selenium</h2><p>Selenium模拟浏览器<br>Selenium和PhantomJS<br>Selenium和PhantomJS的配合使用<br>Selenium选择元素的方法有很多。<br>xpath和css_selector是比较好的方法，一方面比较清晰，另一方面相对其他方法定位元素比较准确。<br><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">查找单个元素：</span><br><span class="line">find_element_by_class_name：class选择</span><br><span class="line">    如&lt;p class=<span class="string">"content"</span>&gt;Site content goes here.&lt;/p&gt;⇒driver.find_element_by_class_name(<span class="string">'content'</span>)。</span><br><span class="line">find_element_by_css_selector：class选择</span><br><span class="line">    如&lt;div class=<span class="string">'bdy-inner'</span>&gt;test&lt;/div&gt;⇒driver.find_element_by_css_selector (<span class="string">'div.bdy-inner'</span>)。</span><br><span class="line">find_element_by_id：id选择</span><br><span class="line">    如&lt;div id=<span class="string">'bdy-inner'</span>&gt;test&lt;/div&gt;⇒driver.find_element_by_id(<span class="string">'bdy-inner'</span>)。</span><br><span class="line">find_element_by_link_text：链接地址选择</span><br><span class="line">    如&lt;a href=<span class="string">"continue.html"</span>&gt;Continue&lt;/a&gt;⇒driver.find_element_by_link_text(<span class="string">'Continue'</span>)。</span><br><span class="line">find_element_by_name：name选择</span><br><span class="line">    如&lt;input name=<span class="string">"username"</span>type=<span class="string">"text"</span> /&gt;⇒driver.find_element_by_name(<span class="string">'username'</span>)。</span><br><span class="line">find_element_by_partial_link_text：链接的部分地址选择</span><br><span class="line">    如 &lt;a href=<span class="string">"continue.html"</span>&gt;Continue&lt;/a&gt;⇒driver.find_element_by_partial_link_text(<span class="string">'Conti'</span>)。</span><br><span class="line">find_element_by_tag_name：名称选择</span><br><span class="line">    如&lt;h1&gt;Welcome&lt;/h1&gt;⇒driver.find_element_by_tag_name(<span class="string">'h1'</span>)。</span><br><span class="line">find_element_by_xpath：通过xpath选择</span><br><span class="line">    如&lt;form id=<span class="string">"loginForm"</span>&gt; ⇒driver.find_element_by_xpath(<span class="string">"//form[@id='loginForm']"</span>)。</span><br><span class="line">查找多个元素时，[<span class="literal">element</span>]后加上s：</span><br><span class="line">find_elements_by_class_name</span><br><span class="line">find_elements_by_css_selector</span><br><span class="line">find_elements_by_link_text</span><br><span class="line">find_elements_by_name</span><br><span class="line">find_elements_by_partial_link_text</span><br><span class="line">find_elements_by_tag_name</span><br><span class="line">find_elements_by_xpath</span><br><span class="line">除了Selenium的click操作元素方法，常见的操作元素方法：</span><br><span class="line">● Clear清除元素的内容。</span><br><span class="line">● send_keys模拟按键输入。</span><br><span class="line">● Click单击元素。</span><br><span class="line">● Submit提交表单。</span><br></pre></td></tr></table></figure></p><p>comment = driver.find_element_by_css_selector(‘div.bdy-inner’)<br>content = comment.find_element_by_tag_name(‘p’)<br>Selenium的高级操作：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fp = webdriver.FirefoxProfile()</span><br><span class="line"><span class="comment"># 1. 限制CSS的页面</span></span><br><span class="line">fp.set_preference(<span class="string">"permissions.default.stylesheet"</span>,<span class="number">2</span>) </span><br><span class="line"><span class="comment"># 2. 限制图片的显示。极大地提高网络爬虫的效率。图片文件相对于文字、CSS、JavaScript等文件都比较大，加载需要较长时间。</span></span><br><span class="line">fp.set_preference(<span class="string">"permissions.default.image"</span>,<span class="number">2</span>) </span><br><span class="line"><span class="comment"># 3. 控制JavaScript的运行。大多数网页都会利用JavaScript异步加载很多内容，如果这些内容不是需要的，其加载会浪费时间。</span></span><br><span class="line">fp.set_preference(<span class="string">"javascript.enabled"</span>, <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></p><p>全部限制对于加载速度的提升效果最好。如果能够限制，那么最好限制多种加载，这样的效果最好。<br>具体的加载速度提升还得看相应的网页，若网页的图片比较多，则限制图片的加载肯定效果很好。<br>参考链接：<a href="https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%80%E7%89%88/Cha%204%20-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96/Cha%204%20-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96.ipynb" target="_blank" rel="noopener">selenium</a><br>Selenium官方文档：<a href="http://selenium-python.readthedocs.io/index.html。" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/index.html。</a><br>Selenium要在整个网页加载出来后才开始爬取内容，速度往往较慢。<br>Selenium可以实现的功能：<br>操作元素对浏览器中的网页进行各种操作，包括登录。<br>模拟鼠标单击、双击、拖拽<br>获得网页中各个元素的大小<br>模拟键盘<br>浏览器渲染引擎。直接用浏览器在显示网页时解析HTML、应用CSS样式并执行JavaScript的语句。Selenium使用浏览器渲染，数据已经渲染到了HTML代码中。用chrome定位标签即可。<br>用脚本控制浏览器操作。Python的Selenium库模拟浏览器完成抓取。<br>Selenium：用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，浏览器自动按照脚本代码做出单击、输入、打开、验证等操作，就像真正的用户在操作一样。<br>用Selenium控制浏览器加载的内容，可加快Selenium的爬取速度。此类常用的方法有：<br>（1）控制CSS的加载。<br>（2）控制图片文件的显示。<br>（3）控制JavaScript的运行。<br>（1）控制CSS。因为抓取过程中仅仅抓取页面的内容，CSS样式文件是用来控制页面的外观和元素放置位置的，对内容并没有影响，所以我们可以限制网页加载CSS，从而减少抓取时间。<br>支持多个浏览器的调用：IE（7、8、9、10、11）、Firefox、Safari、Google Chrome、Opera等。最常用的是Firefox。</p><h2 id="2-9-爬虫与反爬"><a href="#2-9-爬虫与反爬" class="headerlink" title="2.9. 爬虫与反爬"></a>2.9. 爬虫与反爬</h2><p>==术语==<br>网络爬虫：使用任何技术手段自动批量获取网站信息的一种方式。<br>反爬虫：  使用任何技术手段阻止批量获取网站信息的一种方式。<br>出书的人和经验丰富的实战工程师区别大概就在于此。<br>与爬虫的斗争<br>问题<br>为什么会被<br>方式有哪些、技术突破、如何“反反爬虫”<br>反爬虫（反爬虫会增加获取数据的难度。限制封锁。）与反反爬（初级的反反爬虫方法只能初步帮助我们顺利地完成爬虫程序）</p><ul><li>如登录后才可以查看【处理登录表单：使用Python登录表单。Selenium爬取网站】</li><li>登录时设置验证码【处理验证码：通过程序识别图片中的文字（人工或者OCR）】</li><li>如何保存cookies</li><li><p>中文编码问题。为啥可以解决编码问题。为什么、怎么回事</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.getdefaultencoding</span><br><span class="line">sys.getdefaultencoding()</span><br><span class="line">s.encoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></li><li><p>IP封锁与更换。【多服务器或Tor爬虫。如何让爬虫程序运行在“云”上，也能够让你随意改变自己的IP地址，进而走出爬虫被封IP的困境。】</p></li><li>如何解决Python中文乱码的问题【什么是字符编码，Python的字符编码是什么】<br><a href="https://blog.csdn.net/fei2636/article/details/78999318" target="_blank" rel="noopener">参考链接</a><br>就像攻击武器与防御武器一样，双方总是在不断升级。爬虫和反爬是典型的攻防双方的互相升级。但这种升级不像军事，军事是无尽头的，但是爬虫和反爬是有尽头的。<h3 id="2-9-1-爬虫的尽头"><a href="#2-9-1-爬虫的尽头" class="headerlink" title="2.9.1. 爬虫的尽头"></a>2.9.1. 爬虫的尽头</h3>就是浏览器，一旦使用浏览器，程序完全可以模拟真实用户发出请求，<br>消耗资源，因为需要新开一个进程，解析DOM，运行客户端JavaScript代码。（<a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">chrome的node api</a>在github开源仅仅两天，就拿到8k个star）<h3 id="2-9-2-反爬的尽头"><a href="#2-9-2-反爬的尽头" class="headerlink" title="2.9.2. 反爬的尽头"></a>2.9.2. 反爬的尽头</h3>就是像Google这种超级厉害的验证码，毕竟验证码的根本目的就是识别人类和机器的。<h3 id="2-9-3-网站为什么要“反爬虫”"><a href="#2-9-3-网站为什么要“反爬虫”" class="headerlink" title="2.9.3. 网站为什么要“反爬虫”"></a>2.9.3. 网站为什么要“反爬虫”</h3>第一，网络爬虫浪费网站的流量，也就是浪费钱。爬虫对于一个网站来说并不算是真正用户的流量，而且往往能够不知疲倦地爬取网站，更有甚者，使用分布式的多台机器爬虫，造成网站浏览量增高，浪费网站流量。<br>第二，数据是每家公司非常宝贵的资源。在大数据时代，数据的价值越来越突出，很多公司都把它作为自己的战略资源。由于数据都是公开在互联网上的，如果竞争对手能够轻易获取数据，并使用这些数据采取针对性的策略，长此以往，就会导致公司竞争力的下降。<br>因此，有实力的大公司便开始利用技术进行反爬虫，如淘宝、京东、携程等。反爬虫是指使用任何技术手段阻止别人批量获取自己网站信息的一种方式。<br>再次特地声明，大家在获取数据时一定要有节制、有节操地爬虫。本书中的爬虫也仅用于学习、研究用途，请不要用于非法用途。任何由此引发的法律纠纷请自行负责。<h3 id="2-9-4-爬虫与反爬一览"><a href="#2-9-4-爬虫与反爬一览" class="headerlink" title="2.9.4. 爬虫与反爬一览"></a>2.9.4. 爬虫与反爬一览</h3>反爬|应对<br>–|–<br>频率限制|随机sleep<br>登陆限制|加上cookie<br>header|header池<br>JS|<a href="#JavaScript脚本动态获取网站数据">js反爬</a><br>验证码|机器学习<br>ip限制|代理池和高匿代理等好用的东西<br>内容反爬|OCR</li><li>反爬技术与反爬问题、网络异常  </li><li>负责爬虫技术攻坚，丰富爬虫反爬手段、反爬策略的设计及优化，快速解决  </li><li>设计爬虫策略和防屏蔽规则（常见的反爬手段及其应对措施=熟知当前各类反爬手段，对反爬机制有研究可破解（有能力解决复杂的反爬限制），有应对这些反爬手段的实际经验）  </li><li>登录爬取问题和验证码问题 解决办法和分析实例<ul><li>JavaScript反爬  </li><li>验证码识别技术、复杂图片验证码、滑动块识验码、账号限制、ip限制  </li><li>优化爬虫路由调度策略  </li><li>对网站的cookie时效性处理有经验  </li></ul></li><li>当在PC网页端爬取遇到困难时，爬取方式可以向手机网页端转变。<h3 id="2-9-5-常见的反爬措施"><a href="#2-9-5-常见的反爬措施" class="headerlink" title="2.9.5. 常见的反爬措施"></a>2.9.5. 常见的反爬措施</h3><h4 id="2-9-5-1-浏览器伪装技术"><a href="#2-9-5-1-浏览器伪装技术" class="headerlink" title="2.9.5.1. 浏览器伪装技术"></a>2.9.5.1. 浏览器伪装技术</h4>什么是<br>准备工作<br>Headers属性<br>登录<br>验证码<br>表单交互<br>需要登录的爬虫<br>注册、登录及创建项目<h4 id="2-9-5-2-Cookie的使用"><a href="#2-9-5-2-Cookie的使用" class="headerlink" title="2.9.5.2. Cookie的使用"></a>2.9.5.2. Cookie的使用</h4><h4 id="2-9-5-3-访问频率"><a href="#2-9-5-3-访问频率" class="headerlink" title="2.9.5.3. 访问频率"></a>2.9.5.3. 访问频率</h4>很好理解，如果访问太频繁网站可能针对你的ip封锁一段时间，这和防DDoS的原理一样。对于爬虫来说，碰到这样的限制一下任务的频率就可以了，可以尽量让爬虫想人类一样访问网页（比如随机sleep一段时间，如果每隔3s访问一次网站很显然不是正常人的行为）。<h4 id="2-9-5-4-登录限制"><a href="#2-9-5-4-登录限制" class="headerlink" title="2.9.5.4. 登录限制"></a>2.9.5.4. 登录限制</h4>也比较常见。不过公开信息的网站一般不会有这个限制，这样让用户也麻烦了。其实反爬措施都或多或少的影响真实用户，反爬越严格，误杀用户的可能性也越高。对爬虫来说，登录同样可以通过模拟登录的方式解决，加个cookie就行了（话又说回来，网络的原理很重要）。<h4 id="2-9-5-5-通过Header封杀"><a href="#2-9-5-5-通过Header封杀" class="headerlink" title="2.9.5.5. 通过Header封杀"></a>2.9.5.5. 通过Header封杀</h4>一般浏览器访问网站会有header，比如Safari或者Chrome等等，还有操作系统信息。如果使用程序访问并不会有这样的header。破解也很简单，访问的时候加上header就行。<h4 id="2-9-5-6-JavaScript脚本动态获取网站数据"><a href="#2-9-5-6-JavaScript脚本动态获取网站数据" class="headerlink" title="2.9.5.6. JavaScript脚本动态获取网站数据"></a>2.9.5.6. JavaScript脚本动态获取网站数据</h4>有一些网站（尤其是单页面网站）的内容并不是通过服务器直接返回的，而是服务器只返回一个客户端JavaScript程序，然后JavaScript获取内容。更高级的是，JavaScript在本地计算一个token，然后拿这个token来进行AJAX获取内容。而本地的JavaScript又是经过代码混淆和加密的，这样我们做爬虫的通过看源代码几乎不可能模拟出来这个请求（主要是token不可能破解），但是我们可以从另一个角度：headless的浏览器，也就是我们直接运行这个客户端程序，这可以100%地模拟真实用户！<h4 id="2-9-5-7-验证码"><a href="#2-9-5-7-验证码" class="headerlink" title="2.9.5.7. 验证码"></a>2.9.5.7. 验证码</h4>这几乎是终极武器了，验证码是专门用来区分人和计算机的手段。对于反爬方来说，这种方式对真实用户和搜索引擎（其实可以通过记录搜索引擎爬虫的ip来区别对待，可以解决）的危害比较大，相信读者都有输入验证码的痛苦经历。但这种方法也并不是无敌的！通过现在很火的机器学习可以轻松的识别大部分的验证码！Google的reCAPTCHA是一种非常高级的验证码，但是听过通过模拟浏览器也是可以破解的。有的网站需要验证码验证拿到一个token，token长得很像一个时间戳，本地自己生成一个时间戳发现也是能用的！于是就这样绕过了验证码。<h4 id="2-9-5-8-ip限制"><a href="#2-9-5-8-ip限制" class="headerlink" title="2.9.5.8. ip限制"></a>2.9.5.8. ip限制</h4>网站可能将识别的ip永久封杀，这种方式需要的人力比较大，而且误伤用户的代价也很高。但是破解办法却非常简单。目前代理池几乎是搞爬虫的标配了，甚至还有很多高匿代理等好用的东西。所以这基本上只能杀杀小爬虫。<h4 id="2-9-5-9-服务器采集"><a href="#2-9-5-9-服务器采集" class="headerlink" title="2.9.5.9. 服务器采集"></a>2.9.5.9. 服务器采集</h4>代理服务器的设置<br>为什么使用服务器采集<br>使用动态IP拨号服务器<br>使用Tor代理服务器<h4 id="2-9-5-10-网站内容反爬"><a href="#2-9-5-10-网站内容反爬" class="headerlink" title="2.9.5.10. 网站内容反爬"></a>2.9.5.10. 网站内容反爬</h4>有一些网站将网站内容用只有人类可以接收的形式来呈现（其实反爬就是区别对待人类和机器嘛）。比如将内容用图片的形式显示。但是近几年来人类和机器的差别越来越小，图片可以用OCR准确率非常高地去识别。<br>网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动的抓取万维网信息的程序或者脚本。<br>爬虫，即网络爬虫，大家可以理解为在网络上爬行的一直蜘蛛，互联网就比作一张大网，而爬虫便是在这张网上爬来爬去的蜘蛛咯，如果它遇到资源，那么它就会抓取下来。想抓取什么？这个由你来控制它咯。<br>比如它在抓取一个网页，在这个网中他发现了一条道路，其实就是指向网页的超链接，那么它就可以爬到另一张网上来获取数据。这样，整个连在一起的大网对这之蜘蛛来说触手可及，分分钟爬下来不是事儿。<br>用户看到的网页实质是由 HTML 代码构成的，爬虫爬来的便是这些内容，通过分析和过滤这些 HTML 代码，实现对图片、文字等资源的获取。<br>爬虫爬取数据时必须要有一个目标的URL才可以获取数据，因此，它是爬虫获取数据的基本依据，准确理解它的含义对爬虫学习有很大帮助。<br>怎样扒网页呢？其实就是根据URL来获取它的网页信息，虽然我们在浏览器中看到的是一幅幅优美的画面，但是其实是由浏览器解释才呈现出来的，实质它是一段HTML代码，加 JS、CSS，如果把网页比作一个人，那么HTML便是他的骨架，JS便是他的肌肉，CSS便是它的衣服。所以最重要的部分是存在于HTML中的，下面我们就写个例子来扒一个网页下来。<h2 id="2-10-编码"><a href="#2-10-编码" class="headerlink" title="2.10. 编码"></a>2.10. 编码</h2>什么是字符编码<br>Python的字符编码</li><li>文本、数字、bit、字节：计算机只能处理数字，文本转换为数字才能处理，</li><li>字节：计算机中8个bit作为一个字节，一个字节能表示的最大数字就是255</li><li>ASCII: 计算机是美国人发明的，所以一个字节就可以标识所有单个字符，ASCII(一个字节)编码就成为美国人的标准编码</li><li>GB2312: 中文不止255个汉字，ASCII处理中文明显不够，所以中国制定了GB2312编码，用两个字节表示一个汉字。GB2312将ASCII也包含进去了。</li><li>Unicode：同理，日文，韩文，越来越多的国家为了解决这个问题就都发展了一套编码，标准越来越多，如果出现多种语言混合显示就一定会出现乱码</li><li><ul><li>于是unicode出现了，它将所有语言包含进去了。</li></ul></li><li>“utf-8：可变长的编码。英文：1字节，汉字3字节，特别生僻的变成4-6字节。<br>比较：</li><li>如果内容全是英文，unicode编码比ASCII编码需要多一倍的存储空间，传输也会变慢。</li><li>传输大量的英文，utf8作用就很明显。<br>示例：</li><li>ASCII和unicode编码:</li><li><ul><li>字母A：ASCII编码十进制是65，二进制 0100 0001，unicode：00000000 0100 0001（编码只需要在二进制前面补0）</li></ul></li><li><ul><li>汉字”中” 已近超出ASCII编码的范围，用unicode编码是20013二进制是01001110 00101101<br>解决：</li></ul></li><li>读取文件，进行操作时转换为unicode编码进行处理</li><li>保存文件时，转换为utf-8编码。以便于传输</li><li>读文件的库会转换为unicode<br>默认：</li><li>python2 默认编码格式为ASCII，</li><li>Python3 默认编码为 utf-8<br>ython2 默认编码格式为 ASCII，Python3 默认编码为 utf-8<h2 id="2-11-爬虫进阶"><a href="#2-11-爬虫进阶" class="headerlink" title="2.11. 爬虫进阶"></a>2.11. 爬虫进阶</h2>怎么处理图片验证码<br>反爬破解策略<br>消息队列<br>任务调度<br>代理的使用</li><li>用户代理池</li><li>IP代理池</li><li>同时使用用户代理池与IP代理池的方法<h2 id="2-12-异常处理"><a href="#2-12-异常处理" class="headerlink" title="2.12. 异常处理"></a>2.12. 异常处理</h2>为什么我抓到的和浏览器看到的不一样？怎样解决JavaScript渲染的问题<br>分析Ajax请求、Selenium/WebDriver、PyV8、Ghost.py 、Splash<h1 id="3-数据解析、清洗和组织"><a href="#3-数据解析、清洗和组织" class="headerlink" title="3. 数据解析、清洗和组织"></a>3. 数据解析、清洗和组织</h1>直接处理、正则表达式、XPath、Json解析、BeautifulSoup、PyQuery<br>难度：正则表达式&gt;BeautifulSoup、lxml（可能在寻找正则表达式上耗费时间、BeautifulSoup的find方法很容易学）<br>速度：BeautifulSoup≈lxml（BeautifulSoup已经支持lxml解析，因此速度和lxml差不多）<br>XMLFeedSpider<br>BeautifulSoup<br>lxml<br>JSON<br>高性能HTML内容解析<br>解析真实地址抓取<br>解析数据<br>如何解析网页上的数据。3种方法各有千秋，各自的优缺点</li><li>解析JSON数据</li><li>BeautifulSoup解析网页</li><li>正则表达式</li><li>BeautifulSoup（find方法）</li><li>XPath、lxml</li></ul><p>BeautifulSoup<br>Urllib中使用XPath表达式<br>PhantomJS 、浏览器伪装<br>超时设置</p><h2 id="3-1-bs4"><a href="#3-1-bs4" class="headerlink" title="3.1. bs4"></a>3.1. bs4</h2><p>使用BeautifulSoup解析网页<br>BeautifulSoup是一个工具箱。通过【解析文档】来提取数据。</p><ul><li>可以从HTML或XML文件中提取数据。</li><li>可以提供一些简单的、Python式的函数用来处理导航、搜索、修改分析树等。<br>简单，不需要多少代码就可以写出一个完整的应用程序。非常强大。<br>支持Python标准库中的HTML解析器，还支持一些第三方的解析器。<br>BeautifulSoup 4主要特性、适合做什么、怎样使用<br>使用BeautifulSoup获取博客标题<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">link = <span class="string">"http://www.santostang.com/"</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125; </span><br><span class="line">r = requests.get(link, headers= headers)</span><br><span class="line">soup = BeautifulSoup(r.text,<span class="string">"html.parser"</span>) <span class="comment"># 将网页响应体的字符串转化为soup对象</span></span><br><span class="line"><span class="comment"># &lt;h1&gt;元素，class为' post-title'，提取&lt;a&gt;元素中的文字，strip()的功能是把字符串左右的空格去掉。find只是用来找到第一条结果。</span></span><br><span class="line">first_title = soup.find(<span class="string">"h1"</span>, class_=<span class="string">"post-title"</span>).a.text.strip() </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"第一篇文章的标题是："</span>, first_title)</span><br><span class="line">title_list = soup.find_all(<span class="string">"h1"</span>, class_=<span class="string">"post-title"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(title_list)):</span><br><span class="line">    title = title_list[i].a.text.strip()</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'第 %s 篇文章的标题是：%s'</span> %(i+<span class="number">1</span>, title))</span><br></pre></td></tr></table></figure></li></ul><p>找所有结果，用find_all。find_all返回列表。<br>BeautifulSoup的其他功能<br>soup.prettify()  代码美化<br>首先，需要把：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br></pre></td></tr></table></figure></p><p>代码转化成BeautifulSoup对象。<br>BeautifulSoup对象是一个复杂的【树】形结构，它的每一个【节点】都是一个【Python对象】。<br>提取对象的3种方法：</p><blockquote><p>遍历文档树<br>搜索文档树<br>CSS选择器<br>1．遍历文档树<br>先爬树干，然后小树干，最后树枝。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">soup.header.h3：获取取&lt;h3&gt;标签。如结果为：&lt;h3 id="name"&gt;大数据@唐松Santos&lt;/h3&gt;）。</span><br><span class="line">soup.header.div.contents：列出某个标签的所有子节点。只能获取第一代子标签。</span><br><span class="line">soup.header.div.contents[<span class="number">1</span>]：索引为<span class="number">1</span>的子标签。</span><br><span class="line">soup.header.div.children：获得所有子标签。只能获取第一代子标签。</span><br><span class="line">soup.header.div.descendants：获得所有子子孙孙标签</span><br><span class="line">soup.header.div.a.parent：获得父节点的内容：</span><br></pre></td></tr></table></figure></p></blockquote><p>遍历文档树的方法其实使用得比较少。<br>2．搜索文档树<br>最常用的是搜索文档树。<br>最常用的是find()和find_all()。<br>find()和find_all()方法还可以和re正则结合起来使用<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(re.compile(<span class="string">"^h"</span>)):  <span class="comment"># 找出所有以h开头的标签，这表示&lt;header&gt;和&lt;h3&gt;的标签都会被找到</span></span><br><span class="line">    print(tag.name)</span><br><span class="line"><span class="comment"># 输出的结果是：</span></span><br><span class="line"><span class="comment"># header</span></span><br><span class="line"><span class="comment"># h3</span></span><br></pre></td></tr></table></figure></p><p>如果传入正则表达式作为参数，Beautiful Soup就会通过正则表达式的match()来匹配内容。</p><ol><li>CSS选择器<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">通过tag标签逐层查找：soup.select("header h3")⇒得到的结果是：[<span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span>大数据@唐松Santos<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>]</span><br><span class="line">通过某个tag标签下的直接子标签遍历，：</span><br><span class="line">soup.select("header &gt; h3") ⇒[<span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span>大数据@唐松Santos<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>]</span><br><span class="line">soup.select("div &gt; a") ⇒ <span class="tag">&lt;<span class="name">div</span>&gt;</span>下所有的<span class="tag">&lt; <span class="attr">a</span>&gt;</span>标签</span><br><span class="line">[<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.santostang.com/feed/"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span> <span class="attr">target</span>=<span class="string">"_blank"</span><span class="attr">title</span>=<span class="string">"RSS"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>　<span class="attr">aria-hidden</span>=<span class="string">"true"</span>　<span class="attr">class</span>=<span class="string">"fa　fa-rss"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>,　<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://weibo.com/santostang"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"Weibo"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"fa fa-weibo"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>, …]</span><br><span class="line">soup.select('a[href^="http://www.santostang.com/"]')：找所有链接以http://www.santostang.com/开始的<span class="tag">&lt;<span class="name">a</span>&gt;</span>标签</span><br><span class="line">得到的结果是：</span><br><span class="line">[<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.santostang.com/feed/"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span> <span class="attr">target</span>=<span class="string">"_blank"</span><span class="attr">title</span>=<span class="string">"RSS"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"fa fa-rss"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.santostang.com/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.santostang.com/about-me/"</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.santostang.com/post-search/"</span>&gt;</span>文章搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.santostang.com/wp-login.php"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span>]</span><br></pre></td></tr></table></figure></li></ol><p>5.3 使用lxml解析网页<br>一些比较流行的解析库<br>Xpath语法（如lxml），同样是效率比较高的解析方法。lxml使用C语言编写，解析速度比不使用lxml解析器的BeautifulSoup快一些。<br>5.3.2 使用lxml获取博客标题<br>使用lxml提取网页源代码数据的3种方法<br>    XPath选择器<br>    CSS选择器<br>    BeautifulSoup的find()方法<br>和BeautifulSoup相比，lxml还多了一种XPath选择器方法。<br>XPath是一门在XML文档中查找信息的语言。<br>XPath使用路径表达式来选取XML文档中的节点或节点集，也可以用在HTML获取数据中。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">link = <span class="string">"http://www.santostang.com/"</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125; </span><br><span class="line">r = requests.get(link, headers= headers)</span><br><span class="line">html = etree.HTML(r.text) <span class="comment"># 解析为lxml的格式</span></span><br><span class="line">title_list = html.xpath(<span class="string">'//h1[@class="post-title"]/a/text()'</span>) <span class="comment"># 用XPath读取里面的内容</span></span><br><span class="line"><span class="keyword">print</span> (title_list)</span><br><span class="line">//：无论在文档中什么位置</span><br><span class="line">//h1：所有&lt;h1&gt;元素</span><br><span class="line">//h1[@class="post-title"]：&lt;h1&gt;中class为"post-title"的元素</span><br><span class="line">/a表示选取&lt;h1&gt;子元素的&lt;a&gt;元素</span><br><span class="line">/text()表示提取&lt;a&gt;元素中的所有文本。</span><br></pre></td></tr></table></figure></p><p>chrome审查，右键，选取元素，Copy→Copy XPath<br>5.3.3 XPath的选取方法<br>XPath使用路径表达式可以在网页源代码中选取节点，它是沿着路径来选取的，如表5-3所示。<br>XPath路径表达式及其描述 <a href="https://res.weread.qq.com/wrepub/epub_928559_47" target="_blank" rel="noopener">https://res.weread.qq.com/wrepub/epub_928559_47</a><br>下面是一个XML文档，我们将用XPath提取其中的一些数据。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;? xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;? &gt;</span><br><span class="line">&lt;bookstore&gt;</span><br><span class="line">    &lt;book&gt;</span><br><span class="line">        &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt;</span><br><span class="line">        &lt;author&gt;J K. Rowling&lt;/author&gt;</span><br><span class="line">        &lt;year&gt;2005&lt;/year&gt;</span><br><span class="line">        &lt;price&gt;29.99&lt;/price&gt;</span><br><span class="line">    &lt;/book&gt;</span><br><span class="line">&lt;/bookstore&gt;</span><br></pre></td></tr></table></figure></p><p>XPath的一些路径表达式及其结果：<a href="https://res.weread.qq.com/wrepub/epub_928559_48" target="_blank" rel="noopener">https://res.weread.qq.com/wrepub/epub_928559_48</a><br><a href="https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%80%E7%89%88/Cha%205%20-%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5/Cha%205%20-%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5.ipynb" target="_blank" rel="noopener">https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%80%E7%89%88/Cha%205%20-%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5/Cha%205%20-%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5.ipynb</a><br>5.5 BeautifulSoup爬虫实践：房屋价格数据<br>目的：获取安居客网站上北京二手房的数据。获取前10页二手房源的名称、价格、几房几厅、大小、建造年份、联系人、地址、标签。<br>网址：<a href="https://beijing.anjuke.com/sale/。" target="_blank" rel="noopener">https://beijing.anjuke.com/sale/。</a><br>5.5.1 网站分析<br>5.5.2 项目实践<br>通过以上分析已经能够获得各个数据所在的地址，接下来用requests加上BeautifulSoup获取安居客北京二手房结果的第一页数据，代码如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    link = <span class="string">'https://beijing.anjuke.com/sale/p'</span> + str(i)</span><br><span class="line">    r = requests.get(link, headers = headers)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'现在爬取的是第'</span>, i, <span class="string">'页'</span>)</span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">'lxml'</span>)</span><br><span class="line">    house_list = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">"list-item"</span>)</span><br><span class="line">    <span class="keyword">for</span> house <span class="keyword">in</span> house_list:</span><br><span class="line">        name = house.find(<span class="string">'div'</span>, class_ =<span class="string">'house-title'</span>).a.text.strip()</span><br><span class="line">        price = house.find(<span class="string">'span'</span>, class_=<span class="string">'price-det'</span>).text.strip()</span><br><span class="line">        price_area = house.find(<span class="string">'span'</span>, class_=<span class="string">'unit-price'</span>).text.strip()</span><br><span class="line">        no_room = house.find(<span class="string">'div'</span>, class_=<span class="string">'details-item'</span>).span.text</span><br><span class="line">        area = house.find(<span class="string">'div'</span>, class_=<span class="string">'details-item'</span>).contents[<span class="number">3</span>].text</span><br><span class="line">        floor = house.find(<span class="string">'div'</span>, class_=<span class="string">'details-item'</span>).contents[<span class="number">5</span>].text</span><br><span class="line">        year = house.find(<span class="string">'div'</span>, class_=<span class="string">'details-item'</span>).contents[<span class="number">7</span>].text</span><br><span class="line">        broker = house.find(<span class="string">'span'</span>, class_=<span class="string">'brokername'</span>).text</span><br><span class="line">        broker = broker[<span class="number">1</span>:]</span><br><span class="line">        address = house.find(<span class="string">'span'</span>, class_=<span class="string">'comm-address'</span>).text.strip()</span><br><span class="line">        address = address.replace(<span class="string">'\xa0\xa0\n                    '</span>,<span class="string">'  '</span>)</span><br><span class="line">        tag_list = house.find_all(<span class="string">'span'</span>, class_=<span class="string">'item-tags'</span>)</span><br><span class="line">        tags = [i.text <span class="keyword">for</span> i <span class="keyword">in</span> tag_list] </span><br><span class="line">        <span class="keyword">print</span> (name, price, price_area, no_room, area, floor, year, broker, address, tags)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><p>进阶：获取其中的各项数据，如小区名称、房屋类型、房屋朝向、参考首付等。<br><a href="https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%80%E7%89%88/Cha%205%20-%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5/Cha%205%20_%E7%AB%A0%E6%9C%AB%E5%AE%9E%E6%88%98.ipynb" target="_blank" rel="noopener">https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%80%E7%89%88/Cha%205%20-%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5/Cha%205%20_%E7%AB%A0%E6%9C%AB%E5%AE%9E%E6%88%98.ipynb</a></p><h2 id="3-2-Xpath"><a href="#3-2-Xpath" class="headerlink" title="3.2. Xpath"></a>3.2. Xpath</h2><p>xpath语法<br>表达式|说明|<br>–|–|<br>article|选取所有article元素的所有子节点|<br>/article|选取根元素article|<br>article/a|选取所有属于article的子元素的a元素|<br>//div|选取所有div元素（不管出现在文档里的任何地方）|<br>article//div|选取所有属于article元素的后代的div元素，不管它出现在article之下的任何位置|<br>/div/<em>|选取属于div元素的所有子节点|<br>//</em>|选取所有元素|<br>//div[@*]|选取所有带属性的div 元素|<br>//@class|选取所有名为class的属性|<br>//div/a 丨//div/p|选取所有div元素的a和p元素|<br>//span丨//ul|选取文档中的span和ul元素|<br>article/div/p丨//span|选取所有属于article元素的div元素的p元素以及文档中所有的 span元素<br>xpath语法-谓语:<br>表达式|说明|<br>–|–|<br>/article/div[1]|选取属于article子元素的第一个div元素|<br>/article/div[last()]|选取属于article子元素的最后一个div元素|<br>/article/div[last()-1]|选取属于article子元素的倒数第二个div元素|<br>//div[@color]|选取所有拥有color属性的div元素|<br>//div[@color=’red’]|选取所有color属性值为red的div元素|<br>xpath的使用<br>会右键查看就能获取网页上任何内容</p><ol><li>xpath简介</li><li>xpath术语与语法</li><li>xpath抓取误区：javasrcipt生成html与html源文件的区别</li><li>xpath抓取实例<br>为什么要使用xpath？<br>xpath使用路径表达式在xml和html中进行导航<br>xpath包含有一个标准函数库<br>xpath是一个w3c的标准<br>xpath速度要远远超beautifulsoup。<br>xpath节点关系<br>父节点、上一层节点<br>子节点<br>兄弟节点、同胞节点<br>先辈节点、父节点、爷爷节点<br>后代节点、儿子、孙子<br>xpath抓取误区<br>firebugs插件<br>取某一个网页上元素的xpath地址<br>如:<a href="http://blog.jobbole.com/110287/" target="_blank" rel="noopener">http://blog.jobbole.com/110287/</a><br>在标题处右键使用firebugs查看元素。<br>然后在<h1>2016 腾讯软件开发面试题（部分）</h1>右键查看xpath<h2 id="3-3-解析器对比分析"><a href="#3-3-解析器对比分析" class="headerlink" title="3.3. 解析器对比分析"></a>3.3. 解析器对比分析</h2>主要的解析器及其优缺点<br><a href="https://res.weread.qq.com/wrepub/epub_928559_44" target="_blank" rel="noopener">https://res.weread.qq.com/wrepub/epub_928559_44</a><br><a href="https://res.weread.qq.com/wrepub/epub_928559_49" target="_blank" rel="noopener">https://res.weread.qq.com/wrepub/epub_928559_49</a><br>使用lxml的解析器将会解析得更快。<h1 id="4-数据存储"><a href="#4-数据存储" class="headerlink" title="4. 数据存储"></a>4. 数据存储</h1>数据存储<br>方式</li></ol><ul><li>TXT</li><li>CSV</li><li>Excel</li><li>JSON</li><li>MySQL</li><li>MongoDB及其优化建议<br>如何存储数据</li><li>存TXT。【写入和读取都非常方便，可以很快速地打开文件查看。用来存储测试用的数据。文件大时打开很慢。数据修改麻烦】</li><li>存CSV。【同上】</li><li>存MySQL。【数据量比较大、要与别人交换或别人也要访问时】</li><li>存MongoDB。【同上。JSON格式数据而不用进行解析】<br>文本——纯文本、Json、Xml等。<br>二进制文件——如图片、视频、⾳频等直接保存成特定格式即可。<br>关系型数据库——如MySQL、Oracle、SQL Server等具有结构化表结构形式存储。<br>非关系型数据库——如MongoDB、Redis等Key-Value形式存储。<h2 id="4-1-数据库"><a href="#4-1-数据库" class="headerlink" title="4.1. 数据库"></a>4.1. 数据库</h2>创建、连接和查询<br>数据导入<br>Python3操作<br>与标准Python客户端建立数据库接口<br>数据库设计  </li><li>oracle、Cassandra  </li><li>熟悉关系型（mysql/postgresql）、nosql（mongodb/hbase/elasticsearch/HBase/HIVE）、缓存sql（redis/memcached）  </li><li>调优和海量存储经验优先；能进行简单优化 有大数据开发经验优先 熟悉hadoop、spark、storm  </li><li>至少精通大数据量的一种关系型开发  </li><li>三种数据库的存储方式、SQLite、MySQL和MongoDB三种数据库的操作方式，实现爬取数据存储的多样化<br>MySQL<br>MongoDB<br>Redis<br>SQLite<br>Excel表格自动合并<br>‘’’⽹页文本’’’——如HTML文档、Json格式文本等。<br>‘’’图⽚’’’——获取到的是二进制文件，保存为图片格式。<br>‘’’视频’’’——同为二进制文件，保存为视频格式即可。<br>‘’’其他’’’——只要是能请求到的，都能获取。<h1 id="5-高性能爬取策略"><a href="#5-高性能爬取策略" class="headerlink" title="5. 高性能爬取策略"></a>5. 高性能爬取策略</h1>基础爬虫<br>简单分布式爬虫<br>Scrapy爬虫<br>Scrapy分布式爬虫<br>深度优先的递归<br>广度优先<br>定向爬取<br>爬虫的浏览器伪装技术<br>HTTP协议请求<br>DebugLog<br>异常处理神器——URLError<br>Cookiejar精析<br>并发和并行，同步和异步、异步加载技术与爬虫方法、多协程、多线程、多进程<br>如何提升爬虫的速度效率（速度实现成倍提升）。比较。<br>二叉树的遍历问题<br>深度优先(递归实现)<br>顺着一条路，走到最深处。然后回头。垂直方向<br>广度优先(队列实现)<br>分层遍历：遍历完儿子辈。然后遍历孙子辈。水平方向<br>深度优先算法</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depth_tree</span><span class="params">(tree_node)</span>:</span></span><br><span class="line">   <span class="keyword">if</span> tree_node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">       <span class="keyword">print</span> (tree_node._data)</span><br><span class="line">       <span class="keyword">if</span> tree_node._left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">           <span class="keyword">return</span> depth_tree(tree_node.left)</span><br><span class="line">       <span class="keyword">if</span> tree_node._right <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">           <span class="keyword">return</span> depth_tree(tree_node._right)</span><br></pre></td></tr></table></figure><p>广度优先算法<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_queue</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="comment">#利用队列实现树的广度优先遍历</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    my_queue = []</span><br><span class="line">    node = root</span><br><span class="line">    my_queue.append(node)</span><br><span class="line">    <span class="keyword">while</span> my_queue:</span><br><span class="line">        node = my_queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">print</span> (node.elem)</span><br><span class="line">        <span class="keyword">if</span> node.lchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            my_queue.append(node.lchild)</span><br><span class="line">        <span class="keyword">if</span> node.rchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            my_queue.append(node.rchild)</span><br></pre></td></tr></table></figure></p><h2 id="5-1-性能"><a href="#5-1-性能" class="headerlink" title="5.1. 性能"></a>5.1. 性能</h2><p>标准性能模型<br>解决性能问题<br>系统性能<br>示例1：非常简单的管道<br>示例2：测量吞吐量和延时的扩展<br>超时设置<br>容错处理<br>定时爬取<br>自动化爬取的重要性<br>定向爬取的相关步骤与策略<br>动态渲染页面的爬取、JavaScript与AJAX数据爬取<br>简单的矩形区域抓取方式<br>高级区域抓取方式<br>创建自定义监控命令<br>使用ApacheSpark流计算偏移量</p><h1 id="6-Scrapy分布式爬虫"><a href="#6-Scrapy分布式爬虫" class="headerlink" title="6. Scrapy分布式爬虫"></a>6. Scrapy分布式爬虫</h1><ul><li>Scrapy框架</li><li>框架安装难点解决技巧</li><li><a href="https://mp.weixin.qq.com/s/hgYFE3Ga_j25BT9AB8jQuw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/hgYFE3Ga_j25BT9AB8jQuw</a></li><li>Scrapy常见指令</li><li>更好的是爬取和存入相分离。Scrapy特色。</li></ul><p>好（较为成熟）的爬虫方案：多X程、分布式、将爬虫部署在服务器上把自己的个人计算机解放出来<br>如何通过Redis实现了一个分布式爬虫，让其在不同服务器之间通信。<br>分布式爬虫的好处是什么？</p><ul><li>队列的分配是依靠master的，当你获取数据的某一台slave奴隶服务器因为各种原因停止爬虫了，也不会让整个爬虫程序停下来。</li><li>分布式爬虫既可成倍提升爬虫效率，又可保证爬虫的稳定性。</li><li>（1）服务器之间有通信，每个服务器的待爬网页无需手动分配。</li><li>（2）数据集中存储到某一个服务器或数据库中。统一管理能够实现从不同服务器爬虫的队列管理到数据存储的优化。<br>Scrapy框架的安装<br>Scrapy框架基本使用<br>Scrapy命令行详解<br>Scrapy中选择器的用法<br>Scrapy中Spiders的用法<br>Scrapy中Item Pipeline的用法<br>Scrapy中Download Middleware的用法<br>Scrapy爬取知乎用户信息实战<br>Scrapy+Cookies池抓取新浪微博<br>Scrapy+Tushare爬取微博股票数据<br>命令行创建scrapy项目<br>cd desktop<br>scrapy startproject ArticleSpider<br>scrapy目录结构<br>scrapy借鉴了django的项目思想<br>scrapy.cfg：配置文件。<br>setings.py：设置<br>SPIDER_MODULES = [‘ArticleSpider.spiders’] #存放spider的路径<br>NEWSPIDER_MODULE = ‘ArticleSpider.spiders’<br>pipelines.py: 数据存储相关<br>middilewares.py: 自己定义的middlewares 定义方法，处理响应的IO操作<br>init.py:项目的初始化文件。<br>items.py：定义我们所要爬取的信息的相关属性。Item对象是种类似于表单，用来保存获取到的数据<br>创建spider<br>cd ArticleSpider<br>scrapy genspider jobbole blog.jobbole.com<br>自动生成<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-*- coding: utf<span class="number">-8</span> -*-</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobboleSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"jobbole"</span></span><br><span class="line">    allowed_domains = [<span class="string">"blog.jobbole.com"</span>]</span><br><span class="line">    <span class="comment"># start_urls是一个带爬的列表，</span></span><br><span class="line">    <span class="comment">#spider会为我们把请求下载网页做到，直接到parse阶段</span></span><br><span class="line">    start_urls = [<span class="string">'http://blog.jobbole.com/'</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><p>在命令行启动Spider<br>scrapy crawl jobbole<br>创建调试工具类<br>在项目根目录里创建main.py作为调试工具文件<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2017/3/28 12:06'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> scrapy.cmdline <span class="keyword">import</span> execute</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 将系统当前目录设置为项目根目录</span></span><br><span class="line"><span class="comment"># os.path.abspath(__file__)为当前文件所在绝对路径</span></span><br><span class="line"><span class="comment"># os.path.dirname为文件所在目录</span></span><br><span class="line"><span class="comment"># H:\CodePath\spider\ArticleSpider\main.py</span></span><br><span class="line"><span class="comment"># H:\CodePath\spider\ArticleSpider</span></span><br><span class="line">sys.path.append(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"><span class="comment"># 执行命令，相当于在控制台cmd输入改名了</span></span><br><span class="line">execute([<span class="string">"scrapy"</span>, <span class="string">"crawl"</span> , <span class="string">"jobbole"</span>])</span><br></pre></td></tr></table></figure></p><p>设置不遵守reboots协议<br>settings.py的<br>ROBOTSTXT_OBEY = False<br>⭕在jobble.py打上断点<br>def parse(self, response):<br>    pass<br>返回的htmlresponse对象:<br>    body:网页内容<br>    _DEFAULT_ENCODING= ‘ascii’<br>    encoding= ‘utf-8’<br>scrapy已经为我们做到了将网页下载下来。而且编码也进行了转换.<br>import scrapy<br>class JobboleSpider(scrapy.Spider):<br>    name = “jobbole”<br>    allowed_domains = [“blog.jobbole.com”]<br>    start_urls = [‘<a href="http://blog.jobbole.com/110287/&#39;]" target="_blank" rel="noopener">http://blog.jobbole.com/110287/&#39;]</a><br>    def parse(self, response):<br>        re_selector = response.xpath(“/html/body/div[3]/div[3]/div[1]/div[1]/h1”)</p><pre><code># print(re_selector)pass</code></pre><p>调试debug可以看到<br>re_selector =(selectorlist)[]<br>可以看到返回的是一个空列表，<br> 列表是为了如果我们当前的xpath路径下还有层级目录时可以进行选取<br> 空说明没取到值：</p><p> //*[@id=”post-110287”]/div[1]/h1<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobboleSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"jobbole"</span></span><br><span class="line">    allowed_domains = [<span class="string">"blog.jobbole.com"</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://blog.jobbole.com/110287/'</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        re_selector = response.xpath(<span class="string">'//*[@id="post-110287"]/div[1]/h1'</span>)</span><br><span class="line">        <span class="comment"># print(re_selector)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1. 概述"></a>6.1. 概述</h2><p>分布式系统概述<br>初识Scrapy Scrapy是一个Twisted应用<br>喜欢Scrapy的更多理由<br>Scrapy不是什么<br>框架介绍、架构概述、核心架构<br>目录结构<br>Scrapy设置<br>常用的Scrapy组件详解<br>Scrapy工作流<br>Scrapy引擎——一种直观方式<br>Scrapy高级应用<br>理解Scrapy性能</p><h2 id="6-2-部署到Scrapinghub"><a href="#6-2-部署到Scrapinghub" class="headerlink" title="6.2. 部署到Scrapinghub"></a>6.2. 部署到Scrapinghub</h2><p>搜索引擎核心<br>爬行策略<br>网页更新策略<br>身份识别<br>什么是Cookie<br>常用工具命令<br>Spider类参数传递<br>避免被禁止<br>UR2lM——基本抓取流程<br>抽取更多的URL<br>创建手机应用<br>访问item<br>配置与管理<br>基本设置<br>进阶设置<br>信号<br>管道秘诀<br>使用RESTAPl<br>使用Twisted专用客户端建立服务接口<br>为CPU密集型、阻塞或遗留功能建立接口<br>使用telnet获得组件利用率<br>基准系统<br>故障排除流程</p><h2 id="6-3-代码"><a href="#6-3-代码" class="headerlink" title="6.3. 代码"></a>6.3. 代码</h2><p>items的编写<br>pipelines的编写<br>settings的编写<br>Items的编写<br>Spider的编写</p><h2 id="6-4-使用Scrapy填充数据库"><a href="#6-4-使用Scrapy填充数据库" class="headerlink" title="6.4. 使用Scrapy填充数据库"></a>6.4. 使用Scrapy填充数据库</h2><p>Scrapy的中文输出<br>Scrapy的中文存储<br>Scrapy与MongoDB<br>Scrapy与Redis</p><h2 id="6-5-Scrapyd"><a href="#6-5-Scrapyd" class="headerlink" title="6.5. Scrapyd"></a>6.5. Scrapyd</h2><p>分布式爬虫与Scrapy<br>Scrapyd部署分布式爬虫<br>Scrapyd与实时分析进行分布式爬取</p><h2 id="6-6-Scrapy项目"><a href="#6-6-Scrapy项目" class="headerlink" title="6.6. Scrapy项目"></a>6.6. Scrapy项目</h2><p>用Scrapy进行爬虫项目管理<br>Scrapy爬虫多开技能<br>从Scrapy到移动应用<br>财经新闻数据<br>博客<br>Redis分布式爬虫实践<br>认识框架<br>框架安装难点解决技巧<br>常见指令<br>使用<br>You-get源码分析<br>与Urllib的整合<br>多线程<br>分布式<br><a href="https://github.com/LUCY78765580/Python-web-scraping" target="_blank" rel="noopener">https://github.com/LUCY78765580/Python-web-scraping</a><br><a href="https://github.com/qiyeboy/SpiderBook" target="_blank" rel="noopener">https://github.com/qiyeboy/SpiderBook</a><br>分布式爬虫的架构解析<br>分布式爬虫实现原理<br>分布式爬虫之Docker基础<br>分布式爬虫之Redis基础<br>分布式爬虫构建实战<br>Scrapy分布式原理及Scrapy-Redis源码解析<br>Scrapy分布式架构搭建抓取知乎<br>Scrapy分布式的部署详解<br><a href="http://cuiqingcai.com/3179.html" target="_blank" rel="noopener">小白爬虫第一弹之抓取妹子图</a><br><a href="http://cuiqingcai.com/3256.html" target="_blank" rel="noopener">小白爬虫第二弹之健壮的小爬虫</a><br><a href="http://cuiqingcai.com/3314.html" target="_blank" rel="noopener">小白爬虫第三弹之去重去重</a><br><a href="http://cuiqingcai.com/3363.html" target="_blank" rel="noopener">小白爬虫第四弹之爬虫快跑（多进程+多线程）</a><br><a href="http://cuiqingcai.com/3472.html" target="_blank" rel="noopener">小白进阶之Scrapy第一篇</a><br><a href="http://cuiqingcai.com/3952.html" target="_blank" rel="noopener">小白进阶之Scrapy第二篇（登录篇）</a><br><a href="http://cuiqingcai.com/4048.html" target="_blank" rel="noopener">小白进阶之</a><a href="http://cuiqingcai.com/4020.html" target="_blank" rel="noopener">Scrapy分布式的前篇–让redis和MongoDB安全点</a><br><a href="http://cuiqingcai.com/4048.html" target="_blank" rel="noopener">小白进阶之Scrapy第三篇（基于Scrapy-Redis的分布式以及cookies池）</a><br><a href="http://cuiqingcai.com/4421.html" target="_blank" rel="noopener">小白进阶之Scrapy第四篇（图片下载管道篇）</a><br><a href="http://cuiqingcai.com/4725.html" target="_blank" rel="noopener">小白进阶之Scrapy第五篇（Scrapy-Splash配合CrawlSpider；瞎几把整的）</a><br><a href="http://cuiqingcai.com/4652.html" target="_blank" rel="noopener">利用新接口抓取微信公众号的所有文章</a><br><a href="https://cuiqingcai.com/6058.html" target="_blank" rel="noopener">小白进阶之</a><a href="http://cuiqingcai.com/4725.html" target="_blank" rel="noopener">Scrapy第六篇</a><a href="https://cuiqingcai.com/6058.html" target="_blank" rel="noopener">Scrapy-Redis详解</a><br><a href="https://www.jianshu.com/p/cd4054bbc757" target="_blank" rel="noopener">https://www.jianshu.com/p/cd4054bbc757</a><br><a href="https://cloud.tencent.com/developer/article/1114535" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1114535</a><br>爬虫只运行在一台机器上时，受计算能力和网络带宽的影响，即使使用了异步和多线程技术，在待爬数据量较大时，需要耗费的时间会比较长，爬取效率也非常有限。<br>而多台主机协同爬取，效率会成倍增加。此即为分布式爬取，在网络中的多台计算机上同时运行爬虫程序，共同完成一个大型爬取任务。<br>Scrapy本身并不是一个为分布式爬取而设计的框架，但第三方库scrapy-redis为其拓展了分布式爬取的功能，两者结合便是一个分布式Scrapy爬虫框架。<br>在分布式爬虫框架中，需要使用某种通信机制协调各个爬虫的工作，让每一个爬虫明确自己的任务，其中包括：<br>（1）当前的爬取任务，即下载+提取数据（分配任务）。<br>（2）当前爬取任务是否已经被其他爬虫执行过（任务去重）。<br>（3）如何存储爬取到的数据（数据存储）。<br>scrapy-redis利用Redis数据库作为多个爬虫的数据共享实现以上功能。<br>网站的树结构(url分层设计)<br>网站url树结构分层设计:<br>bogbole.com<br>blog.bogbole.com<br>python.bogbole.com<br>python.bogbole.com/123<br>去重问题与策略<br>环路链接问题<br>从首页到下面节点。<br>但是下面的链接节点又会有链接指向首页。<br>有些已经爬过<br>将访问过的url保存到数据库中<br>将url保存到set中。只需要O(1)的代价就可以查询到url</p><blockquote><p>100000000<em>2byte</em>50个字符/1024/1024/1024 = 9G<br>url经过md5等方法哈希后保存到set中，将url压缩到固定长度而且不重复<br>用bitmap方法，将访问过的url通过hash函数映射到某一位<br>bloomfilter方法对bitmap进行改进，多重hash函数降低冲突（scrapy去重，分布式scrapy-redis）<br><a href="https://wenku.baidu.com/view/18e85d4117fc700abb68a98271fe910ef02dae47.html" target="_blank" rel="noopener">基于Hadoop的分布式网络爬虫系统的设计与实现</a></p></blockquote><h1 id="7-数据分析"><a href="#7-数据分析" class="headerlink" title="7. 数据分析"></a>7. 数据分析</h1><h2 id="7-1-可视化"><a href="#7-1-可视化" class="headerlink" title="7.1. 可视化"></a>7.1. 可视化</h2><p>地图<br>轨迹</p><h2 id="7-2-NumPy"><a href="#7-2-NumPy" class="headerlink" title="7.2. NumPy"></a>7.2. NumPy</h2><p>一维数组<br>多维数组<br>数组的运算</p><h2 id="7-3-pandas"><a href="#7-3-pandas" class="headerlink" title="7.3. pandas"></a>7.3. pandas</h2><p>数据清洗<br>数据分组、分割、合并和变形<br>缺失值、异常值和重复值处理<br>时序数据处理<br>数据类型转换</p><h1 id="8-框架"><a href="#8-框架" class="headerlink" title="8. 框架"></a>8. 框架</h1><p>爬虫架构设计<br>爬虫框架<br>什么是<br>常见的</p><ul><li>CrawlSpider与链接提取器、CrawlSpider实例</li><li>Crawley</li><li>Portia</li><li>newspaper</li><li>Python-goose</li><li>PySpider<br>手机应用框架<br>PySpider框架基本使用及抓取TripAdvisor实战<br>PySpider架构概述及用法详解<br>PyQuery详解<br>Selenium详解<h1 id="9-项目实施"><a href="#9-项目实施" class="headerlink" title="9. 项目实施"></a>9. 项目实施</h1>熟练掌握一种开源爬虫工具，有研发爬虫框架经验者优先；scrapy、webmagic、nutch、heritrix、Requests、Selenium、Appium、PhantomS  </li><li>著名爬虫框架Scrapy的运用、</li><li>通过Redis和Scrapy的结合实现分布式爬虫</li><li>整个的实现过程以及注意事项</li><li>PySpider（基本功能）<br>熟悉HttpClient、HtmlParser、Jsoup、Lucene、Nutch中的一种或多种开源技术<br>研究各种网页特点和规律<br>项目描述<br>功能分析<br>实现思路<br>网站分析<br>编写实战<br>调试与运行<br>项目实施<br>优化方案<br>代码优化<br>效率优化<br>网页分析算法<br>数据来源分析<br>工作流程<br>通过热力图分析为用户提供出行建议<br>从数据到产品<br>产品设计<br>产品交付<br>数据获取渠道<br>发现数据的价值<br>pyecharts业服务<br>从价值探索到交付落地<br>创新的不确定性<br>房产的标题是如何影响价格的<br>通过 2 个爬虫免试获得 2 个业界知名公司 offer</li></ul><ul><li>具备一个爬虫开发工程师需要的全部技能</li><li>理论性、经验性的内容为主，远远无法达到一个系统的标准</li><li>完整的爬虫开发需要学习的知识的体系</li><li>在过去的工作中完成过上百个抓取任务</li><li>参与和维护着使用 Celery、Twisted 等技术完成每天上亿次抓取量的抓取服务</li><li>3个写爬虫实现功能的视频</li><li>17年4月在知乎开过一场叫做 爬虫从入门到进阶 的知乎Live，目前已经有3.3k+人参加，评分4.9分(满分5分)<h2 id="9-1-框架搭建"><a href="#9-1-框架搭建" class="headerlink" title="9.1. 框架搭建"></a>9.1. 框架搭建</h2>架构设计、系统规划、建立、开发、研发、维护（完善）与管理、日常监控、优化、建模、调研<br>爬虫系统的架构设  </li></ul><ul><li>精通信息抓取抽取技术和整合技术、抽取算法保证抽取、去重、分类、解析、增量融合入库等流程之后的数据结果；内容提取  <ul><li>网页去重  、大规模爬取中的去重问题 、海量数据的去重方式以及各种去重方式的优劣比较</li></ul></li><li>网页信息调度、采集抓取提取、维护、验证、抓取规划、解析、清洗、入库以及汇总、清洗、整理、整合及合并、有数据分析能力。研发和优化工作  </li><li>分布式网络爬虫、高并发、高可用爬虫平台架构的设计和优化  </li><li>爬虫系统与数据分析系统数据接口设计和开发  </li><li>高性能爬虫系统的后台监控、报警模块的开发  </li><li>爬虫引擎核心功能  </li><li>能快速部署新的爬虫应用  <ul><li>多线程、多进程、协程相关知识及编程经验 、网路编程以及Web认证机制  </li><li>分布式、</li><li>抓取调度，多样化抓取，页面解析和结构化抽取，海量数据存储和读取、实时高并发海量数据爬取  </li></ul></li><li>核心算法的策略优化：充分利用资源，避免限制；  <ul><li>模板提高扩展性、效率和质量、持续优化系统提高系统的稳定性、监控抓取数据的完整性  </li><li>调权调度、分析预测、质量判断、封禁与反封禁研究  </li></ul></li><li>备份  <h2 id="9-2-扩展技能"><a href="#9-2-扩展技能" class="headerlink" title="9.2. 扩展技能"></a>9.2. 扩展技能</h2>熟悉搜索引擎、有搜索开发经验加分、优化搜索、匹配、抓取等关键程序的性能及效率<br>有网站开发经历加分、web挖掘能力<br>挖掘算法优化<br>数据分类及分布统计，文本分类、统计分析<br>特征挖掘。具有数据挖掘、自然语言处理、信息检索<br>个性化相关的机器学习算法、精通主流分词算法、分类、提取摘要、大规模网页聚类、索引等相关开发经验者优先。<br>有客户端及相关安全领域经验者优先  <h2 id="9-3-后起"><a href="#9-3-后起" class="headerlink" title="9.3. 后起"></a>9.3. 后起</h2>网页外挂机器人开发及维护<br>进行技术分享与培训<br>网页数据的自动化爬取脚本<br>数据爬取平台相关工具平台的架构设计与产品开发<br>参与数据层建设，专注于基础数据采集平台建设<br>爬取10w量级的数据<br>统计分析、可视化展示，发掘数据价值 【彩色直方图、折线图】<br>Django展示数据图<br>多平台信息的抓取和分析  <h2 id="9-4-加分项目"><a href="#9-4-加分项目" class="headerlink" title="9.4. 加分项目"></a>9.4. 加分项目</h2>垂直领域数据 社交、新闻媒体、论坛类、商业大数据、金融证券行业<br>网络数据源  </li></ul><ul><li>网站（页）：电商网站、定期爬取指定网站（如亚马逊、ebay平台）的数据、有大型B2C、C2C电商网站  </li><li>APP<br>1，项目的目标。【爬取知乎Live的所有实时语音分享以及知乎Live的听众。知乎Live的URL地址为<a href="https://www.zhihu.com/lives】" target="_blank" rel="noopener">https://www.zhihu.com/lives】</a><br>2.列举出各项目所采用的技术。<br>3.初始Url<br>4.项目步骤</li></ul><ul><li>一个简单的Python网络爬虫</li><li>维基百科<ul><li>维基百科是一个网络百科全书，在一般情况下允许用户编辑任何条目。当前维基百科由非营利组织维基媒体基金会负责营运。维基百科一词是由网站核心技术Wiki和具有百科全书之意的encyclopedia共同创造出来的新混合词Wikipedia。</li></ul></li><li>大众点评<ul><li><a href="http://www.dianping.com/search/category/7/10" target="_blank" rel="noopener">http://www.dianping.com/search/category/7/10</a></li><li>有很多商户的信息和用户点评数据。</li></ul></li><li>（1）通过大众点评的搜索结果获取餐厅的基本信息和地址。</li><li>（2）进入每家店铺的网页，获取大众点评餐厅的详细信息和评价。</li><li>百度地图API<ul><li><a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-placeapi" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-placeapi</a></li><li>获取中国所有城市的公园数据，并且获取每一个公园具体的评分、描述等详情，最终将数据存储到MySQL数据库中。</li><li>拥有丰富的餐馆、房地产等数据，是一款网络地图搜索服务。可查地理位置，最近位置。街道、商场、楼盘、餐馆、学校、银行、公园等。百度地图提供了丰富的API供开发者调用，我们可以免费地获取各类地点的具体信息。</li><li>免费API：新浪微博、豆瓣电影、饿了么、豆瓣音乐、Facebook、Twitter。</li><li>收费API：百度API Store、聚合数据</li></ul></li><li>知乎<ul><li>知乎是中文互联网一个非常大的知识社交平台。在知乎上，用户可以通过问答等交流方式获取知识。区别于百度知道等问答网站，知乎的回答往往非常深入，都是回答者精心写的，知乎上聚集了中国互联网科技、商业、文化等领域里最具创造力的人群，将高质量的内容通过人的节点形成规模的生产和分享，构建高价值人际关系网络。</li></ul></li><li>爬取了博客文章评论<h1 id="10-实际爬虫"><a href="#10-实际爬虫" class="headerlink" title="10. 实际爬虫"></a>10. 实际爬虫</h1>Requests+正则表达式<br>分析Ajax请求<br>使用Selenium模拟浏览器<br>使用Redis+Flask<br>房产<br>基于位置信息的Ⅰ<br>猫眼电影<br>今日头条街拍美图<br>淘宝商品美食信息<br>维护动态代理池<br>维护动态Cookies池<br>使用代理处理反爬抓取微信文章<br>图片<br>链接<br>糗事百科<br>微信<br>博客类<br>图片类<br>模拟登录<br>抢票软件的实现<br>PEXELS图片<br>糗事百科网的用户地址信息<br>豆瓣音乐TOP250的数据<br>豆瓣电影TOP250的数据<br>豆瓣网图书TOP250的数据<br>维基百科<br>餐厅点评<br>知乎Live<br>百度地图API<br>畅销书籍<br>TOP250电影数据<br>房屋价格数据<br>虎扑论坛<br>酷狗TOP500的数据<br>知乎网Python精华话题<br>简书网热门专题信息<br>简书网专题收录文章<br>简书网推荐信息<br>简书网热评文章<br>简书网用户动态信息<br>简书网7日热门信息<br>拉勾网招聘信息<br>起点中文网小说信息<br>《斗破苍穹》全文小说<br>新浪微博好友圈信息<br>QQ空间好友说说<br>转转网二手市场商品信息<br>淘宝商品信息<br>北京地区短租房信息<br>糗事百科网的段子信息<br>电商网站(商品)数据——大型爬虫(Selenium)<br>BOSS直聘爬虫<br>Keep热门<br>果壳网自动登录<br>大麦网演出<br>小说网<br>博客<br>猜数游戏半自动爬虫开发<br>股票行情（用Scrapy）<br>深圳短租数据（Selenium）<br>用API爬取天气预报数据<br>知乎(asyncio)<br>新浪微博<br>京东<br>淘宝<br>出版社信息<br>京东图书<br>当当网<br>新闻<br>豆瓣网登陆爬虫与验证码自动识别<br>模拟登录<br>腾讯动漫（JS动态触发+id随机生成反爬破解实战）<br>微信爬虫<br>腾讯视频评论爬虫思路介绍<br>腾讯视频评论爬虫实战<br>糗事百科<br>抓包分析实战<br>tt商品图片爬虫实战<br>tt商品大型爬虫项目与自动写入数据库实战）<br>作业讲解：博文信息的爬取<br>腾讯微信和视频<br>百度信息自动搜索<br>自动POST<h3 id="10-0-1-简单的爬虫"><a href="#10-0-1-简单的爬虫" class="headerlink" title="10.0.1. 简单的爬虫"></a>10.0.1. 简单的爬虫</h3>【用到的库】requests + bs4<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/Santostang/PythonScraping/blob/master/第一版/Cha 2 - 编写你的第一个网络爬虫/Cha 2 _章末实战.ipynb</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup   <span class="comment">#从bs4这个库中导入BeautifulSoup</span></span><br><span class="line"><span class="comment"># 第一步：获取页面</span></span><br><span class="line">link = <span class="string">"http://www.santostang.com/"</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125;</span><br><span class="line">r = requests.get(link, headers= headers) <span class="comment"># requests的headers伪装成浏览器访问。r是requests的Response回复对象。</span></span><br><span class="line"><span class="comment"># 第二步：提取需要的数据</span></span><br><span class="line">soup = BeautifulSoup(r.text, <span class="string">"html.parser"</span>)      <span class="comment"># 使用BeautifulSoup解析这段网页。把HTML代码转化为soup对象。r.text是获取的网页内容代码</span></span><br><span class="line">title = soup.find(<span class="string">"h1"</span>, class_=<span class="string">"post-title"</span>).a.text.strip() <span class="comment"># 提取第一篇文章的标题</span></span><br><span class="line"><span class="keyword">print</span> (title)</span><br><span class="line"><span class="comment"># 第三步：存储数据</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'title_test.txt'</span>, <span class="string">"a+"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(title)</span><br></pre></td></tr></table></figure></li></ul><h3 id="10-0-2-爬取豆瓣电影TOP250"><a href="#10-0-2-爬取豆瓣电影TOP250" class="headerlink" title="10.0.2. 爬取豆瓣电影TOP250"></a>10.0.2. 爬取豆瓣电影TOP250</h3><p>【用到的库】requests + bs4<br>获取豆瓣电影TOP250的所有电影的名称<br>网页地址为：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">https://movie.douban.com/top250</a><br>第一页有25个电影<br>获取所有的250页电影<br>总共10页的内容<br>第二页：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">https://movie.douban.com/top250</a>? start=25<br>第三页：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">https://movie.douban.com/top250</a>? start=50<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_movies</span><span class="params">()</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'movie.douban.com'</span></span><br><span class="line">    &#125;</span><br><span class="line">    movie_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        link = <span class="string">'https://movie.douban.com/top250?start='</span> + str(i * <span class="number">25</span>)</span><br><span class="line">        r = requests.get(link, headers=headers, timeout= <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">print</span> (str(i+<span class="number">1</span>),<span class="string">"页响应状态码:"</span>, r.status_code)</span><br><span class="line"> </span><br><span class="line">        soup = BeautifulSoup(r.text, <span class="string">"lxml"</span>)</span><br><span class="line">        div_list = soup.find_all(<span class="string">'div'</span>, class_=<span class="string">'hd'</span>)</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> div_list:</span><br><span class="line">            movie = each.a.span.text.strip()</span><br><span class="line">            movie_list.append(movie)</span><br><span class="line">    <span class="keyword">return</span> movie_list</span><br><span class="line"> </span><br><span class="line">movies = get_movies()</span><br><span class="line"><span class="keyword">print</span> (movies)</span><br><span class="line"><span class="comment"># 原文有误</span></span><br><span class="line"><span class="comment"># 用 ]: 便于在 ipynb 中查找下一项</span></span><br></pre></td></tr></table></figure></p><p>参考链接：豆瓣电影(<a href="https://github.com/Santostang/PythonScraping/blob/master/第一版/Cha" target="_blank" rel="noopener">https://github.com/Santostang/PythonScraping/blob/master/第一版/Cha</a> 3 -静态网页抓取/Cha 3 _章末实战.ipy)<br>进阶问题：获取TOP 250电影的英文名、港台名、导演、主演、上映年份、电影分类以及评分。</p><h3 id="10-0-3-爬取动态网页"><a href="#10-0-3-爬取动态网页" class="headerlink" title="10.0.3. 爬取动态网页"></a>10.0.3. 爬取动态网页</h3><p>【用到的库】requests + json<br>AJAX加载的动态网页，有两种爬取方法：<br>（1）通过浏览器审查元素解析地址。<br>（2）通过Selenium模拟浏览器抓取。<br>两个特别重要的变量，即offset和limit。<br>limit：每一页评论数量的最大值<br>offset：本页的第一条评论是总的第几条<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_page_comment</span><span class="params">(link)</span>:</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125;</span><br><span class="line">    r = requests.get(link, headers= headers)</span><br><span class="line">    <span class="comment"># 获取 json 的 string</span></span><br><span class="line">    json_string = r.text</span><br><span class="line">    json_string = json_string[json_string.find(<span class="string">'&#123;'</span>):<span class="number">-2</span>]</span><br><span class="line">    json_data = json.loads(json_string) <span class="comment"># 使用json.loads()把字符串格式的响应体数据转化为json数据</span></span><br><span class="line">    comment_list = json_data[<span class="string">'results'</span>][<span class="string">'parents'</span>] <span class="comment"># json数据的结构提取</span></span><br><span class="line">    <span class="keyword">for</span> eachone <span class="keyword">in</span> comment_list:</span><br><span class="line">        message = eachone[<span class="string">'content'</span>]</span><br><span class="line">        <span class="keyword">print</span> (message)</span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">    link1 = <span class="string">"https://api-zero.livere.com/v1/comments/list?callback=jQuery112407875296433383039_1506267778283&amp;limit=10&amp;offset="</span></span><br><span class="line">    link2 = <span class="string">"&amp;repSeq=3871836&amp;requestPath=%2Fv1%2Fcomments%2Flist&amp;consumerSeq=1020&amp;livereSeq=28583&amp;smartloginSeq=5154&amp;_=1506267778285"</span></span><br><span class="line">    page_str = str(page)</span><br><span class="line">    link = link1 + page_str + link2</span><br><span class="line">    <span class="keyword">print</span> (link)</span><br><span class="line">    single_page_comment(link)</span><br></pre></td></tr></table></figure></p><p>参考链接：<br><a href="https://github.com/Santostang/PythonScraping/blob/master/第一版/Cha" target="_blank" rel="noopener">https://github.com/Santostang/PythonScraping/blob/master/第一版/Cha</a> 4 -动态网页抓取/Cha 4 -动态网页抓取.ipynb</p><h3 id="10-0-4-通过Selenium模拟浏览器抓取"><a href="#10-0-4-通过Selenium模拟浏览器抓取" class="headerlink" title="10.0.4. 通过Selenium模拟浏览器抓取"></a>10.0.4. 通过Selenium模拟浏览器抓取</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">"https://www.dianping.com/search/category/7/10/p1"</span>)</span><br><span class="line"><span class="comment"># 如果运行之后，发现程序报错：</span></span><br><span class="line"><span class="comment">#     selenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH.</span></span><br><span class="line"><span class="comment"># 可以到https://github.com/mozilla/geckodriver/releases下载最新版的geckodriver，解压后可以放在Python安装目录（可能是Script子文件夹）下（可能需并放在环境变量的PATH中）。</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.firefox_binary <span class="keyword">import</span> FirefoxBinary </span><br><span class="line">caps = webdriver.DesiredCapabilities().FIREFOX</span><br><span class="line">caps[<span class="string">"marionette"</span>] = <span class="keyword">False</span></span><br><span class="line"> </span><br><span class="line">path =  <span class="string">r'D:\\Program Files\\Mozilla Firefox\\firefox.exe'</span></span><br><span class="line">binary = FirefoxBinary(path) <span class="comment"># Firefox程序的地址</span></span><br><span class="line">driver = webdriver.Firefox(firefox_binary=binary, capabilities=caps)</span><br><span class="line">driver.get(<span class="string">"http://www.santostang.com/2017/03/02/hello-world/"</span>)</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    load_more = driver.find_element_by_css_selector(<span class="string">'div.tie-load-more'</span>)   <span class="comment"># 更多或下一页</span></span><br><span class="line">    load_more.click()            <span class="comment"># 模拟单击</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">comments = driver.find_elements_by_css_selector(<span class="string">'div.bdy- inner'</span>) </span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">user = driver.find_element_by_name(<span class="string">"username"</span>)  <span class="comment">#找到用户名输入框</span></span><br><span class="line">user.clear  <span class="comment">#清除用户名输入框内容</span></span><br><span class="line">user.send_keys(<span class="string">"1234567"</span>)  <span class="comment">#在框中输入用户名</span></span><br><span class="line">pwd = driver.find_element_by_name(<span class="string">"password"</span>)  <span class="comment">#找到密码输入框</span></span><br><span class="line">pwd.clear  <span class="comment">#清除密码输入框内容</span></span><br><span class="line">pwd.send_keys(<span class="string">"＊＊＊＊＊＊"</span>)    <span class="comment">#在框中输入密码</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"loginBtn"</span>).click()  <span class="comment">#单击登录</span></span><br></pre></td></tr></table></figure><h3 id="10-0-5-深圳短租"><a href="#10-0-5-深圳短租" class="headerlink" title="10.0.5. 深圳短租"></a>10.0.5. 深圳短租</h3><p>目的：获取Airbnb深圳前20页的短租房源的名称、价格、评价数量、房屋类型、床数量和房客数量。监控和了解竞争对手的房屋名称和价格，让自己的房子有竞争力。<br>网址：<a href="https://zh.airbnb.com/s/Shenzhen--China?page=1" target="_blank" rel="noopener">https://zh.airbnb.com/s/Shenzhen--China?page=1</a><br>4.4.1 网站分析<br>一个房子的所有数据。地址为：div.infoContainer_v72lrv。<br>价格数据，地址为：div.priceContainer_4ml1ll<br>评价数据，地址为：span.text_5mbkop-o_O-size_micro_16wifzf-o_O-inline_g86r3e<br>房屋名称数据，地址为：div.listingNameContainer_kq7ac0-o_O-ellipsized_1iurgbx<br>房间类型、床数量和房客数量，地址为：span.detailWithoutWrap_j1kt73<br>4.4.2 项目实践<br>用Selenium获取Airbnb第一页的数据。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.firefox_binary <span class="keyword">import</span> FirefoxBinary</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">caps = webdriver.DesiredCapabilities().FIREFOX</span><br><span class="line">caps[<span class="string">"marionette"</span>] = <span class="keyword">True</span></span><br><span class="line">binary = FirefoxBinary(<span class="string">r'C:\Program Files\Firefox Developer Edition\firefox.exe'</span>)</span><br><span class="line"><span class="comment"># 把上述地址改成你电脑中Firefox程序的地址 </span></span><br><span class="line"><span class="comment"># 如果没改，会出现selenium.common.exceptions.SessionNotCreatedException: Message: Unable to find a matching set of capabilities</span></span><br><span class="line"><span class="comment">#用 selenium 的 driver 来启动 firefox</span></span><br><span class="line">driver = webdriver.Firefox(firefox_binary=binary, capabilities=caps)</span><br><span class="line"><span class="comment">#在虚拟浏览器中打开 Airbnb 页面。使用Selenium打开该页面</span></span><br><span class="line">driver.get(<span class="string">"https://zh.airbnb.com/s/Shenzhen--China?page=1"</span>)</span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line"><span class="comment">#找到页面中所有的出租房。用Selenium的css selector获取所有房屋的div数据</span></span><br><span class="line">rent_list = driver.find_elements_by_css_selector(<span class="string">'div._1788tsr0'</span>)</span><br><span class="line"><span class="comment">#对于每一个出租房</span></span><br><span class="line"><span class="keyword">for</span> eachhouse <span class="keyword">in</span> rent_list:</span><br><span class="line">    <span class="comment">#找到评论数量</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        comment = eachhouse.find_element_by_css_selector(<span class="string">'span._gb7fydm'</span>)</span><br><span class="line">        comment = comment.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        comment = <span class="number">0</span></span><br><span class="line">    <span class="comment">#找到价格</span></span><br><span class="line">    price = eachhouse.find_element_by_css_selector(<span class="string">'span._hylizj6'</span>)</span><br><span class="line">    price = price.text[<span class="number">4</span>:]</span><br><span class="line">    <span class="comment">#找到名称</span></span><br><span class="line">    name = eachhouse.find_element_by_css_selector(<span class="string">'div._ew0cqip'</span>)</span><br><span class="line">    name = name.text</span><br><span class="line">    <span class="comment">#找到房屋类型，大小</span></span><br><span class="line">    details = eachhouse.find_elements_by_css_selector(<span class="string">'div._saba1yg small div span'</span>)</span><br><span class="line">    details = details[<span class="number">0</span>].text</span><br><span class="line">    house_type = details.split(<span class="string">" · "</span>)[<span class="number">0</span>]</span><br><span class="line">    bed_number = details.split(<span class="string">" · "</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">print</span> (comment, price, name, house_type, bed_number)</span><br></pre></td></tr></table></figure></p><p>进阶：将Selenium的控制CSS加载、控制图片加载和控制JavaScript加载加入本实践项目的代码中，从而提升爬虫的速度。<br><a href="https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%80%E7%89%88/Cha%204%20-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96/Cha%204%20_%E7%AB%A0%E6%9C%AB%E5%AE%9E%E6%88%98.ipynb" target="_blank" rel="noopener">https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%80%E7%89%88/Cha%204%20-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96/Cha%204%20_%E7%AB%A0%E6%9C%AB%E5%AE%9E%E6%88%98.ipynb</a></p><h1 id="11-相关参考"><a href="#11-相关参考" class="headerlink" title="11. 相关参考"></a>11. 相关参考</h1><h2 id="11-1-allitebooks"><a href="#11-1-allitebooks" class="headerlink" title="11.1. allitebooks"></a>11.1. allitebooks</h2><p>Web Scraping with Python（有2版）<br>Website Scraping with Python    -<br>Learning Scrapy<br>Webbots, Spiders, and Screen Scrapers<br>Getting Started with Beautiful Soup</p><h2 id="11-2-其他"><a href="#11-2-其他" class="headerlink" title="11.2. 其他"></a>11.2. 其他</h2><p>Web Scraping with Python Collecting More Data from the Modern Web- 城通网盘  ||似乎与Ryan Mitchell的是同一本<br>Learning Selenium Testing Tools with Python<br>Python Requests Essentials<br>Web Scraping with Python, 2nd Edition<br>Practical Web Scraping for Data Science<br>Python Web Scraping Cookbook - 2018<br>Spider Webb’s Angels<br>Python Web Scraping<br>Python数据抓取技术与实战   仅京东 </p><h2 id="11-3-中文书籍"><a href="#11-3-中文书籍" class="headerlink" title="11.3. 中文书籍"></a>11.3. 中文书籍</h2><ul><li>Python网络爬虫从入门到实践，唐松</li></ul><ul><li>Github：<a href="https://github.com/Santostang/PythonScraping" target="_blank" rel="noopener">https://github.com/Santostang/PythonScraping</a><br>百度网：<a href="http://pan.baidu.com/s/1c2w9rck" target="_blank" rel="noopener">http://pan.baidu.com/s/1c2w9rck</a><br>书本对应的Python网络爬虫的教学:<a href="http://www.santostang.com" target="_blank" rel="noopener">www.santostang.com</a><br>网站不会更改设计和框架，本书的网络爬虫代码可以一直使用<br>作者自己的博客网站，可以避免一些法律上的风险</li></ul><ul><li><a href="https://github.com/qiyeboy/SpiderBook" target="_blank" rel="noopener">https://github.com/qiyeboy/SpiderBook</a> python爬虫开发与项目实战<h2 id="11-4-暂缺电子书"><a href="#11-4-暂缺电子书" class="headerlink" title="11.4. 暂缺电子书"></a>11.4. 暂缺电子书</h2>Spidering Hacks-<br>Python轻松学:爬虫、游戏与架站-<br>Python网络爬虫实例教程-<br>Python项目案例开发从入门到实战-<br>Python网络爬虫技术-<br>解密搜索引擎技术实战：Lucene &amp;Java精华版(第2版) : Lucene &amp; Java精华版-<br>Web Scraping with Python-Richard Lawson- <a href="https://book.douban.com/subject/26386962/" target="_blank" rel="noopener">https://book.douban.com/subject/26386962/</a><h2 id="11-5-网址"><a href="#11-5-网址" class="headerlink" title="11.5. 网址"></a>11.5. 网址</h2><a href="https://github.com/cjql/scrapy-redis/tree/master/src" target="_blank" rel="noopener">https://github.com/cjql/scrapy-redis/tree/master/src</a><h2 id="11-6-GitHub上的爬虫项目"><a href="#11-6-GitHub上的爬虫项目" class="headerlink" title="11.6. GitHub上的爬虫项目"></a>11.6. GitHub上的爬虫项目</h2><h3 id="11-6-1-爬虫框架"><a href="#11-6-1-爬虫框架" class="headerlink" title="11.6.1. 爬虫框架"></a>11.6.1. 爬虫框架</h3><a href="https://github.com/binux/pyspider" target="_blank" rel="noopener">https://github.com/binux/pyspider</a><br><a href="https://github.com/cuanboy/scrapyTest" target="_blank" rel="noopener">https://github.com/cuanboy/scrapyTest</a><br><a href="https://github.com/marchtea/scrapy_doc_chs" target="_blank" rel="noopener">https://github.com/marchtea/scrapy_doc_chs</a> scrapy中文翻译文档<h3 id="11-6-2-财经类"><a href="#11-6-2-财经类" class="headerlink" title="11.6.2. 财经类"></a>11.6.2. 财经类</h3><a href="https://github.com/cedricporter/funcat" target="_blank" rel="noopener">https://github.com/cedricporter/funcat</a> Funcat 将同花顺、通达信、文华财经麦语言等的公式写法移植到了 Python 中<br><a href="https://github.com/fmzquant/fmz_extend_api_demo" target="_blank" rel="noopener">https://github.com/fmzquant/fmz_extend_api_demo</a> 零成本快速打造你自己专属的多用户量化交易平台<br><a href="https://github.com/40robber/ScrapyDouban" target="_blank" rel="noopener">https://github.com/40robber/ScrapyDouban</a> 豆瓣电影/豆瓣读书 Scarpy 爬虫<br><a href="https://github.com/96chh/crawl-zsxq" target="_blank" rel="noopener">https://github.com/96chh/crawl-zsxq</a> 知识星球<br><a href="https://github.com/airingursb/bilibili-user" target="_blank" rel="noopener">https://github.com/airingursb/bilibili-user</a> bilibili<br><a href="https://github.com/airingursb/bilibili-video" target="_blank" rel="noopener">https://github.com/airingursb/bilibili-video</a><br><a href="https://github.com/bowenpay/wechat-spider" target="_blank" rel="noopener">https://github.com/bowenpay/wechat-spider</a> 微信公众号<br><a href="https://github.com/chenjiandongx/51job-spider" target="_blank" rel="noopener">https://github.com/chenjiandongx/51job-spider</a> 前程无忧 Python 招聘岗位信息爬取和分析 图文分析<br><a href="https://github.com/chenjiandongx/mzitu" target="_blank" rel="noopener">https://github.com/chenjiandongx/mzitu</a><br><a href="https://github.com/eqblog/91_porn_spider" target="_blank" rel="noopener">https://github.com/eqblog/91_porn_spider</a> 91porn爬虫<br><a href="https://github.com/GuozhuHe/webspider" target="_blank" rel="noopener">https://github.com/GuozhuHe/webspider</a> <strong>很漂亮</strong><br><a href="https://github.com/houyf/crawler" target="_blank" rel="noopener">https://github.com/houyf/crawler</a> 中大爬虫 基于scrapy爬虫框架<br><a href="https://github.com/lanbing510/DouBanSpider" target="_blank" rel="noopener">https://github.com/lanbing510/DouBanSpider</a> 豆瓣读书<br><a href="https://github.com/lanbing510/LianJiaSpider" target="_blank" rel="noopener">https://github.com/lanbing510/LianJiaSpider</a> 链家<br><a href="https://github.com/LiuRoy/zhihu_spider" target="_blank" rel="noopener">https://github.com/LiuRoy/zhihu_spider</a> 知乎<br><a href="https://github.com/LiuXingMing/SinaSpider" target="_blank" rel="noopener">https://github.com/LiuXingMing/SinaSpider</a> 新浪微博爬虫（Scrapy、Redis）<br><a href="https://github.com/MarvelousDick/WeiboSpiderSimple" target="_blank" rel="noopener">https://github.com/MarvelousDick/WeiboSpiderSimple</a> 微博爬虫简单<br><a href="https://github.com/Python3WebSpider/WeiboList" target="_blank" rel="noopener">https://github.com/Python3WebSpider/WeiboList</a> 微博<br><a href="https://github.com/samrayleung/jd_spider" target="_blank" rel="noopener">https://github.com/samrayleung/jd_spider</a> 京东爬虫<br><a href="https://github.com/starFalll/Spider" target="_blank" rel="noopener">https://github.com/starFalll/Spider</a> 新浪微博爬虫(Sina weibo spider)，百度搜索结果 爬虫<br><a href="https://github.com/TonyK-T/qichachaScrapy" target="_blank" rel="noopener">https://github.com/TonyK-T/qichachaScrapy</a> 企查查 网站爬取 scrapy<br><a href="https://github.com/wqh0109663/JobSpiders" target="_blank" rel="noopener">https://github.com/wqh0109663/JobSpiders</a> scrapy框架爬取51job(scrapy.Spider)，智联招聘(扒接口)，拉勾网(CrawlSpider)<br><a href="https://github.com/xjr7670/QQzone_crawler" target="_blank" rel="noopener">https://github.com/xjr7670/QQzone_crawler</a> QQ 空间动态爬虫，利用cookie登录获取所有可访问好友空间的动态保存到本地<br><a href="https://github.com/zkqiang/Zhihu-Login" target="_blank" rel="noopener">https://github.com/zkqiang/Zhihu-Login</a> 知乎模拟登录，支持验证码和保存 Cookies<br><a href="https://github.com/fst034356/crawler" target="_blank" rel="noopener">https://github.com/fst034356/crawler</a><br><a href="https://github.com/librauee/Reptile" target="_blank" rel="noopener">https://github.com/librauee/Reptile</a> 各类爬虫<br><a href="https://github.com/Nyloner/Nyspider" target="_blank" rel="noopener">https://github.com/Nyloner/Nyspider</a> 💗💗💗💗💗<br><a href="https://github.com/pythonsite/spider" target="_blank" rel="noopener">https://github.com/pythonsite/spider</a><br><a href="https://github.com/jhao104/proxy_pool" target="_blank" rel="noopener">https://github.com/jhao104/proxy_pool</a> Python爬虫代理IP池(proxy pool)<br><a href="https://github.com/Karmenzind/fp-server" target="_blank" rel="noopener">https://github.com/Karmenzind/fp-server</a> 免费本地代理<br><a href="https://github.com/Alfred1984/interesting-python/blob/master/ICU996/analysis/996.ipynb" target="_blank" rel="noopener">https://github.com/Alfred1984/interesting-python/blob/master/ICU996/analysis/996.ipynb</a><br><a href="https://nbviewer.jupyter.org/github/Alfred1984/interesting-python/blob/master/ICU996/analysis/996.ipynb" target="_blank" rel="noopener">https://nbviewer.jupyter.org/github/Alfred1984/interesting-python/blob/master/ICU996/analysis/996.ipynb</a><br><a href="https://chenjiabing666.github.io" target="_blank" rel="noopener">https://chenjiabing666.github.io</a><br><a href="http://github.com/Chyroc/WechatSogou" target="_blank" rel="noopener">http://github.com/Chyroc/WechatSogou</a> 微信公众号爬虫。基于搜狗微信搜索的微信公众号爬虫接口，可以扩展成基于搜狗搜索的爬虫，返回结果是列表，每一项均是公众号具体信息字典。<br><a href="http://github.com/lanbing510/DouBanSpider" target="_blank" rel="noopener">http://github.com/lanbing510/DouBanSpider</a> 豆瓣读书爬虫。可以爬下豆瓣读书标签下的所有图书，按评分排名依次存储，存储到Excel中，可方便大家筛选搜罗，比如筛选评价人数&gt;1000的高分书籍；可依据不同的主题存储到Excel不同的Sheet ，采用User Agent伪装为浏览器进行爬取，并加入随机延时来更好的模仿浏览器行为，避免爬虫被封。<br><a href="http://github.com/LiuRoy/zhihu_spider" target="_blank" rel="noopener">http://github.com/LiuRoy/zhihu_spider</a> 知乎爬虫。此项目的功能是爬取知乎用户信息以及人际拓扑关系，爬虫框架使用scrapy，数据存储使用mongo<br><a href="http://github.com/airingursb/bilibili-user" target="_blank" rel="noopener">http://github.com/airingursb/bilibili-user</a> Bilibili用户爬虫。总数据数：20119918，抓取字段：用户id，昵称，性别，头像，等级，经验值，粉丝数，生日，地址，注册时间，签名，等级与经验值等。抓取之后生成B站用户数据报告。<br><a href="http://github.com/LiuXingMing/SinaSpider" target="_blank" rel="noopener">http://github.com/LiuXingMing/SinaSpider</a> 新浪微博爬虫。主要爬取新浪微博用户的个人信息、微博信息、粉丝和关注。代码获取新浪微博Cookie进行登录，可通过多账号登录来防止新浪的反扒。主要使用 scrapy 爬虫框架。<br><a href="http://github.com/gnemoug/distribute_crawler" target="_blank" rel="noopener">http://github.com/gnemoug/distribute_crawler</a> 小说下载分布式爬虫。使用scrapy,Redis, MongoDB,graphite实现的一个分布式网络爬虫,底层存储MongoDB集群,分布式使用Redis实现,爬虫状态显示使用graphite实现，主要针对一个小说站点。<br><a href="http://github.com/yanzhou/CnkiSpider" target="_blank" rel="noopener">http://github.com/yanzhou/CnkiSpider</a> 中国知网爬虫。设置检索条件后，执行src/CnkiSpider.py抓取数据，抓取数据存储在/data目录下，每个数据文件的第一行为字段名称。<br><a href="http://github.com/lanbing510/LianJiaSpider" target="_blank" rel="noopener">http://github.com/lanbing510/LianJiaSpider</a> 链家网爬虫。爬取北京地区链家历年二手房成交记录。涵盖链家爬虫一文的全部代码，包括链家模拟登录代码。<br><a href="http://github.com/taizilongxu/scrapy_jingdong" target="_blank" rel="noopener">http://github.com/taizilongxu/scrapy_jingdong</a> 京东爬虫。基于scrapy的京东网站爬虫，保存格式为csv。<br><a href="http://github.com/caspartse/QQ-Groups-Spider" target="_blank" rel="noopener">http://github.com/caspartse/QQ-Groups-Spider</a> QQ 群爬虫。批量抓取 QQ 群信息，包括群名称、群号、群人数、群主、群简介等内容，最终生成 XLSX) / CSV 结果文件。<br><a href="http://github.com/hanc00l/wooyun_public" target="_blank" rel="noopener">http://github.com/hanc00l/wooyun_public</a> 乌云爬虫。 乌云公开漏洞、知识库爬虫和搜索。全部公开漏洞的列表和每个漏洞的文本内容存在MongoDB中，大概约2G内容；如果整站爬全部文本和图片作为离线查询，大概需要10G空间、2小时（10M电信带宽）；爬取全部知识库，总共约500M空间。漏洞搜索使用了Flask作为web server，bootstrap作为前端。<br><a href="http://github.com/simapple/spider" target="_blank" rel="noopener">http://github.com/simapple/spider</a> hao123网站爬虫。以hao123为入口页面，滚动爬取外链，收集网址，并记录网址上的内链和外链数目，记录title等信息，windows7 32位上测试，目前每24个小时，可收集数据为10万左右<br><a href="http://github.com/fankcoder/findtrip" target="_blank" rel="noopener">http://github.com/fankcoder/findtrip</a> 机票爬虫（去哪儿和携程网）。Findtrip是一个基于Scrapy的机票爬虫，目前整合了国内两大机票网站（去哪儿 + 携程）。<br><a href="http://github.com/leyle/163spider" target="_blank" rel="noopener">http://github.com/leyle/163spider</a> 基于requests、MySQLdb、torndb的网易客户端内容爬虫<br><a href="http://github.com/dontcontactme/doubanspiders" target="_blank" rel="noopener">http://github.com/dontcontactme/doubanspiders</a> 豆瓣电影、书籍、小组、相册、东西等爬虫集__<br><a href="http://github.com/LiuXingMing/QQSpider" target="_blank" rel="noopener">http://github.com/LiuXingMing/QQSpider</a> QQ空间爬虫，包括日志、说说、个人信息等，一天可抓取 400 万条数据。<br><a href="http://github.com/Shu-Ji/baidu-music-spider" target="_blank" rel="noopener">http://github.com/Shu-Ji/baidu-music-spider</a> 百度mp3全站爬虫，使用redis支持断点续传。<br><a href="http://github.com/pakoo/tbcrawler" target="_blank" rel="noopener">http://github.com/pakoo/tbcrawler</a> 淘宝和天猫的爬虫,可以根据搜索关键词,物品id来抓去页面的信息，数据存储在mongodb。<br><a href="http://github.com/benitoro/stockholm" target="_blank" rel="noopener">http://github.com/benitoro/stockholm</a> 一个股票数据（沪深）爬虫和选股策略测试框架。根据选定的日期范围抓取所有沪深两市股票的行情数据。支持使用表达式定义选股策略。支持多线程处理。保存数据到JSON文件、CSV文件。<br><a href="http://github.com/k1995/BaiduyunSpider" target="_blank" rel="noopener">http://github.com/k1995/BaiduyunSpider</a> 百度云盘爬虫。<br><a href="http://github.com/Qutan/Spider" target="_blank" rel="noopener">http://github.com/Qutan/Spider</a> 社交数据爬虫。支持微博,知乎,豆瓣。<br><a href="http://github.com/jhao104/proxy_pool" target="_blank" rel="noopener">http://github.com/jhao104/proxy_pool</a> Python爬虫代理IP池proxy pool)。<br><a href="http://github.com/RitterHou/music-163" target="_blank" rel="noopener">http://github.com/RitterHou/music-163</a> 爬取网易云音乐所有歌曲的评论。<br><a href="http://github.com/kulovecc/jandan_spider" target="_blank" rel="noopener">http://github.com/kulovecc/jandan_spider</a> 爬取煎蛋妹纸图片。<br><a href="http://github.com/jackgitgz/CnblogsSpider" target="_blank" rel="noopener">http://github.com/jackgitgz/CnblogsSpider</a> cnblogs列表页爬虫。<br><a href="http://github.com/qiyeboy/spider_smooc" target="_blank" rel="noopener">http://github.com/qiyeboy/spider_smooc</a> 爬取慕课网视频。<br><a href="http://github.com/yanzhou/CnkiSpider" target="_blank" rel="noopener">http://github.com/yanzhou/CnkiSpider</a> 中国知网爬虫。<br><a href="http://github.com/littlethunder/knowsecSpider2" target="_blank" rel="noopener">http://github.com/littlethunder/knowsecSpider2</a> 知道创宇爬虫题目。<br><a href="http://github.com/x-spiders/aiss-spider" target="_blank" rel="noopener">http://github.com/x-spiders/aiss-spider</a> 爱丝APP图片爬虫。<br><a href="http://github.com/szcf-weiya/SinaSpider" target="_blank" rel="noopener">http://github.com/szcf-weiya/SinaSpider</a> 动态IP解决新浪的反爬虫机制，快速抓取内容。<br><a href="http://github.com/Kevinsss/csdn-spider" target="_blank" rel="noopener">http://github.com/Kevinsss/csdn-spider</a> 爬取CSDN上的博客文章。<br><a href="http://github.com/changetjut/ProxySpider" target="_blank" rel="noopener">http://github.com/changetjut/ProxySpider</a> 爬取西刺上的代理IP，并验证代理可用性<br><a href="http://github.com/GuozhuHe/webspider" target="_blank" rel="noopener">http://github.com/GuozhuHe/webspider</a> 本系统是一个主要使用python3, celery和requests来爬取职位数据的爬虫，实现了定时任务，出错重试，日志记录，自动更改Cookies等的功能，并使用ECharts + Bootstrap 来构建前端页面，来展示爬取到的数据。<br><a href="https://github.com/princehaku/pyrailgun" target="_blank" rel="noopener">https://github.com/princehaku/pyrailgun</a><br>京东商品列表 <a href="https://mp.weixin.qq.com/s/G3wrHkhixRAOZjOtoHF3ww" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/G3wrHkhixRAOZjOtoHF3ww</a><br>java抓取京东图书 <a href="https://mp.weixin.qq.com/s/1poZ8oMFonBcC0stQ6V2YA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/1poZ8oMFonBcC0stQ6V2YA</a><br>抓取京东商品数据 <a href="https://mp.weixin.qq.com/s/YKWwnRagUbGsDmCMoo-mZQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/YKWwnRagUbGsDmCMoo-mZQ</a><br>爬取京东商品列表 <a href="https://mp.weixin.qq.com/s/BeGKesA-gL901wA0EjViUw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/BeGKesA-gL901wA0EjViUw</a><br>京东商城 前100页商品明细 <a href="https://mp.weixin.qq.com/s/h1cxAu9SpfpnfgH65rSa1A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/h1cxAu9SpfpnfgH65rSa1A</a><br>京东的商品评价  <a href="https://mp.weixin.qq.com/s/8L_WwwAC6dEhCyF4xRSKqg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/8L_WwwAC6dEhCyF4xRSKqg</a><br>利用Selenium自动登陆京东签到领金币 <a href="https://mp.weixin.qq.com/s/uzmCx1ZPDmpDKjqJdvm2xA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/uzmCx1ZPDmpDKjqJdvm2xA</a><br>京东促销 <a href="https://mp.weixin.qq.com/s/OgJu2sMTWEr0wep865MhnQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/OgJu2sMTWEr0wep865MhnQ</a><br>京东登录 <a href="https://mp.weixin.qq.com/s/u4BXvG2oCVmfhSxc4_B-oA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/u4BXvG2oCVmfhSxc4_B-oA</a><br>京东商品价格走势及图书评论数据  <a href="https://mp.weixin.qq.com/s/cOqIHgr3sLl4K9WbrZUFUQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/cOqIHgr3sLl4K9WbrZUFUQ</a><br>Python爬虫大战京东商城 <a href="https://mp.weixin.qq.com/s/sI2gyfD_QjIxgdEVwbn8GQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/sI2gyfD_QjIxgdEVwbn8GQ</a><br>如何打造类似数据虫巢官网系列教程之二：爬虫是怎么炼成的 <a href="https://mp.weixin.qq.com/s/k6f1l6kd7EWAO4ziAgK4Tg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/k6f1l6kd7EWAO4ziAgK4Tg</a><br>京东的文胸 <a href="https://mp.weixin.qq.com/s/0OjQxBVXfCgDjtCtFPt0OQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/0OjQxBVXfCgDjtCtFPt0OQ</a><br>京东图书scrapy <a href="https://mp.weixin.qq.com/s/R2pZ_p3Avr-RyjKo6A5BtA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/R2pZ_p3Avr-RyjKo6A5BtA</a><br><a href="https://www.zhihu.com/people/diqiuyo" target="_blank" rel="noopener">地球的外星人君</a><br><a href="https://e.jd.com/30392604.html" target="_blank" rel="noopener">https://e.jd.com/30392604.html</a><br><a href="https://dx.3.cn/desc/30392604?cdn=2&amp;callback=showdesc" target="_blank" rel="noopener">https://dx.3.cn/desc/30392604?cdn=2&amp;callback=showdesc</a><h2 id="11-7-公众号文章"><a href="#11-7-公众号文章" class="headerlink" title="11.7. 公众号文章"></a>11.7. 公众号文章</h2>[<a href="http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735655&amp;idx=1&amp;sn=2bb4f6ab950951d6b88e2e85aff94cd9&amp;chksm=ff44b9b9c83330afcb0300b198c2da5170dd8d2fda7e16d44e47ff6ab979456a54a7c381eefd&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735655&amp;idx=1&amp;sn=2bb4f6ab950951d6b88e2e85aff94cd9&amp;chksm=ff44b9b9c83330afcb0300b198c2da5170dd8d2fda7e16d44e47ff6ab979456a54a7c381eefd&amp;scene=21#wechat_redirect</a> 中文分词原理及常用Python中文分词库介绍]<br>session和cookies<br>[<a href="http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735603&amp;idx=1&amp;sn=2ac4107c695c7b45a58d8e66d4161a3f&amp;chksm=ff44b9edc83330fbb125b612cea0b06a4ea31031c90030a3f9da3529fc6fd4e8422a972e31f8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735603&amp;idx=1&amp;sn=2ac4107c695c7b45a58d8e66d4161a3f&amp;chksm=ff44b9edc83330fbb125b612cea0b06a4ea31031c90030a3f9da3529fc6fd4e8422a972e31f8&amp;scene=21#wechat_redirect</a> Session和Cookies的基本原理]<br>环境<br>[<a href="http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735532&amp;idx=1&amp;sn=759df7bda6de3e9a832197f142f10f62&amp;chksm=ff44b932c83330241d8d53e31fc75edb82c9c61855ad72f104fea59063ba7154830a5ddb559f&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735532&amp;idx=1&amp;sn=759df7bda6de3e9a832197f142f10f62&amp;chksm=ff44b932c83330241d8d53e31fc75edb82c9c61855ad72f104fea59063ba7154830a5ddb559f&amp;scene=21#wechat_redirect</a> Requests库作者Kenneth Reitz的另一神作！虚拟环境及包管理工具Pipenv！]<br>框架<br>[<a href="http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735407&amp;idx=1&amp;sn=ba444a92d5d3af0dba317ac7da14c987&amp;chksm=ff44b8b1c83331a7f95d7248d4a3e4c7cb14898047e3ce1ae534eaf8684a0e806885d905e100&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735407&amp;idx=1&amp;sn=ba444a92d5d3af0dba317ac7da14c987&amp;chksm=ff44b8b1c83331a7f95d7248d4a3e4c7cb14898047e3ce1ae534eaf8684a0e806885d905e100&amp;scene=21#wechat_redirect</a> 跟繁琐的命令行说拜拜！Gerapy分布式爬虫管理框架来袭！]<br>代理<br>[<a href="http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735511&amp;idx=1&amp;sn=150d7fbe05364c11caf4805256255108&amp;chksm=ff44b909c833301f3e97277f1ed5fb791920b0c2586eeaa5abb68e33f27a94fbfa5f3451cb70&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735511&amp;idx=1&amp;sn=150d7fbe05364c11caf4805256255108&amp;chksm=ff44b909c833301f3e97277f1ed5fb791920b0c2586eeaa5abb68e33f27a94fbfa5f3451cb70&amp;scene=21#wechat_redirect</a> 爬虫代理哪家强？十大付费代理详细对比评测出炉！]<br>软件<br>[<a href="http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735774&amp;idx=1&amp;sn=a625cfa50ceb75e26f173fe4b2f29e9a&amp;chksm=ff44ba00c8333316917f4ce0619324af57c601f9a18d42ba65dcba15f1f8a76cb85bb6c6d2b8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735774&amp;idx=1&amp;sn=a625cfa50ceb75e26f173fe4b2f29e9a&amp;chksm=ff44ba00c8333316917f4ce0619324af57c601f9a18d42ba65dcba15f1f8a76cb85bb6c6d2b8&amp;scene=21#wechat_redirect</a> 只会用Selenium爬网页？Appium爬App了解一下]<br>cookies<br>[<a href="http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735749&amp;idx=1&amp;sn=4bb2566e541931b75941fa55e62c6881&amp;chksm=ff44ba1bc833330d70da3cc4f7f46f7745a990c97aacf5c869d736fc35ab3983794a38846781&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735749&amp;idx=1&amp;sn=4bb2566e541931b75941fa55e62c6881&amp;chksm=ff44ba1bc833330d70da3cc4f7f46f7745a990c97aacf5c869d736fc35ab3983794a38846781&amp;scene=21#wechat_redirect</a> 妈妈再也不用担心爬虫被封号了！手把手教你搭建Cookies池]<br>软件<br>[<a href="http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735743&amp;idx=1&amp;sn=19ec53e0e0cc4d1b86aefa583d10b079&amp;chksm=ff44ba61c8333377a032ba78eb57ff463b1df9d6f7eee74905f89974ace3aac47141818de76a&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457735743&amp;idx=1&amp;sn=19ec53e0e0cc4d1b86aefa583d10b079&amp;chksm=ff44ba61c8333377a032ba78eb57ff463b1df9d6f7eee74905f89974ace3aac47141818de76a&amp;scene=21#wechat_redirect</a> App爬虫神器mitmproxy和mitmdump的使用]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483800&amp;idx=1&amp;sn=daada33afab8267413ad97011565c51b&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483800&amp;idx=1&amp;sn=daada33afab8267413ad97011565c51b&amp;amp</a> Scrapy爬取知乎——模拟登录]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483798&amp;idx=1&amp;sn=49dbfbae0793c1edef02937251bec043&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483798&amp;idx=1&amp;sn=49dbfbae0793c1edef02937251bec043&amp;amp</a> 零基础Python修炼笔记]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483796&amp;idx=1&amp;sn=c0a74adc1118c7ebf3c9fd50c725a272&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483796&amp;idx=1&amp;sn=c0a74adc1118c7ebf3c9fd50c725a272&amp;amp</a> 爬取美团网站信息（二）]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483772&amp;idx=1&amp;sn=51ee4d2e0bab5e149044622ac57f9b48&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483772&amp;idx=1&amp;sn=51ee4d2e0bab5e149044622ac57f9b48&amp;amp</a> 爬取美团网站信息（一）]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483751&amp;idx=1&amp;sn=065f4c907323f8ac210fb0c7b5cec5c0&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483751&amp;idx=1&amp;sn=065f4c907323f8ac210fb0c7b5cec5c0&amp;amp</a> 爬虫必须得会的预备知识]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483731&amp;idx=1&amp;sn=67160d98bb4667f0529253c3cc95dd06&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483731&amp;idx=1&amp;sn=67160d98bb4667f0529253c3cc95dd06&amp;amp</a> 黑科技：用Python查看共同好友]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483723&amp;idx=1&amp;sn=a549911b45bf9ec0e39012147f9cd5f8&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483723&amp;idx=1&amp;sn=a549911b45bf9ec0e39012147f9cd5f8&amp;amp</a> 牛逼了|用Python写一个微信提醒备忘录]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483719&amp;idx=1&amp;sn=053511fdbf777d491e713b5406b6d9fc&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483719&amp;idx=1&amp;sn=053511fdbf777d491e713b5406b6d9fc&amp;amp</a> 使用Python开发你的第一个服务器程序]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483717&amp;idx=1&amp;sn=60b43a34878e9f59017c4adfd9fa314c&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483717&amp;idx=1&amp;sn=60b43a34878e9f59017c4adfd9fa314c&amp;amp</a> 用Xpath,bs4,正则三种方式爬51job]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483714&amp;idx=1&amp;sn=82c233b1196b88cc5eb0807f70e2311b&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483714&amp;idx=1&amp;sn=82c233b1196b88cc5eb0807f70e2311b&amp;amp</a> 用Python爬视频超级简单的!]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483714&amp;idx=1&amp;sn=82c233b1196b88cc5eb0807f70e2311b&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483714&amp;idx=1&amp;sn=82c233b1196b88cc5eb0807f70e2311b&amp;amp</a> 用Python爬视频超级简单的!]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483712&amp;idx=1&amp;sn=ad3325b848f8dcf368ed386143f8067b&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483712&amp;idx=1&amp;sn=ad3325b848f8dcf368ed386143f8067b&amp;amp</a> Python爬虫：动态爬取QQ说说并生成词云，分析朋友状况]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483710&amp;idx=1&amp;sn=50f245908938bde95f6e56a8a2c7d1f7&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483710&amp;idx=1&amp;sn=50f245908938bde95f6e56a8a2c7d1f7&amp;amp</a> Python爬虫：学习Selenium并使用Selenium模拟登录知乎]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483708&amp;idx=1&amp;sn=c2bc85de38212b7475083d5130ce74ef&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483708&amp;idx=1&amp;sn=c2bc85de38212b7475083d5130ce74ef&amp;amp</a> Python爬虫：把爬取到的数据插入到execl中]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483679&amp;idx=1&amp;sn=7aef4e119c561c7c1f732c6064b3cab4&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483679&amp;idx=1&amp;sn=7aef4e119c561c7c1f732c6064b3cab4&amp;amp</a> Python爬取大量数据时，如何防止IP被封]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483678&amp;idx=1&amp;sn=5f2142dc8b4da2484b218fac601294a2&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483678&amp;idx=1&amp;sn=5f2142dc8b4da2484b218fac601294a2&amp;amp</a> Python爬虫：现学现用xpath爬取豆瓣音乐]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483671&amp;idx=1&amp;sn=9c88e3964b63aa6570010b2664b3fedd&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483671&amp;idx=1&amp;sn=9c88e3964b63aa6570010b2664b3fedd&amp;amp</a> Python爬虫准备：认识urllib/urllib2与requests]<br>[<a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483667&amp;idx=1&amp;sn=2df35e159981fc2a38423b0810b9de09&amp;amp" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=Mzg4ODE2MDA4OQ==&amp;mid=2247483667&amp;idx=1&amp;sn=2df35e159981fc2a38423b0810b9de09&amp;amp</a> Python 新手入门引导]<h2 id="11-8-崔庆才的博客"><a href="#11-8-崔庆才的博客" class="headerlink" title="11.8. 崔庆才的博客"></a>11.8. 崔庆才的博客</h2><h3 id="11-8-1-一、爬虫入门"><a href="#11-8-1-一、爬虫入门" class="headerlink" title="11.8.1. 一、爬虫入门"></a>11.8.1. 一、爬虫入门</h3></li></ul><ol><li><a href="https://cuiqingcai.com/927.html" target="_blank" rel="noopener">Python爬虫入门一之综述</a></li><li><a href="https://cuiqingcai.com/942.html" target="_blank" rel="noopener">Python爬虫入门二之爬虫基础了解</a></li><li><a href="https://cuiqingcai.com/947.html" target="_blank" rel="noopener">Python爬虫入门三之Urllib库的基本使用</a></li><li><a href="https://cuiqingcai.com/954.html" target="_blank" rel="noopener">Python爬虫入门四之Urllib库的高级用法</a></li><li><a href="https://cuiqingcai.com/961.html" target="_blank" rel="noopener">Python爬虫入门五之URLError异常处理</a></li><li><a href="https://cuiqingcai.com/968.html" target="_blank" rel="noopener">Python爬虫入门六之Cookie的使用</a></li><li><a href="https://cuiqingcai.com/977.html" target="_blank" rel="noopener">Python爬虫入门七之正则表达式</a><h3 id="11-8-2-二、爬虫实战"><a href="#11-8-2-二、爬虫实战" class="headerlink" title="11.8.2. 二、爬虫实战"></a>11.8.2. 二、爬虫实战</h3></li><li><a href="https://cuiqingcai.com/990.html" target="_blank" rel="noopener">Python爬虫实战一之爬取糗事百科段子</a></li><li><a href="https://cuiqingcai.com/993.html" target="_blank" rel="noopener">Python爬虫实战二之爬取百度贴吧帖子</a></li><li><a href="https://cuiqingcai.com/2083.html" target="_blank" rel="noopener">Python爬虫实战三之实现山东大学无线网络掉线自动重连</a></li><li><a href="https://cuiqingcai.com/1001.html" target="_blank" rel="noopener">Python爬虫实战四之抓取淘宝MM照片</a></li><li><a href="https://cuiqingcai.com/1076.html" target="_blank" rel="noopener">Python爬虫实战五之模拟登录淘宝并获取所有订单</a></li><li><a href="https://cuiqingcai.com/1972.html" target="_blank" rel="noopener">Python爬虫实战六之抓取爱问知识人问题并保存至数据库</a></li><li><a href="https://cuiqingcai.com/997.html" target="_blank" rel="noopener">Python爬虫实战七之计算大学本学期绩点</a></li><li><a href="https://cuiqingcai.com/2852.html" target="_blank" rel="noopener">Python爬虫实战八之利用Selenium抓取淘宝匿名旺旺</a><h3 id="11-8-3-三、爬虫利器"><a href="#11-8-3-三、爬虫利器" class="headerlink" title="11.8.3. 三、爬虫利器"></a>11.8.3. 三、爬虫利器</h3></li><li><a href="https://cuiqingcai.com/2556.html" target="_blank" rel="noopener">Python爬虫利器一之Requests库的用法</a></li><li><a href="https://cuiqingcai.com/1319.html" target="_blank" rel="noopener">Python爬虫利器二之Beautiful Soup的用法</a></li><li><a href="https://cuiqingcai.com/2621.html" target="_blank" rel="noopener">Python爬虫利器三之Xpath语法与lxml库的用法</a></li><li><a href="https://cuiqingcai.com/2577.html" target="_blank" rel="noopener">Python爬虫利器四之PhantomJS的用法</a></li><li><a href="https://cuiqingcai.com/2599.html" target="_blank" rel="noopener">Python爬虫利器五之Selenium的用法</a></li><li><a href="https://cuiqingcai.com/2636.html" target="_blank" rel="noopener">Python爬虫利器六之PyQuery的用法</a><h3 id="11-8-4-四、爬虫进阶"><a href="#11-8-4-四、爬虫进阶" class="headerlink" title="11.8.4. 四、爬虫进阶"></a>11.8.4. 四、爬虫进阶</h3></li><li><a href="https://cuiqingcai.com/2433.html" target="_blank" rel="noopener">Python爬虫进阶一之爬虫框架概述</a></li><li><a href="https://cuiqingcai.com/2443.html" target="_blank" rel="noopener">Python爬虫进阶二之PySpider框架安装配置</a></li><li><a href="https://cuiqingcai.com/912.html" target="_blank" rel="noopener">Python爬虫进阶三之爬虫框架Scrapy安装配置</a></li><li><a href="https://cuiqingcai.com/2652.html" target="_blank" rel="noopener">Python爬虫进阶四之PySpider的用法</a></li><li><a href="https://cuiqingcai.com/3325.html" target="_blank" rel="noopener">Python爬虫进阶五之多线程的用法</a></li><li><a href="https://cuiqingcai.com/3335.html" target="_blank" rel="noopener">Python爬虫进阶六之多进程的用法</a></li><li><a href="https://cuiqingcai.com/3443.html" target="_blank" rel="noopener">Python爬虫进阶七之设置ADSL拨号服务器代理</a><h1 id="12-附录"><a href="#12-附录" class="headerlink" title="12. 附录"></a>12. 附录</h1>必备软件的安装与故障排除<h2 id="12-1-平台"><a href="#12-1-平台" class="headerlink" title="12.1. 平台"></a>12.1. 平台</h2>搭建平台、开发环境<br>Linux、Windows、Mac<h2 id="12-2-软件安装及环境配置"><a href="#12-2-软件安装及环境配置" class="headerlink" title="12.2. 软件安装及环境配置"></a>12.2. 软件安装及环境配置</h2>Anaconda： <a href="https://www.continuum.io/downloads" target="_blank" rel="noopener">https://www.continuum.io/downloads</a> 。<br>Jupyter<br>默认端口：8888<br>为什么推荐大家使用Jupyter学习和编写Python脚本呢？<br>Jupyter：交互式编程和展示功能。<br>分段执行，编写和测试时边看边写，加快调试速度。<br>能够把运行和输出的结果保存下来，下次打开这个Notebook时也可以看到之前运行的结果。<br>还可以添加各种元素，比如图片、视频、链接等，同时还支持Markdown，可以充当PPT使用。<br>Alt + Enter jupyter快捷键<br>MongoDB环境配置<br>Robomongo：MongoDB数据库的可视化管理工具。<br>MySQL环境配置<br>Python、Python多版本共存配置<br>PyCharm<br>Redis、修改Redis配置<br>Redis Desktop Manager：Redis的可视化管理工具。<ul><li>下载 <a href="https://redisdesktop.com/download" target="_blank" rel="noopener">https://redisdesktop.com/download</a></li><li>界面 <a href="https://res.weread.qq.com/wrepub/epub_928559_154" target="_blank" rel="noopener">https://res.weread.qq.com/wrepub/epub_928559_154</a><br>Scrapy<br>SQLAlchemy<h2 id="12-3-第三方库"><a href="#12-3-第三方库" class="headerlink" title="12.3. 第三方库"></a>12.3. 第三方库</h2>Python爬虫常用库的安装<br>Lxml<br>Requests<br>BeautifulSoup</li></ul></li></ol><h1 id="13-术语表"><a href="#13-术语表" class="headerlink" title="13. 术语表"></a>13. 术语表</h1><p>Anaconda：Python开发集成环境。南美洲的巨蟒。自带Python、pip和Jupyter。<br>第三方库：可理解为供用户调用的代码组合。在安装某个库之后，可以直接调用其中的功能，使得我们不用一个代码一个代码地实现某个功能。<br>代码缩进：代码要按照结构以Tab键或者4个空格进行缩进严格缩进<br>DT（Data Technology，数据技术）<br>命令提示符。输入一些命令后，可执行对系统的管理。 Windows的cmd，开始按钮→cmd。Mac的terminal。应用程序→terminal。<br>爬虫：<br>pip：Python安装各种第三方库（package）的工具。<br>Python：蟒蛇<br>数据交换：网站与用户的沟通本质。<br>print<br>Python不需要在使用之前声明需要使用的变量和类别。<br>字符串（string）：单引号（’）或双引号（”）<br>连接字符串: +<br>数字（Number）：数字用来存储数值<br>整数（int）<br>浮点数（float）：由整数和小数部分组成。<br>列表（list）:能够包含任意种类的数据类型和任意数量。<br>创建列表非常容易，只要把不同的变量放入方括号中，并用逗号分隔即可，例如list0 = [“a”,2,”c”,4]<br>增删查改、索引、切片<br>字典（Dictionaries）：一种可变容器模型。<br>键（key）和值（value）。key必须唯一，但是值不用。值也可以取任何数据类型。<br>遍历<br>条件语句：满足条件的时候才执行某部分代码。条件为布尔值，也就是只有True和False两个值。<br>    当if判断条件成立时才执行后面的语句；当条件不成立的时候，执行else后面的语句<br>    如果需要判断的有多种条件，就需要用到elif<br>无序：字典<br>有序：列表、元组<br>对象有两种，即可更改（mutable）与不可更改（immutable）对象。在Python中，strings、tuples和numbers是不可更改对象，而list、dict等是可更改对象。<br>循环语句：多次执行一个代码片段。<br>循环分为for循环和while循环。<br>for循环：在一个给定的顺序下重复执行。<br>while循环：不断重复执行，只要能满足一定条件。<br>函数<br>代码庞大复杂时，使得代码易读，可重复使用，并且容易调整顺序。<br>函数的参数与返回值<br>面向过程编程：根据业务逻辑从上到下写代码，最容易被初学者接受。<br>函数式编程：把某些功能封装到函数中，需要用时可以直接调用，不用重复撰写。函数式的编程方法节省了大量时间。只需要写清楚输入和输出变量并执行函数即可。<br>面向对象编程：把函数进行分类和封装后放入对象中，使得开发更快、更强。首先要创建封装对象，然后还要通过对象调用被封装的内容。在某些应用场景下，面向对象编程能够显示出更大的优势。<br>如果各个函数之间独立且无共用的数据，就选用函数式编程；如果各个函数之间有一定的关联性，选用面向对象编程比较好。<br>特性与行为，属性和方法<br>面向对象的两大特性：封装和继承。<br>封装：把内容封装好，再调用封装好的内容。使用构造方法将内容封装到对象中，然后通过对象直接或self间接获取被封装的内容。<br>继承：以普通的类为基础建立专门的类对象。子继承了父的某些特性。将多个类共有的方法提取到父类中，子类继承父类中的方法即可，不必一一实现每个方法。<br>【状态码】<br>200，请求成功<br>4xx，客户端错误<br>5xx，服务器错误<br>【请求头】<br>Headers：提供了关于请求、响应或其他发送实体的信息。<br>如果没有指定请求头或请求的请求头和实际网页不一致，就可能无法返回正确的结果。<br>Chrome浏览器的检查。单击需要请求的网页，在Headers中可以看到Requests Headers的详细信息。<br>请求头的信息为：<br>GET / HTTP/1.1<br>Host: <a href="http://www.santostang.com" target="_blank" rel="noopener">www.santostang.com</a><br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36<br>Accept:<br>text/html, application/xhtml+xml, application/xml; q=0.9, image/webp, <em>/</em>; q=0.8 Accept-Encoding: gzip, deflate, sdch<br>Accept-Language: en-US, en; q=0.8, zh-CN; q=0.6, zh; q=0.4, zh-TW; q=0.2<br>GET请求，密码会显示在URL中，非常不安全。<br>POST请求，<br>【动态网页】<br>AJAX（Asynchronous Javascript And XML，异步JavaScript和XML），一种异步更新技术。<br>单击“更多”，url地址没有任何改变，有新内容加载出来。<br>数据不会出现在网页源代码中。但是有JavaScript代码。<br>最后呈现出来的数据是通过JavaScript加载的。<br>通过在后台与服务器进行少量数据交换就可以使网页实现异步更新。<br>在不重新加载整个网页的情况下对网页的某部分进行更新。<br>减少了网页重复内容的下载<br>节省了流量<br>更小、更快、更友好<br>传统的网页必须重载整个网页页面<br>动态网页的例子<br><a href="http://www.santostang.com/2018/07/04/hello-world/" target="_blank" rel="noopener">http://www.santostang.com/2018/07/04/hello-world/</a><br>页面下面的评论用JavaScript加载。评论数据没法在在网页源代码找到。<br>注释：#</p><p><a href="https://getman.cn/" target="_blank" rel="noopener">https://getman.cn/</a> 在线测试</p><ul><li>首先看有没有移动端版本</li><li>按网页展开比按ID循环爬取要好，某些网站会设定特定的网页，当这些网页被访问时会让设备处于一定时间的封禁状态，展开式爬去绕过这种反爬陷阱可能性相对较高</li></ul><p>爬虫主要是和[[网页]]打交道。</p><p>网络协议 爬取原理 爬取任何一个网页的方法与思路</p><p>与爬虫相关的Web前端：[[HTML]]结构、[[CSS]]样式、[[JavaScript]]功能、[[Xpath]]和[[JSON]]。</p><p>辅助工具：[[chardet]] [[requests]] [[Firebug]] [[lxml]] [[BeautifulSoup4]] [[mechanize]] [[urllib]] [[Scrapy]] [[PhantomJS]]</p><p>爬虫是快速获取数据最重要的方式，相比其它语言，Python爬虫更简单、高效</p><p><a href="https://docs.python.org/3/library/html.parser.html" target="_blank" rel="noopener">https://docs.python.org/3/library/html.parser.html</a></p><ul><li>如何更高效</li><li>异步、阻塞、多线程 <a href="https://www.zhihu.com/question/19732473/answer/20851256" target="_blank" rel="noopener">https://www.zhihu.com/question/19732473/answer/20851256</a></li><li>区别异步和多线程：异步是目的，而多线程是实现这个目的的方法。<br>== 清单 ==</li><li>文件操作</li><li>异常处理</li><li>如何在Urllib中使用XPath表达式</li><li>Excel表格自动合并</li><li>CSV</li><li>数据库</li><li>从txt到数据库</li><li>多线程爬虫</li><li>JSON及解析</li><li>js里面找参数</li><li>排序</li><li>封装webdrive+phantomjs</li><li>面向对象</li><li>第三方库</li><li>网络爬虫概述</li><li>网络爬虫工作原理详解</li><li>爬虫流程</li><li>抓包分析</li><li>异常处理</li><li>浏览器伪装（cookie,header怎么填）</li><li>js采集（仅仅实现selenimu或者无头）</li><li>超时设置</li><li>用户和IP代理池 （github上可能有）<br><strong> 用户代理池构建</strong> IP代理池构建的两种方案<br><strong> 同时使用用户代理池与IP代理池的方法</strong> 代理 <a href="https://www.baibianip.com/?aff=87352500" target="_blank" rel="noopener">https://www.baibianip.com/?aff=87352500</a><br>** 代理池、高匿代理</li><li>head池</li><li>机器学习验证码</li><li>OCR、识图,分部识图</li><li>http协议</li><li>分布式爬虫<br><strong> 分布式爬虫实现原理</strong> 分布式爬虫之Docker基础<br><strong> 分布式爬虫之Redis基础</strong> 分布式爬虫构建<br>** <a href="https://mp.weixin.qq.com/s/5fl0oe6Z4j6auKJG41Nw4A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/5fl0oe6Z4j6auKJG41Nw4A</a> 京东商品和评论的分布式爬虫<br>== 面试相关 ==<br>面试相关：</li><li><a href="https://www.cnblogs.com/tianyiliang/tag/python面试常见题" target="_blank" rel="noopener">https://www.cnblogs.com/tianyiliang/tag/python面试常见题</a></li><li>面试答题技巧 <a href="https://github.com/cjql/201902/issues/2" target="_blank" rel="noopener">https://github.com/cjql/201902/issues/2</a></li><li>300 道python面试 <a href="https://mp.weixin.qq.com/s/m-2ZOIZJlZESo4er_xRZZA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/m-2ZOIZJlZESo4er_xRZZA</a></li><li>爬虫面试 <a href="https://www.cnblogs.com/skiler/p/6939688.html" target="_blank" rel="noopener">https://www.cnblogs.com/skiler/p/6939688.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/35794035" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35794035</a></li><li><a href="https://m.jb51.net/article/136867.htm" target="_blank" rel="noopener">https://m.jb51.net/article/136867.htm</a></li><li><a href="https://www.cnblogs.com/zdong0103/p/8492779.html" target="_blank" rel="noopener">https://www.cnblogs.com/zdong0103/p/8492779.html</a></li></ul><p>== 累积 ==</p><ul><li>json格式如果信息显示不全，可自己拼接API(&amp;和json正文是最佳提示)</li><li>哪些页面出现多少问题</li><li>每分钟爬多少</li></ul><p>==案例==</p><ul><li>Docker部署Scrapy-redis分布式爬虫框架实践（整合Selenium+Headless Chrome网页渲染） <a href="https://mp.weixin.qq.com/s/k43v0ABKvf8gPgE4IBO6ag" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/k43v0ABKvf8gPgE4IBO6ag</a>  </li><li>分布式爬虫系统设计、实现与实战：爬取京东、苏宁易购全网手机商品数据+MySQL、HBase存储 <a href="https://mp.weixin.qq.com/s/eBSiFhWOQW3hPlWSmwXDvA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/eBSiFhWOQW3hPlWSmwXDvA</a></li><li><a href="https://github.com/cjql/spider/issues/1" target="_blank" rel="noopener">https://github.com/cjql/spider/issues/1</a> 33个网络爬虫</li><li>糗事百科爬虫</li><li>tt商品图片爬虫</li><li>tt商品大型爬虫项目与自动写入数据库</li><li>微信爬虫</li><li>京东图书</li><li>新闻爬虫</li><li>博文信息的爬取</li><li>Scrapy实现当当网商品爬虫</li><li>Scrapy模拟登录</li><li>Scrapy新闻爬虫项目</li><li>Scrapy豆瓣网登陆爬虫与验证码自动识别项目</li><li>腾讯视频评论爬虫</li><li>腾讯动漫爬虫项目（JS动态触发+id随机生成反爬破解）</li><li><a href="https://github.com/cjql/201903/issues/46" target="_blank" rel="noopener">https://github.com/cjql/201903/issues/46</a> 爬GitHub</li><li><a href="https://github.com/cjql/201903/issues/47" target="_blank" rel="noopener">https://github.com/cjql/201903/issues/47</a> 爬GitHub</li><li><a href="https://www.jianshu.com/p/36f5f74b6c04" target="_blank" rel="noopener">https://www.jianshu.com/p/36f5f74b6c04</a> Python爬虫爬取微信公众号历史文章全部链接</li><li><a href="https://www.tenable.com/downloads/cis-compliance-audit-policies" target="_blank" rel="noopener">https://www.tenable.com/downloads/cis-compliance-audit-policies</a>  爬视频和软件</li><li>简单爬虫的编写</li><li>出版社信息的爬取<br>== 他人GitHub项目 ==</li><li><a href="https://github.com/LunaticTian/TieBa-API-Sentiment" target="_blank" rel="noopener">https://github.com/LunaticTian/TieBa-API-Sentiment</a> 可参照</li><li><a href="https://github.com/LUCY78765580/Python-web-scraping" target="_blank" rel="noopener">https://github.com/LUCY78765580/Python-web-scraping</a></li><li><a href="https://github.com/wkunzhi/SpiderUtilPackage" target="_blank" rel="noopener">https://github.com/wkunzhi/SpiderUtilPackage</a></li><li><a href="https://github.com/zyingzhou/music163-spiders" target="_blank" rel="noopener">https://github.com/zyingzhou/music163-spiders</a></li><li><a href="https://github.com/xjkj123/Lianjia" target="_blank" rel="noopener">https://github.com/xjkj123/Lianjia</a><br>== 他人爬虫 ==</li><li><a href="https://github.com/cjql/201903/issues/45" target="_blank" rel="noopener">https://github.com/cjql/201903/issues/45</a> 163</li><li>京东定向ajax</li><li><a href="https://github.com/Erma-Wang/Spider" target="_blank" rel="noopener">https://github.com/Erma-Wang/Spider</a></li><li><a href="https://github.com/iamyaojie/Spider" target="_blank" rel="noopener">https://github.com/iamyaojie/Spider</a></li><li><a href="https://mp.weixin.qq.com/s/VD79jLvR1MUukrD5D7K5Wg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/VD79jLvR1MUukrD5D7K5Wg</a></li><li><a href="https://github.com/cjql/201903" target="_blank" rel="noopener">https://github.com/cjql/201903</a> 爬虫登录<br>== 进阶 ==</li><li>自动搜索爬虫</li><li>用Python爬虫做了一个开源搜索引擎 <a href="https://zhuanlan.zhihu.com/p/33414953" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33414953</a><br>== 遇到问题 ==</li><li>浏览器无法右键网页→fiddler</li><li>fiddler识别的是汉字，requests库识别处理的是乱码→用手机版网址</li><li>访问太快（88）遇反爬→headers池不起作用→非要与原网页结构一致的header才生效</li><li>换header依然只能爬一部分（130+）</li><li>访问到特定页面会被网站判定为爬虫 <a href="http://m.99lib.net/book/115/index.html" target="_blank" rel="noopener">http://m.99lib.net/book/115/index.html</a> （无法预期，重构）<br>== todo ==</li><li>阿里旅行</li><li>待突破技术</li></ul><p>基础知识及案例。<br><!-- more -->  </p><h1 id="1-库的说明"><a href="#1-库的说明" class="headerlink" title="1. 库的说明"></a>1. 库的说明</h1><h2 id="1-1-re"><a href="#1-1-re" class="headerlink" title="1.1. re"></a>1.1. re</h2><p>Python正则表达式文档：<a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener">https://docs.python.org/3/library/re.html</a><br>Python正则表达式的3种方法，分别是match、search和findall。</p><h3 id="re-match"><a href="#re-match" class="headerlink" title="re.match"></a>re.match</h3><p>re.match：从字符串起始位置匹配，有则返回re.Match object，没有则返回none。</p><blockquote><p>re.match(pattern, string, flags=0)</p><ul><li>pattern：正则表达式，包含一些特殊的字符</li><li>string：被匹配的原字符串</li><li>flags：控制正则表达式的匹配方式，如是否区分大小写、多行匹配等。</li></ul></blockquote><p>字符串匹配：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m = re.match(<span class="string">'www'</span>, <span class="string">'www.santostang.com'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"匹配的结果：  "</span>, m)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"匹配的起始与终点：  "</span>, m.span())</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"匹配的起始位置：  "</span>, m.start())</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"匹配的终点位置：  "</span>, m.end())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到的结果为：</span></span><br><span class="line"><span class="comment"># 匹配的结果： &lt;re.Match object; span=(0, 3), match='www'&gt;</span></span><br><span class="line"><span class="comment"># 匹配的起始与终点： (0, 3)</span></span><br><span class="line"><span class="comment"># 匹配的起始位置： 0</span></span><br><span class="line"><span class="comment"># 匹配的终点位置： 3</span></span><br></pre></td></tr></table></figure></p><p>正则匹配：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">line = <span class="string">"Fat cats are smarter than dogs, is it right? "</span></span><br><span class="line">m = re.match( <span class="string">r'(.＊) are (.＊? ) dogs'</span>, line)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'匹配的整句话'</span>, m.group(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'匹配的第一个结果'</span>, m.group(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'匹配的第二个结果'</span>, m.group(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'匹配的结果列表'</span>, m.groups())</span><br><span class="line"><span class="comment"># 得到的结果为：</span></span><br><span class="line"><span class="comment"># 匹配的整句话Fat cats are smarter than dogs</span></span><br><span class="line"><span class="comment"># 匹配的第一个结果Fat cats</span></span><br><span class="line"><span class="comment"># 匹配的第二个结果smarter than</span></span><br><span class="line"><span class="comment"># 匹配的结果列表 ('Fat cats', 'smarter than')</span></span><br></pre></td></tr></table></figure></p><p><a href="https://docs.python.org/3/library/re.html#match-objects" target="_blank" rel="noopener">https://docs.python.org/3/library/re.html#match-objects</a> </p><h3 id="re-search"><a href="#re-search" class="headerlink" title="re.search"></a>re.search</h3><ul><li>re.match只能从字符串的【起始】位置进行匹配。</li><li>re.search扫描整个字符串并返回【第一个】成功的匹配。</li><li>其他方面re.search与re.match一样。<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m_match = re.match(<span class="string">'com'</span>, <span class="string">'www.santostang.com'</span>)</span><br><span class="line">m_search = re.search(<span class="string">'com'</span>, <span class="string">'www.santostang.com'</span>)</span><br><span class="line"><span class="keyword">print</span> (m_match)</span><br><span class="line"><span class="keyword">print</span> (m_search)</span><br><span class="line"><span class="comment"># 得到结果为：</span></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># &lt;re.Match object; span=(15, 18), match='com'&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="re-findall方法"><a href="#re-findall方法" class="headerlink" title="re.findall方法"></a>re.findall方法</h3><ul><li>match和search，只能找到一个匹配所写的模式</li><li>findall可以找到所有的匹配，返回列表<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m_match = re.match(<span class="string">'[0-9]+'</span>, <span class="string">'12345 is the first number, 23456 is the sencond'</span>)</span><br><span class="line">m_search = re.search(<span class="string">'[0-9]+'</span>, <span class="string">'The first number is 12345, 23456 is the sencond'</span>)</span><br><span class="line">m_findall = re.findall(<span class="string">'[0-9]+'</span>, <span class="string">'12345 is the first number, 23456 is the sencond'</span>)</span><br><span class="line"><span class="keyword">print</span> (m_match.group())</span><br><span class="line"><span class="keyword">print</span> (m_search.group())</span><br><span class="line"><span class="keyword">print</span> (m_findall)</span><br></pre></td></tr></table></figure></li></ul><p>上述代码的’[0-9]+’表示任意长度的数字，然后在后面的字符串中进行匹配。</p><h3 id="为什么要在match的模式前加上r"><a href="#为什么要在match的模式前加上r" class="headerlink" title="为什么要在match的模式前加上r"></a>为什么要在match的模式前加上r</h3><p>r：raw string，纯粹的字符串。使用它就不会对引S号里面的反斜杠<code>\</code>进行特殊处理。<br>在正则表达式中有一些类似<code>\d</code>（匹配任何数字）的模式，都要进行转译。<br>假如你需要匹配文本中的字符<code>\</code>，使用编程语言表示的正则表达式里就需要4个反斜杠<code>\\\\</code>：</p><ul><li>前两个反斜杠<code>\\</code>和后两个反斜杠<code>\\</code>各自在编程语言里转义成一个反斜杠<code>\</code></li><li>所以4个反斜杠<code>\\\\</code>就转义成了两个反斜<code>\\</code></li><li>这两个反斜杠<code>\\</code>最终在正则表达式里转义成一个反斜杠<code>\</code><br>Python里的原生字符串很好地解决了这个问题，在正则表达式里不会再转义，这个例子中的正则表达式可以使用r<code>\\</code>表示。</li></ul><p>(.<em>) are会尽量匹配最多的字符。贪婪模式<br>(.</em>? )会尽量匹配尽量少的字符。非贪婪模式</p><h2 id="1-2-bs4"><a href="#1-2-bs4" class="headerlink" title="1.2. bs4"></a>1.2. bs4</h2><p>使用BeautifulSoup解析网页<br>BeautifulSoup是一个工具箱。通过【解析文档】来提取数据。</p><ul><li>可以从HTML或XML文件中提取数据。</li><li>可以提供一些简单的、Python式的函数用来处理导航、搜索、修改分析树等。<br>简单，不需要多少代码就可以写出一个完整的应用程序。非常强大。<br>支持Python标准库中的HTML解析器，还支持一些第三方的解析器。</li></ul><p>BeautifulSoup 4主要特性、适合做什么、怎样使用<br>使用BeautifulSoup获取博客标题<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">link = <span class="string">"http://www.santostang.com/"</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125; </span><br><span class="line">r = requests.get(link, headers= headers)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(r.text,<span class="string">"html.parser"</span>) <span class="comment"># 将网页响应体的字符串转化为soup对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;h1&gt;元素，class为' post-title'，提取&lt;a&gt;元素中的文字，strip()的功能是把字符串左右的空格去掉。find只是用来找到第一条结果。</span></span><br><span class="line">first_title = soup.find(<span class="string">"h1"</span>, class_=<span class="string">"post-title"</span>).a.text.strip() </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"第一篇文章的标题是："</span>, first_title)</span><br><span class="line"></span><br><span class="line">title_list = soup.find_all(<span class="string">"h1"</span>, class_=<span class="string">"post-title"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(title_list)):</span><br><span class="line">    title = title_list[i].a.text.strip()</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'第 %s 篇文章的标题是：%s'</span> %(i+<span class="number">1</span>, title))</span><br></pre></td></tr></table></figure></p><p>找所有结果，用find_all。find_all返回列表。</p><p>BeautifulSoup的其他功能<br>soup.prettify()  代码美化<br>首先，需要把：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br></pre></td></tr></table></figure></p><p>代码转化成BeautifulSoup对象。<br>BeautifulSoup对象是一个复杂的【树】形结构，它的每一个【节点】都是一个【Python对象】。</p><p>提取对象的3种方法：</p><blockquote><p>遍历文档树<br>搜索文档树<br>CSS选择器</p></blockquote><p>1．遍历文档树<br>先爬树干，然后小树干，最后树枝。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">soup.header.h3：获取取&lt;h3&gt;标签。如结果为：&lt;h3 id="name"&gt;大数据@唐松Santos&lt;/h3&gt;）。</span><br><span class="line">soup.header.div.contents：列出某个标签的所有子节点。只能获取第一代子标签。</span><br><span class="line">soup.header.div.contents[<span class="number">1</span>]：索引为<span class="number">1</span>的子标签。</span><br><span class="line">soup.header.div.children：获得所有子标签。只能获取第一代子标签。</span><br><span class="line">soup.header.div.descendants：获得所有子子孙孙标签</span><br><span class="line">soup.header.div.a.parent：获得父节点的内容：</span><br></pre></td></tr></table></figure></p><p>遍历文档树的方法其实使用得比较少。</p><p>2．搜索文档树<br>最常用的是搜索文档树。<br>最常用的是find()和find_all()。<br>find()和find_all()方法还可以和re正则结合起来使用<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(re.compile(<span class="string">"^h"</span>)):  <span class="comment"># 找出所有以h开头的标签，这表示&lt;header&gt;和&lt;h3&gt;的标签都会被找到  </span></span><br><span class="line">    print(tag.name)</span><br><span class="line"><span class="comment"># 输出的结果是：</span></span><br><span class="line"><span class="comment"># header</span></span><br><span class="line"><span class="comment"># h3</span></span><br></pre></td></tr></table></figure></p><p>如果传入正则表达式作为参数，Beautiful Soup就会通过正则表达式的match()来匹配内容。</p><ol><li>CSS选择器</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">通过tag标签逐层查找：soup.select("header h3")⇒得到的结果是：[<span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span>大数据@唐松Santos<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>]</span><br><span class="line">通过某个tag标签下的直接子标签遍历，：</span><br><span class="line">soup.select("header &gt; h3") ⇒[<span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span>大数据@唐松Santos<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>]</span><br><span class="line">soup.select("div &gt; a") ⇒ <span class="tag">&lt;<span class="name">div</span>&gt;</span>下所有的<span class="tag">&lt; <span class="attr">a</span>&gt;</span>标签</span><br><span class="line">[<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.santostang.com/feed/"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span> <span class="attr">target</span>=<span class="string">"_blank"</span><span class="attr">title</span>=<span class="string">"RSS"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>　<span class="attr">aria-hidden</span>=<span class="string">"true"</span>　<span class="attr">class</span>=<span class="string">"fa　fa-rss"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>,　<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://weibo.com/santostang"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"Weibo"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"fa fa-weibo"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>, …]</span><br><span class="line"></span><br><span class="line">soup.select('a[href^="http://www.santostang.com/"]')：找所有链接以http://www.santostang.com/开始的<span class="tag">&lt;<span class="name">a</span>&gt;</span>标签</span><br><span class="line">得到的结果是：</span><br><span class="line">[<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.santostang.com/feed/"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span> <span class="attr">target</span>=<span class="string">"_blank"</span><span class="attr">title</span>=<span class="string">"RSS"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"fa fa-rss"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.santostang.com/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.santostang.com/about-me/"</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.santostang.com/post-search/"</span>&gt;</span>文章搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.santostang.com/wp-login.php"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span>]</span><br></pre></td></tr></table></figure><p>5.3 使用lxml解析网页<br>一些比较流行的解析库<br>Xpath语法（如lxml），同样是效率比较高的解析方法。lxml使用C语言编写，解析速度比不使用lxml解析器的BeautifulSoup快一些。</p><p>5.3.2 使用lxml获取博客标题<br>使用lxml提取网页源代码数据的3种方法<br>    XPath选择器<br>    CSS选择器<br>    BeautifulSoup的find()方法</p><p>和BeautifulSoup相比，lxml还多了一种XPath选择器方法。</p><p>XPath是一门在XML文档中查找信息的语言。<br>XPath使用路径表达式来选取XML文档中的节点或节点集，也可以用在HTML获取数据中。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">link = <span class="string">"http://www.santostang.com/"</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125; </span><br><span class="line">r = requests.get(link, headers= headers)</span><br><span class="line"></span><br><span class="line">html = etree.HTML(r.text) <span class="comment"># 解析为lxml的格式</span></span><br><span class="line">title_list = html.xpath(<span class="string">'//h1[@class="post-title"]/a/text()'</span>) <span class="comment"># 用XPath读取里面的内容</span></span><br><span class="line"><span class="keyword">print</span> (title_list)</span><br><span class="line"></span><br><span class="line">//：无论在文档中什么位置</span><br><span class="line">//h1：所有&lt;h1&gt;元素</span><br><span class="line">//h1[@class="post-title"]：&lt;h1&gt;中class为"post-title"的元素</span><br><span class="line">/a表示选取&lt;h1&gt;子元素的&lt;a&gt;元素</span><br><span class="line">/text()表示提取&lt;a&gt;元素中的所有文本。</span><br></pre></td></tr></table></figure></p><p>chrome审查，右键，选取元素，Copy→Copy XPath</p><p>5.3.3 XPath的选取方法<br>XPath使用路径表达式可以在网页源代码中选取节点，它是沿着路径来选取的，如表5-3所示。<br>XPath路径表达式及其描述 <a href="https://res.weread.qq.com/wrepub/epub_928559_47" target="_blank" rel="noopener">https://res.weread.qq.com/wrepub/epub_928559_47</a><br>下面是一个XML文档，我们将用XPath提取其中的一些数据。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;? xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;? &gt;</span><br><span class="line">&lt;bookstore&gt;</span><br><span class="line">    &lt;book&gt;  </span><br><span class="line">        &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt;  </span><br><span class="line">        &lt;author&gt;J K. Rowling&lt;/author&gt;  </span><br><span class="line">        &lt;year&gt;2005&lt;/year&gt;  </span><br><span class="line">        &lt;price&gt;29.99&lt;/price&gt;</span><br><span class="line">    &lt;/book&gt;</span><br><span class="line">&lt;/bookstore&gt;</span><br></pre></td></tr></table></figure></p><p>XPath的一些路径表达式及其结果：<a href="https://res.weread.qq.com/wrepub/epub_928559_48" target="_blank" rel="noopener">https://res.weread.qq.com/wrepub/epub_928559_48</a></p><p><a href="https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%80%E7%89%88/Cha%205%20-%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5/Cha%205%20-%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5.ipynb" target="_blank" rel="noopener">https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%80%E7%89%88/Cha%205%20-%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5/Cha%205%20-%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5.ipynb</a></p><p>5.5 BeautifulSoup爬虫实践：房屋价格数据<br>目的：获取安居客网站上北京二手房的数据。获取前10页二手房源的名称、价格、几房几厅、大小、建造年份、联系人、地址、标签。<br>网址：<a href="https://beijing.anjuke.com/sale/。" target="_blank" rel="noopener">https://beijing.anjuke.com/sale/。</a><br>5.5.1 网站分析</p><p>5.5.2 项目实践<br>通过以上分析已经能够获得各个数据所在的地址，接下来用requests加上BeautifulSoup获取安居客北京二手房结果的第一页数据，代码如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    link = <span class="string">'https://beijing.anjuke.com/sale/p'</span> + str(i)</span><br><span class="line">    r = requests.get(link, headers = headers)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'现在爬取的是第'</span>, i, <span class="string">'页'</span>)</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">'lxml'</span>)</span><br><span class="line">    house_list = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">"list-item"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> house <span class="keyword">in</span> house_list:</span><br><span class="line">        name = house.find(<span class="string">'div'</span>, class_ =<span class="string">'house-title'</span>).a.text.strip()</span><br><span class="line">        price = house.find(<span class="string">'span'</span>, class_=<span class="string">'price-det'</span>).text.strip()</span><br><span class="line">        price_area = house.find(<span class="string">'span'</span>, class_=<span class="string">'unit-price'</span>).text.strip()</span><br><span class="line"></span><br><span class="line">        no_room = house.find(<span class="string">'div'</span>, class_=<span class="string">'details-item'</span>).span.text</span><br><span class="line">        area = house.find(<span class="string">'div'</span>, class_=<span class="string">'details-item'</span>).contents[<span class="number">3</span>].text</span><br><span class="line">        floor = house.find(<span class="string">'div'</span>, class_=<span class="string">'details-item'</span>).contents[<span class="number">5</span>].text</span><br><span class="line">        year = house.find(<span class="string">'div'</span>, class_=<span class="string">'details-item'</span>).contents[<span class="number">7</span>].text</span><br><span class="line">        broker = house.find(<span class="string">'span'</span>, class_=<span class="string">'brokername'</span>).text</span><br><span class="line">        broker = broker[<span class="number">1</span>:]</span><br><span class="line">        address = house.find(<span class="string">'span'</span>, class_=<span class="string">'comm-address'</span>).text.strip()</span><br><span class="line">        address = address.replace(<span class="string">'\xa0\xa0\n                    '</span>,<span class="string">'  '</span>)</span><br><span class="line">        tag_list = house.find_all(<span class="string">'span'</span>, class_=<span class="string">'item-tags'</span>)</span><br><span class="line">        tags = [i.text <span class="keyword">for</span> i <span class="keyword">in</span> tag_list] </span><br><span class="line">        <span class="keyword">print</span> (name, price, price_area, no_room, area, floor, year, broker, address, tags)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">```  </span><br><span class="line">进阶：获取其中的各项数据，如小区名称、房屋类型、房屋朝向、参考首付等。</span><br><span class="line"></span><br><span class="line">https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%<span class="number">80</span>%E7%<span class="number">89</span>%<span class="number">88</span>/Cha%<span class="number">205</span>%<span class="number">20</span>-%E8%A7%A3%E6%<span class="number">9</span>E%<span class="number">90</span>%E7%BD%<span class="number">91</span>%E9%A1%B5/Cha%<span class="number">205</span>%<span class="number">20</span>_%E7%AB%A0%E6%<span class="number">9</span>C%AB%E5%AE%<span class="number">9</span>E%E6%<span class="number">88</span>%<span class="number">98.</span>ipynb</span><br><span class="line"><span class="comment">### 1.2.1. requests  </span></span><br><span class="line">```py  </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://www.santostang.com/'</span>)  </span><br><span class="line"><span class="comment"># ========【r的方法】========  </span></span><br><span class="line"><span class="comment"># r response响应对象，存储了服务器响应的内容，以从中获取需要的信息  </span></span><br><span class="line"><span class="comment"># r.encoding  服务器内容使用的文本编码。  </span></span><br><span class="line"><span class="comment"># r.status_code 响应状态码。检测请求是否正确响应。  </span></span><br><span class="line"><span class="comment"># r.text  字符串方式的响应体。会自动根据响应头部的字符编码进行解码。  </span></span><br><span class="line"><span class="comment"># r.content 字节方式的响应体。会自动解码gzip和deflate编码的响应数据。gzip文件用这个。  </span></span><br><span class="line"><span class="comment"># r.json()  Requests中内置的JSON解码器。  </span></span><br><span class="line"><span class="comment"># r.url r对应的请求的页面网址  </span></span><br><span class="line"><span class="comment"># ========【requests.get的参数设置】========  </span></span><br><span class="line"><span class="comment">## URL参数、请求头、发送POST请求、设置超时  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ----------【params】：dict ----------  </span></span><br><span class="line"><span class="comment">### get传递url参数。http://httpbin.org/get?key1=value1&amp;key2=value2  </span></span><br><span class="line">key_dict = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;  </span><br><span class="line">r = requests.get(<span class="string">'http://httpbin.org/get'</span>, params=key_dict)  </span><br><span class="line"><span class="comment">## ----------【headers】：dict ----------  </span></span><br><span class="line"><span class="comment">### 有的网站不带请求头会返回错误的数据。带请求头使程序更像人的手动行为  </span></span><br><span class="line">headers = &#123;  </span><br><span class="line"><span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,  </span><br><span class="line"><span class="string">'Host'</span>: <span class="string">'www.santostang.com'</span>  </span><br><span class="line">&#125;  </span><br><span class="line">r = requests.get(<span class="string">'http://www.santostang.com/'</span>, headers=headers)  </span><br><span class="line"><span class="comment">## ----------【data】: dict ----------  </span></span><br><span class="line"><span class="comment">### 用于提交表单。data在发出请求的时候会自动编码为表单形式。  </span></span><br><span class="line">key_dict = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;  </span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data=key_dict)  </span><br><span class="line"><span class="comment">## ----------【timeout】: 单位为秒 ----------  </span></span><br><span class="line"><span class="comment">### 如果服务器在timeout秒内没有应答，就返回异常。一般会把这个值设置为20秒。  </span></span><br><span class="line">link = <span class="string">"http://www.santostang.com/"</span>  </span><br><span class="line">r = requests.get(link, timeout= <span class="number">0.001</span>)  </span><br><span class="line"><span class="comment">## 返回的异常为：  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ConnectTimeout: HTTPConnectionPool(host='www.santostang.com', port=80): Max retries exceeded with url: / (Caused by ConnectTimeoutError(&lt;requests.packages.urllib3.connection.HTTPConnection object at 0x00000000077806D8&gt;, 'Connection to www.santostang.com timed out. (connect timeout=0.001)'))  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 异常值的意思是，时间限制在0.001秒内，连接到地址为www.santostang.com的时间已到。  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/Santostang/PythonScraping/blob/master/第一版/Cha 3 -静态网页抓取/Cha 3 -静态网页抓取.ipynb  </span></span><br><span class="line">```  </span><br><span class="line"><span class="comment">### 1.2.2. Selenium  </span></span><br><span class="line">Selenium选择元素的方法有很多。  </span><br><span class="line">xpath和css_selector是比较好的方法，一方面比较清晰，另一方面相对其他方法定位元素比较准确。  </span><br><span class="line">```xpath</span><br><span class="line">查找单个元素：  </span><br><span class="line">find_element_by_class_name：<span class="class"><span class="keyword">class</span>选择  </span></span><br><span class="line">    如&lt;p class="content"&gt;Site content goes here.&lt;/p&gt;⇒driver.find_element_by_class_name('content')。  </span><br><span class="line">find_element_by_css_selector：<span class="class"><span class="keyword">class</span>选择  </span></span><br><span class="line">    如&lt;div class='bdy-inner'&gt;test&lt;/div&gt;⇒driver.find_element_by_css_selector ('div.bdy-inner')。  </span><br><span class="line">find_element_by_id：id选择  </span><br><span class="line">    如&lt;div id='bdy-inner'&gt;test&lt;/div&gt;⇒driver.find_element_by_id('bdy-inner')。  </span><br><span class="line">find_element_by_link_text：链接地址选择  </span><br><span class="line">    如&lt;a href="continue.html"&gt;Continue&lt;/a&gt;⇒driver.find_element_by_link_text('Continue')。  </span><br><span class="line">find_element_by_name：name选择  </span><br><span class="line">    如&lt;input name=<span class="string">"username"</span>type=<span class="string">"text"</span> /&gt;⇒driver.find_element_by_name(<span class="string">'username'</span>)。  </span><br><span class="line">find_element_by_partial_link_text：链接的部分地址选择  </span><br><span class="line">    如 &lt;a href="continue.html"&gt;Continue&lt;/a&gt;⇒driver.find_element_by_partial_link_text('Conti')。  </span><br><span class="line">find_element_by_tag_name：名称选择  </span><br><span class="line">    如&lt;h1&gt;Welcome&lt;/h1&gt;⇒driver.find_element_by_tag_name('h1')。  </span><br><span class="line">find_element_by_xpath：通过xpath选择  </span><br><span class="line">    如&lt;form id=<span class="string">"loginForm"</span>&gt; ⇒driver.find_element_by_xpath(<span class="string">"//form[@id='loginForm']"</span>)。  </span><br><span class="line"></span><br><span class="line">查找多个元素时，[element]后加上s：  </span><br><span class="line">find_elements_by_class_name  </span><br><span class="line">find_elements_by_css_selector  </span><br><span class="line">find_elements_by_link_text  </span><br><span class="line">find_elements_by_name  </span><br><span class="line">find_elements_by_partial_link_text  </span><br><span class="line">find_elements_by_tag_name  </span><br><span class="line">find_elements_by_xpath  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">除了Selenium的click操作元素方法，常见的操作元素方法：  </span><br><span class="line">● Clear清除元素的内容。  </span><br><span class="line">● send_keys模拟按键输入。  </span><br><span class="line">● Click单击元素。  </span><br><span class="line">● Submit提交表单。</span><br></pre></td></tr></table></figure></p><p>comment = driver.find_element_by_css_selector(‘div.bdy-inner’)<br>content = comment.find_element_by_tag_name(‘p’) </p><p>Selenium的高级操作：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fp = webdriver.FirefoxProfile()</span><br><span class="line"><span class="comment"># 1. 限制CSS的页面</span></span><br><span class="line">fp.set_preference(<span class="string">"permissions.default.stylesheet"</span>,<span class="number">2</span>) </span><br><span class="line"><span class="comment"># 2. 限制图片的显示。极大地提高网络爬虫的效率。图片文件相对于文字、CSS、JavaScript等文件都比较大，加载需要较长时间。</span></span><br><span class="line">fp.set_preference(<span class="string">"permissions.default.image"</span>,<span class="number">2</span>) </span><br><span class="line"><span class="comment"># 3. 控制JavaScript的运行。大多数网页都会利用JavaScript异步加载很多内容，如果这些内容不是需要的，其加载会浪费时间。</span></span><br><span class="line">fp.set_preference(<span class="string">"javascript.enabled"</span>, <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></p><p>全部限制对于加载速度的提升效果最好。如果能够限制，那么最好限制多种加载，这样的效果最好。<br>具体的加载速度提升还得看相应的网页，若网页的图片比较多，则限制图片的加载肯定效果很好。</p><p>参考链接：<a href="https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%80%E7%89%88/Cha%204%20-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96/Cha%204%20-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96.ipynb" target="_blank" rel="noopener">selenium</a></p><h1 id="2-典型应用"><a href="#2-典型应用" class="headerlink" title="2. 典型应用"></a>2. 典型应用</h1><h3 id="2-0-3-简单的爬虫"><a href="#2-0-3-简单的爬虫" class="headerlink" title="2.0.3. 简单的爬虫"></a>2.0.3. 简单的爬虫</h3><p>【用到的库】requests + bs4<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/Santostang/PythonScraping/blob/master/第一版/Cha 2 - 编写你的第一个网络爬虫/Cha 2 _章末实战.ipynb  </span></span><br><span class="line"><span class="comment">#!/usr/bin/python  </span></span><br><span class="line"><span class="comment"># coding: utf-8  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup   <span class="comment">#从bs4这个库中导入BeautifulSoup  </span></span><br><span class="line"><span class="comment"># 第一步：获取页面  </span></span><br><span class="line">link = <span class="string">"http://www.santostang.com/"</span>  </span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125;  </span><br><span class="line">r = requests.get(link, headers= headers) <span class="comment"># requests的headers伪装成浏览器访问。r是requests的Response回复对象。  </span></span><br><span class="line"><span class="comment"># 第二步：提取需要的数据  </span></span><br><span class="line">soup = BeautifulSoup(r.text, <span class="string">"html.parser"</span>)      <span class="comment"># 使用BeautifulSoup解析这段网页。把HTML代码转化为soup对象。r.text是获取的网页内容代码  </span></span><br><span class="line">title = soup.find(<span class="string">"h1"</span>, class_=<span class="string">"post-title"</span>).a.text.strip() <span class="comment"># 提取第一篇文章的标题  </span></span><br><span class="line"><span class="keyword">print</span> (title)  </span><br><span class="line"><span class="comment"># 第三步：存储数据  </span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'title_test.txt'</span>, <span class="string">"a+"</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    f.write(title)  </span><br><span class="line">    </span><br><span class="line">```  </span><br><span class="line"><span class="comment">### 2.0.4. 爬取豆瓣电影TOP250  </span></span><br><span class="line">【用到的库】requests + bs4  </span><br><span class="line">获取豆瓣电影TOP250的所有电影的名称  </span><br><span class="line">网页地址为：https://movie.douban.com/top250  </span><br><span class="line">第一页有<span class="number">25</span>个电影  </span><br><span class="line">获取所有的<span class="number">250</span>页电影  </span><br><span class="line">总共<span class="number">10</span>页的内容  </span><br><span class="line">第二页：https://movie.douban.com/top250? start=25  </span><br><span class="line">第三页：https://movie.douban.com/top250? start=50  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```py  </span><br><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_movies</span><span class="params">()</span>:</span>  </span><br><span class="line">    headers = &#123;  </span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,  </span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'movie.douban.com'</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">    movie_list = []  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):  </span><br><span class="line">        link = <span class="string">'https://movie.douban.com/top250?start='</span> + str(i * <span class="number">25</span>)  </span><br><span class="line">        r = requests.get(link, headers=headers, timeout= <span class="number">10</span>)  </span><br><span class="line">        <span class="keyword">print</span> (str(i+<span class="number">1</span>),<span class="string">"页响应状态码:"</span>, r.status_code)  </span><br><span class="line">   </span><br><span class="line">        soup = BeautifulSoup(r.text, <span class="string">"lxml"</span>)  </span><br><span class="line">        div_list = soup.find_all(<span class="string">'div'</span>, class_=<span class="string">'hd'</span>)  </span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> div_list:  </span><br><span class="line">            movie = each.a.span.text.strip()  </span><br><span class="line">            movie_list.append(movie)  </span><br><span class="line">    <span class="keyword">return</span> movie_list  </span><br><span class="line">   </span><br><span class="line">movies = get_movies()  </span><br><span class="line"><span class="keyword">print</span> (movies)  </span><br><span class="line"><span class="comment"># 原文有误  </span></span><br><span class="line"><span class="comment"># 用 ]: 便于在 ipynb 中查找下一项  </span></span><br><span class="line">```  </span><br><span class="line">参考链接：豆瓣电影(https://github.com/Santostang/PythonScraping/blob/master/第一版/Cha <span class="number">3</span> -静态网页抓取/Cha <span class="number">3</span> _章末实战.ipy)  </span><br><span class="line"></span><br><span class="line">进阶问题：获取TOP <span class="number">250</span>电影的英文名、港台名、导演、主演、上映年份、电影分类以及评分。  </span><br><span class="line"><span class="comment">### 2.0.5. 爬取动态网页  </span></span><br><span class="line">【用到的库】requests + json  </span><br><span class="line">AJAX加载的动态网页，有两种爬取方法：  </span><br><span class="line">（<span class="number">1</span>）通过浏览器审查元素解析地址。  </span><br><span class="line">（<span class="number">2</span>）通过Selenium模拟浏览器抓取。  </span><br><span class="line"></span><br><span class="line">两个特别重要的变量，即offset和limit。  </span><br><span class="line">limit：每一页评论数量的最大值  </span><br><span class="line">offset：本页的第一条评论是总的第几条  </span><br><span class="line"></span><br><span class="line">```py  </span><br><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">import</span> json  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_page_comment</span><span class="params">(link)</span>:</span>  </span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>&#125;  </span><br><span class="line">    r = requests.get(link, headers= headers)  </span><br><span class="line">    <span class="comment"># 获取 json 的 string  </span></span><br><span class="line">    json_string = r.text  </span><br><span class="line">    json_string = json_string[json_string.find(<span class="string">'&#123;'</span>):<span class="number">-2</span>]  </span><br><span class="line">    json_data = json.loads(json_string) <span class="comment"># 使用json.loads()把字符串格式的响应体数据转化为json数据  </span></span><br><span class="line">    comment_list = json_data[<span class="string">'results'</span>][<span class="string">'parents'</span>] <span class="comment"># json数据的结构提取  </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> eachone <span class="keyword">in</span> comment_list:  </span><br><span class="line">        message = eachone[<span class="string">'content'</span>]  </span><br><span class="line">        <span class="keyword">print</span> (message)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):  </span><br><span class="line">    link1 = <span class="string">"https://api-zero.livere.com/v1/comments/list?callback=jQuery112407875296433383039_1506267778283&amp;limit=10&amp;offset="</span>  </span><br><span class="line">    link2 = <span class="string">"&amp;repSeq=3871836&amp;requestPath=%2Fv1%2Fcomments%2Flist&amp;consumerSeq=1020&amp;livereSeq=28583&amp;smartloginSeq=5154&amp;_=1506267778285"</span>  </span><br><span class="line">    page_str = str(page)  </span><br><span class="line">    link = link1 + page_str + link2  </span><br><span class="line">    <span class="keyword">print</span> (link)  </span><br><span class="line">    single_page_comment(link)  </span><br><span class="line">```  </span><br><span class="line">参考链接：  </span><br><span class="line">https://github.com/Santostang/PythonScraping/blob/master/第一版/Cha <span class="number">4</span> -动态网页抓取/Cha <span class="number">4</span> -动态网页抓取.ipynb  </span><br><span class="line"><span class="comment">### 2.0.6. 通过Selenium模拟浏览器抓取  </span></span><br><span class="line">```py</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">"https://www.dianping.com/search/category/7/10/p1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果运行之后，发现程序报错：</span></span><br><span class="line"><span class="comment">#     selenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH.</span></span><br><span class="line"><span class="comment"># 可以到https://github.com/mozilla/geckodriver/releases下载最新版的geckodriver，解压后可以放在Python安装目录（可能是Script子文件夹）下（可能需并放在环境变量的PATH中）。</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.firefox_binary <span class="keyword">import</span> FirefoxBinary   </span><br><span class="line">caps = webdriver.DesiredCapabilities().FIREFOX</span><br><span class="line">caps[<span class="string">"marionette"</span>] = <span class="keyword">False</span></span><br><span class="line">   </span><br><span class="line">path =  <span class="string">r'D:\\Program Files\\Mozilla Firefox\\firefox.exe'</span></span><br><span class="line">binary = FirefoxBinary(path) <span class="comment"># Firefox程序的地址  </span></span><br><span class="line">driver = webdriver.Firefox(firefox_binary=binary, capabilities=caps)</span><br><span class="line">driver.get(<span class="string">"http://www.santostang.com/2017/03/02/hello-world/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    load_more = driver.find_element_by_css_selector(<span class="string">'div.tie-load-more'</span>)   <span class="comment"># 更多或下一页</span></span><br><span class="line">    load_more.click()            <span class="comment"># 模拟单击</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span>    </span><br><span class="line">comments = driver.find_elements_by_css_selector(<span class="string">'div.bdy- inner'</span>) </span><br><span class="line">time.sleep(<span class="number">5</span>)  </span><br><span class="line"></span><br><span class="line">user = driver.find_element_by_name(<span class="string">"username"</span>)  <span class="comment">#找到用户名输入框</span></span><br><span class="line">user.clear  <span class="comment">#清除用户名输入框内容</span></span><br><span class="line">user.send_keys(<span class="string">"1234567"</span>)  <span class="comment">#在框中输入用户名</span></span><br><span class="line">pwd = driver.find_element_by_name(<span class="string">"password"</span>)  <span class="comment">#找到密码输入框</span></span><br><span class="line">pwd.clear  <span class="comment">#清除密码输入框内容</span></span><br><span class="line">pwd.send_keys(<span class="string">"＊＊＊＊＊＊"</span>)    <span class="comment">#在框中输入密码</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"loginBtn"</span>).click()  <span class="comment">#单击登录</span></span><br></pre></td></tr></table></figure></p><h3 id="2-0-7-深圳短租"><a href="#2-0-7-深圳短租" class="headerlink" title="2.0.7. 深圳短租"></a>2.0.7. 深圳短租</h3><p>目的：获取Airbnb深圳前20页的短租房源的名称、价格、评价数量、房屋类型、床数量和房客数量。监控和了解竞争对手的房屋名称和价格，让自己的房子有竞争力。<br>网址：<a href="https://zh.airbnb.com/s/Shenzhen--China?page=1" target="_blank" rel="noopener">https://zh.airbnb.com/s/Shenzhen--China?page=1</a></p><p>4.4.1 网站分析</p><p>一个房子的所有数据。地址为：div.infoContainer_v72lrv。<br>价格数据，地址为：div.priceContainer_4ml1ll<br>评价数据，地址为：span.text_5mbkop-o_O-size_micro_16wifzf-o_O-inline_g86r3e<br>房屋名称数据，地址为：div.listingNameContainer_kq7ac0-o_O-ellipsized_1iurgbx<br>房间类型、床数量和房客数量，地址为：span.detailWithoutWrap_j1kt73</p><p>4.4.2 项目实践<br>用Selenium获取Airbnb第一页的数据。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.firefox_binary <span class="keyword">import</span> FirefoxBinary</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">caps = webdriver.DesiredCapabilities().FIREFOX</span><br><span class="line">caps[<span class="string">"marionette"</span>] = <span class="keyword">True</span></span><br><span class="line">binary = FirefoxBinary(<span class="string">r'C:\Program Files\Firefox Developer Edition\firefox.exe'</span>)</span><br><span class="line"><span class="comment"># 把上述地址改成你电脑中Firefox程序的地址 </span></span><br><span class="line"><span class="comment"># 如果没改，会出现selenium.common.exceptions.SessionNotCreatedException: Message: Unable to find a matching set of capabilities</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用 selenium 的 driver 来启动 firefox</span></span><br><span class="line">driver = webdriver.Firefox(firefox_binary=binary, capabilities=caps)</span><br><span class="line"><span class="comment">#在虚拟浏览器中打开 Airbnb 页面。使用Selenium打开该页面</span></span><br><span class="line">driver.get(<span class="string">"https://zh.airbnb.com/s/Shenzhen--China?page=1"</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line"><span class="comment">#找到页面中所有的出租房。用Selenium的css selector获取所有房屋的div数据</span></span><br><span class="line">rent_list = driver.find_elements_by_css_selector(<span class="string">'div._1788tsr0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对于每一个出租房</span></span><br><span class="line"><span class="keyword">for</span> eachhouse <span class="keyword">in</span> rent_list:</span><br><span class="line">    <span class="comment">#找到评论数量</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        comment = eachhouse.find_element_by_css_selector(<span class="string">'span._gb7fydm'</span>)</span><br><span class="line">        comment = comment.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        comment = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#找到价格</span></span><br><span class="line">    price = eachhouse.find_element_by_css_selector(<span class="string">'span._hylizj6'</span>)</span><br><span class="line">    price = price.text[<span class="number">4</span>:]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#找到名称</span></span><br><span class="line">    name = eachhouse.find_element_by_css_selector(<span class="string">'div._ew0cqip'</span>)</span><br><span class="line">    name = name.text</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#找到房屋类型，大小</span></span><br><span class="line">    details = eachhouse.find_elements_by_css_selector(<span class="string">'div._saba1yg small div span'</span>)</span><br><span class="line">    details = details[<span class="number">0</span>].text</span><br><span class="line">    house_type = details.split(<span class="string">" · "</span>)[<span class="number">0</span>]</span><br><span class="line">    bed_number = details.split(<span class="string">" · "</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">print</span> (comment, price, name, house_type, bed_number)</span><br></pre></td></tr></table></figure><p>进阶：将Selenium的控制CSS加载、控制图片加载和控制JavaScript加载加入本实践项目的代码中，从而提升爬虫的速度。</p><p><a href="https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%80%E7%89%88/Cha%204%20-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96/Cha%204%20_%E7%AB%A0%E6%9C%AB%E5%AE%9E%E6%88%98.ipynb" target="_blank" rel="noopener">https://github.com/Santostang/PythonScraping/blob/master/%E7%AC%AC%E4%B8%80%E7%89%88/Cha%204%20-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96/Cha%204%20_%E7%AB%A0%E6%9C%AB%E5%AE%9E%E6%88%98.ipynb</a></p><h1 id="3-工具及资源列表"><a href="#3-工具及资源列表" class="headerlink" title="3. 工具及资源列表"></a>3. 工具及资源列表</h1><h2 id="3-1-网络下载"><a href="#3-1-网络下载" class="headerlink" title="3.1. 网络下载"></a>3.1. 网络下载</h2><p>Anaconda： <a href="https://www.continuum.io/downloads" target="_blank" rel="noopener">https://www.continuum.io/downloads</a> 。<br>Robomongo：MongoDB数据库的可视化管理工具。<br>Redis Desktop Manager：Redis的可视化管理工具。  </p><ul><li>下载 <a href="https://redisdesktop.com/download" target="_blank" rel="noopener">https://redisdesktop.com/download</a>  </li><li>界面 <a href="https://res.weread.qq.com/wrepub/epub_928559_154" target="_blank" rel="noopener">https://res.weread.qq.com/wrepub/epub_928559_154</a>  </li></ul><p>Alt + Enter jupyter快捷键  </p><h2 id="3-2-书籍辅助"><a href="#3-2-书籍辅助" class="headerlink" title="3.2. 书籍辅助"></a>3.2. 书籍辅助</h2><ul><li>Python网络爬虫从入门到实践，唐松  </li></ul><ul><li>Github：<a href="https://github.com/Santostang/PythonScraping" target="_blank" rel="noopener">https://github.com/Santostang/PythonScraping</a><br>百度网：<a href="http://pan.baidu.com/s/1c2w9rck" target="_blank" rel="noopener">http://pan.baidu.com/s/1c2w9rck</a><br>书本对应的Python网络爬虫的教学:<a href="http://www.santostang.com" target="_blank" rel="noopener">www.santostang.com</a><br>网站不会更改设计和框架，本书的网络爬虫代码可以一直使用<br>作者自己的博客网站，可以避免一些法律上的风险  <h2 id="3-3-端口"><a href="#3-3-端口" class="headerlink" title="3.3. 端口"></a>3.3. 端口</h2>jupyter：8888  <h1 id="4-库"><a href="#4-库" class="headerlink" title="4. 库"></a>4. 库</h1><h2 id="4-1-Python第三方库"><a href="#4-1-Python第三方库" class="headerlink" title="4.1. Python第三方库"></a>4.1. Python第三方库</h2>基本格式：（安装时，把name替换为要安装的第三方库）  </li><li><code>pip install name</code>  </li><li><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple name</code>  </li></ul><ul><li>科学计算的包，如Numpy、Scipy、Pandas和Matplotlib。  </li><li>机器学习、生物医学和天体物理学计算，如Scikit-Learn、BioPython。  </li><li>获取网页：requests、urllib、selenium  </li><li>解析数据：lxml、bs4的BeautifulSoup、re(标准库)  </li><li>存储数据：MySQL、MongoDB  <h1 id="5-附录"><a href="#5-附录" class="headerlink" title="5. 附录"></a>5. 附录</h1><h1 id="6-单项分析"><a href="#6-单项分析" class="headerlink" title="6. 单项分析"></a>6. 单项分析</h1><h2 id="6-1-是什么"><a href="#6-1-是什么" class="headerlink" title="6.1. 是什么"></a>6.1. 是什么</h2>Anaconda：Python开发集成环境。南美洲的巨蟒。自带Python、pip和Jupyter。<br>第三方库：可理解为供用户调用的代码组合。在安装某个库之后，可以直接调用其中的功能，使得我们不用一个代码一个代码地实现某个功能。<br>DT（Data Technology，数据技术）  </li></ul><p>命令提示符。输入一些命令后，可执行对系统的管理。 Windows的cmd，开始按钮→cmd。Mac的terminal。应用程序→terminal。<br>爬虫：<br>pip：Python安装各种第三方库（package）的工具。<br>Python：蟒蛇<br>数据交换：网站与用户的沟通本质。  </p><p>print<br>代码缩进：代码要按照结构以Tab键或者4个空格进行缩进严格缩进<br>注释：#  </p><p>Python不需要在使用之前声明需要使用的变量和类别。<br>字符串（string）：单引号（’）或双引号（”）<br>连接字符串: +  </p><p>数字（Number）：数字用来存储数值<br>整数（int）<br>浮点数（float）：由整数和小数部分组成。  </p><p>列表（list）:能够包含任意种类的数据类型和任意数量。<br>创建列表非常容易，只要把不同的变量放入方括号中，并用逗号分隔即可，例如list0 = [“a”,2,”c”,4]<br>增删查改、索引、切片<br>字典（Dictionaries）：一种可变容器模型。<br>键（key）和值（value）。key必须唯一，但是值不用。值也可以取任何数据类型。<br>遍历<br>条件语句：满足条件的时候才执行某部分代码。条件为布尔值，也就是只有True和False两个值。<br>    当if判断条件成立时才执行后面的语句；当条件不成立的时候，执行else后面的语句<br>    如果需要判断的有多种条件，就需要用到elif<br>无序：字典<br>有序：列表、元组<br>对象有两种，即可更改（mutable）与不可更改（immutable）对象。在Python中，strings、tuples和numbers是不可更改对象，而list、dict等是可更改对象。  </p><p>循环语句：多次执行一个代码片段。<br>循环分为for循环和while循环。<br>for循环：在一个给定的顺序下重复执行。<br>while循环：不断重复执行，只要能满足一定条件。  </p><p>函数<br>代码庞大复杂时，使得代码易读，可重复使用，并且容易调整顺序。<br>函数的参数与返回值  </p><p>面向过程编程：根据业务逻辑从上到下写代码，最容易被初学者接受。<br>函数式编程：把某些功能封装到函数中，需要用时可以直接调用，不用重复撰写。函数式的编程方法节省了大量时间。只需要写清楚输入和输出变量并执行函数即可。<br>面向对象编程：把函数进行分类和封装后放入对象中，使得开发更快、更强。首先要创建封装对象，然后还要通过对象调用被封装的内容。在某些应用场景下，面向对象编程能够显示出更大的优势。<br>如果各个函数之间独立且无共用的数据，就选用函数式编程；如果各个函数之间有一定的关联性，选用面向对象编程比较好。<br>特性与行为，属性和方法<br>面向对象的两大特性：封装和继承。<br>封装：把内容封装好，再调用封装好的内容。使用构造方法将内容封装到对象中，然后通过对象直接或self间接获取被封装的内容。<br>继承：以普通的类为基础建立专门的类对象。子继承了父的某些特性。将多个类共有的方法提取到父类中，子类继承父类中的方法即可，不必一一实现每个方法。  </p><p>【状态码】<br>200，请求成功<br>4xx，客户端错误<br>5xx，服务器错误<br>【请求头】<br>Headers：提供了关于请求、响应或其他发送实体的信息。<br>如果没有指定请求头或请求的请求头和实际网页不一致，就可能无法返回正确的结果。  </p><p>Chrome浏览器的检查。单击需要请求的网页，在Headers中可以看到Requests Headers的详细信息。  </p><p>请求头的信息为：<br>GET / HTTP/1.1<br>Host: <a href="http://www.santostang.com" target="_blank" rel="noopener">www.santostang.com</a><br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36<br>Accept:<br>text/html, application/xhtml+xml, application/xml; q=0.9, image/webp, <em>/</em>; q=0.8 Accept-Encoding: gzip, deflate, sdch<br>Accept-Language: en-US, en; q=0.8, zh-CN; q=0.6, zh; q=0.4, zh-TW; q=0.2  </p><p>GET请求，密码会显示在URL中，非常不安全。<br>POST请求，<br>【动态网页】<br>AJAX（Asynchronous Javascript And XML，异步JavaScript和XML），一种异步更新技术。<br>单击“更多”，url地址没有任何改变，有新内容加载出来。<br>数据不会出现在网页源代码中。但是有JavaScript代码。<br>最后呈现出来的数据是通过JavaScript加载的。  </p><p>通过在后台与服务器进行少量数据交换就可以使网页实现异步更新。<br>在不重新加载整个网页的情况下对网页的某部分进行更新。<br>减少了网页重复内容的下载<br>节省了流量<br>更小、更快、更友好  </p><p>传统的网页必须重载整个网页页面  </p><p>动态网页的例子<br><a href="http://www.santostang.com/2018/07/04/hello-world/" target="_blank" rel="noopener">http://www.santostang.com/2018/07/04/hello-world/</a>  </p><p>页面下面的评论用JavaScript加载。评论数据没法在在网页源代码找到。  </p><h3 id="6-1-1-Selenium"><a href="#6-1-1-Selenium" class="headerlink" title="6.1.1. Selenium"></a>6.1.1. Selenium</h3><p>Selenium官方文档：<a href="http://selenium-python.readthedocs.io/index.html。" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/index.html。</a>  </p><p>Selenium要在整个网页加载出来后才开始爬取内容，速度往往较慢。  </p><p>Selenium可以实现的功能：<br>操作元素对浏览器中的网页进行各种操作，包括登录。<br>模拟鼠标单击、双击、拖拽<br>获得网页中各个元素的大小<br>模拟键盘<br>浏览器渲染引擎。直接用浏览器在显示网页时解析HTML、应用CSS样式并执行JavaScript的语句。Selenium使用浏览器渲染，数据已经渲染到了HTML代码中。用chrome定位标签即可。<br>用脚本控制浏览器操作。Python的Selenium库模拟浏览器完成抓取。<br>Selenium：用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，浏览器自动按照脚本代码做出单击、输入、打开、验证等操作，就像真正的用户在操作一样。</p><p>用Selenium控制浏览器加载的内容，可加快Selenium的爬取速度。此类常用的方法有：<br>（1）控制CSS的加载。<br>（2）控制图片文件的显示。<br>（3）控制JavaScript的运行。<br>（1）控制CSS。因为抓取过程中仅仅抓取页面的内容，CSS样式文件是用来控制页面的外观和元素放置位置的，对内容并没有影响，所以我们可以限制网页加载CSS，从而减少抓取时间。  </p><p>支持多个浏览器的调用：IE（7、8、9、10、11）、Firefox、Safari、Google Chrome、Opera等。最常用的是Firefox。</p><h3 id="6-1-2-正则表达式"><a href="#6-1-2-正则表达式" class="headerlink" title="6.1.2. 正则表达式"></a>6.1.2. 正则表达式</h3><p>元字符：<a href="https://res.weread.qq.com/wrepub/epub_928559_43" target="_blank" rel="noopener">https://res.weread.qq.com/wrepub/epub_928559_43</a> 问加合星<br><a href="https://regex101.com/" target="_blank" rel="noopener">https://regex101.com/</a><br>正则表达式：字符串操作的逻辑公式。用事先定义好的特定字符组合成规则字符串，用该规则字符串来过滤字符串。<br>正则表达式可以迅速地用极简单的方式达到字符串的复杂控制。</p><h2 id="6-2-为什么"><a href="#6-2-为什么" class="headerlink" title="6.2. 为什么"></a>6.2. 为什么</h2><p>为什么、好处、重要性、作用、意义、优势、不足、历史、现状、趋势、大背景。  </p><h3 id="6-2-1-大数据及爬虫"><a href="#6-2-1-大数据及爬虫" class="headerlink" title="6.2.1. 大数据及爬虫"></a>6.2.1. 大数据及爬虫</h3><p>技术创新驱动变革的潮流。<br>数据量爆发式增长的互联网时代。<br>大数据分析的火热。<br>大数据成为业界与学术界最火热的话题之一。<br>数据已经成为每个公司极为重要的资产。<br>互联网大量的公开数据为个人和公司提供了以往想象不到的可以获取的数据量。<br>网络爬虫技术是大数据分析的第一环。有助于获取有用的公开数据集。<br>理解了信息的获取、存储和整理，才有可能系统地收集和应用不同源头和千变万化的网站信息。<br>DT的核心是从信息的源头去理解和分析，以做出能打动对方的行动决策方案。<br>由谷歌搜索到现在的大数据时代，爬虫技术的重要性和广泛性一直很突出。<br>爬取目标网站的资料、分析和建立应用。 获取数据自动、实时、及时、省时。<br>电商市场的重要性日益凸显。了解对手的产品特点、价格以及销量情况，及时跟进产品开发进度和营销策略，从而知己知彼，赢得竞争。过去，两个痛点——无法自动化和无法实时获取。产品研发部门会手动访问一个个电商产品页面，人工复制并粘贴到Excel表格中，制作竞品分析报告。但是这种重复性的手动工作不仅浪费宝贵的时间，一不留神复制少了一个数字还会导致数据错误；对手产品的销量则是由某一家咨询公司提供报告，每周一次，但是报告缺乏实时性，难以针对快速多变的市场及时调整价格和营销策略。<br>学会一项新的技术<br>第一方企业（也就是拥有这些数据的企业）做出更好的决策<br>第三方企业也可从中受益<br>数据共享<br>Python：热门的开源软件（这意味着有人源源不断地开发更新且更强大的包给你用）<br>Python：简单、简洁、易学、有效、可扩展性的计算机语言。 最受欢迎的程序语言之一。 强大而丰富的库。<br>C语言：底层，学习成本大。  </p><h3 id="6-2-2-Jupyter"><a href="#6-2-2-Jupyter" class="headerlink" title="6.2.2. Jupyter"></a>6.2.2. Jupyter</h3><p>为什么推荐大家使用Jupyter学习和编写Python脚本呢？<br>Jupyter：交互式编程和展示功能。<br>分段执行，编写和测试时边看边写，加快调试速度。<br>能够把运行和输出的结果保存下来，下次打开这个Notebook时也可以看到之前运行的结果。<br>还可以添加各种元素，比如图片、视频、链接等，同时还支持Markdown，可以充当PPT使用。  </p><h2 id="6-3-如何"><a href="#6-3-如何" class="headerlink" title="6.3. 如何"></a>6.3. 如何</h2><p>不断解决遇到的疑惑。<br>科技如何给大家带来实效<br>数据的存储对公司有什么影响<br>如何存储数据⇒高效利用 方便对接其他部门和业务<br>如何使用淘宝网上所有绿色产品（如空气净化器）的销量数据来做潜在市场评估<br>如何一直高效率、持续不断地从日新月异的网站中获取信息  </p><h3 id="6-3-1-快捷"><a href="#6-3-1-快捷" class="headerlink" title="6.3.1. 快捷"></a>6.3.1. 快捷</h3><p>对初学者来说，使用BeautifulSoup从网页中提取需要的数据更加简单易用。  </p><p>谷歌的有效信息检索速度比百度快<br>Stack Overflow上的回答可以比较快地解决问题<br>最新最好的回答很有可能是英文的  </p><h3 id="6-3-2-获取动态网页的真实地址"><a href="#6-3-2-获取动态网页的真实地址" class="headerlink" title="6.3.2. 获取动态网页的真实地址"></a>6.3.2. 获取动态网页的真实地址</h3><p>Chrome浏览器的检查（审查元素）功能：浏览器右键⇒检查⇒Network⇒XHR或JS选项<br>Network：显示浏览器从网页服务器中得到的所有文件。一般这些数据以json文件格式获取。<br>在Network选项卡下，找到真正的评论文件。<br>单击Preview标签即可查看数据。可以按 ctrl+F 进行查找。顶部search也可以。<br>Elements会出现相应的code所在的地方。  </p><h2 id="6-4-应用场景"><a href="#6-4-应用场景" class="headerlink" title="6.4. 应用场景"></a>6.4. 应用场景</h2><h3 id="6-4-1-爬虫"><a href="#6-4-1-爬虫" class="headerlink" title="6.4.1. 爬虫"></a>6.4.1. 爬虫</h3><p>一些附加值更高的“事”，如人工智能、统计建模等。<br>机器学习和统计算法分析<br>在营销领域可以帮助企业做好4P（Product：产品创新，Place：智能选址，Price：动态价格，Promotion：数据驱动的营销活动）<br>在金融领域，数据驱动的征信等应用会带来越来越大的价值。<br>公开数据的应用价值<br>所有网络数据<br>社交媒体的每一条发帖。社交媒体在用户生态圈的自我交互下产生大量文本、图片和视频数据。<br>团购网站的价格及点评。电商商产品的描述、价格<br>招聘网站的招聘信息<br>搜索引擎从数据库中提取搜索结果  </p><h2 id="6-5-注意事项"><a href="#6-5-注意事项" class="headerlink" title="6.5. 注意事项"></a>6.5. 注意事项</h2><p>爬虫有哪些潜在的法律纠纷、公司的爬虫合不合法 。<br>建立共利的互联网环境，不能把爬虫作为窃取数据的工具。<br>爬虫必须在合情、合法、合理的情况下获取和应用。<br>尊重数据供应者的知识产权和正常运作才能产生长久共利的环境。<br>保障对方平台的正常运作是每个程序员都应当做到的<br>法律：<br>互联网世界已经通过自身的协议建立起一定的道德规范（Robots协议）。该协议是国际互联网界通行的道德规范，虽然没有写入法律，但是每一个爬虫都应该遵守这项协议。<br>法律部分还在建立和完善中。<br>如果抓取的数据属于个人使用或科研范畴，基本不存在问题。当你爬取网站数据时，无论是否仅供个人使用，都应该遵守Robots协议。<br>而如果数据属于商业盈利范畴，就要就事而论，有可能属于违法行为，也有可能不违法。<br>大部分网站不欢迎使用程序进行登录，因为需要登录才能查看的数据不属于公开数据。最好不要使用此程序获取非公开数据或批量注册，若出现了问题，可能需负法律责任。  </p><p>建议使用API。  </p><p>Robots协议<br>Robots协议（爬虫协议）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。  </p><p><a href="https://www.taobao.com/robots.txt。" target="_blank" rel="noopener">https://www.taobao.com/robots.txt。</a><br>Allow开头的URL是允许robot访问的。例如，Allow:/article允许百度爬虫引擎访问/article.htm、/article/12345.com等。<br>Disallow不允许百度爬虫引擎访问的。例如，Disallow:/product/不允许百度爬虫引擎访问/product/12345.com等。<br>Disallow:/禁止百度爬虫访问除了Allow规定页面外的其他所有页面。  </p><p>taobao的robots.txt对不同的搜索引擎所允许爬行范围不同。/product项对应淘宝内部的产品信息。当在搜索框中搜索“淘宝iphone7”的时候，Google可搜到淘宝中的产品，而百度不能。  </p><p>过于快速或者频密的网络爬虫都会对服务器产生巨大的压力。→调集资源限制爬虫，保护用户的流量和减少有价值数据的流失。  </p><p>反爬方维权：网站封锁你IP，法律行动。  </p><p>将请求的速度限定在一个合理的范围之内。  </p><p>每年的三月份会迎来一个爬虫高峰期。因为有大量的大学生五月份交论文，在写论文的时候会选择爬取数据，也就是3月份爬取数据，4月份分析数据，5月份交论文。  </p><p>2007年，爱帮网利用垂直搜索技术获取了大众点评网上的商户简介和消费者点评，并且直接大量使用，大众点评网多次要求爱帮网停止使用这些内容，而爱帮网以自己是使用垂直搜索获得的数据为由，拒绝停止抓取大众点评网上的内容，并且质疑大众点评网对这些内容所享有的著作权。为此，双方开打了两场官司。2011年1月，北京海淀法院做出判决：爱帮网侵犯大众点评网著作权成立，应当停止侵权并赔偿大众点评网经济损失和诉讼必要支出。<br>2013年10月，百度诉360违反Robots协议。百度方面认为，360违反了Robots协议，擅自抓取、复制百度网站内容并生成快照向用户提供。2014年8月7日，北京市第一中级人民法院做出一审判决，法院认为被告奇虎360的行为违反了《反不正当竞争法》相关规定，应赔偿原告百度公司70万元。<br>虽然说大众点评上的点评数据、百度知道的问答由用户创建而非企业，但是搭建平台需要投入运营、技术和人力成本，所以平台拥有对数据的所有权、使用权和分发权。【网站的知识产权】<br>以上两起败诉告诉我们，在爬取网站的时候需要限制自己的爬虫，遵守Robots协议和约束网络爬虫程序的速度。如果违反了这些规定，很可能会吃官司，并且败诉的概率相当高。  </p><h1 id="7-多项关系"><a href="#7-多项关系" class="headerlink" title="7. 多项关系"></a>7. 多项关系</h1><h2 id="7-1-流程图"><a href="#7-1-流程图" class="headerlink" title="7.1. 流程图"></a>7.1. 流程图</h2><p>具体步骤及各步骤之间的关系。  </p><h3 id="7-1-1-网络爬虫、数据采集"><a href="#7-1-1-网络爬虫、数据采集" class="headerlink" title="7.1.1. 网络爬虫、数据采集"></a>7.1.1. 网络爬虫、数据采集</h3><p>获【取】网页、解【析】网页（提取数据）、【存】储数据、整【理】。  </p><ul><li>获取网页：给一个网址发送请求，该网址会返回整个网页的数据。类似于在浏览器中键入网址并按回车键，然后可以看到网站的整个页面。  </li><li>解析网页：从整个网页的数据中提取想要的数据。类似于在浏览器中看到网站的整个页面，但是你想找的是产品的价格，价格就是你想要的数据。  </li><li>存储数据：把数据存储下来。  </li></ul><p>三个流程的技术实现:  </p><ul><li>获取网页<br>获取网页的基础技术：request、urllib和selenium（模拟浏览器）。<br>获取网页的进阶技术：多进程多线程抓取、登录抓取、突破IP封禁和服务器抓取。  </li><li>解析网页<br>解析网页的基础技术：re正则表达式、BeautifulSoup和lxml。<br>解析网页的进阶技术：解决中文乱码。  </li><li>存储数据<br>存储数据的基础技术：存入txt文件和存入csv文件。<br>存储数据的进阶技术：存入MySQL数据库和存入MongoDB数据库。  </li></ul><h2 id="7-2-分类树"><a href="#7-2-分类树" class="headerlink" title="7.2. 分类树"></a>7.2. 分类树</h2><h2 id="7-3-对比分析"><a href="#7-3-对比分析" class="headerlink" title="7.3. 对比分析"></a>7.3. 对比分析</h2><p>主要的解析器及其优缺点<br><a href="https://res.weread.qq.com/wrepub/epub_928559_44" target="_blank" rel="noopener">https://res.weread.qq.com/wrepub/epub_928559_44</a><br><a href="https://res.weread.qq.com/wrepub/epub_928559_49" target="_blank" rel="noopener">https://res.weread.qq.com/wrepub/epub_928559_49</a><br>使用lxml的解析器将会解析得更快。</p><h2 id="7-4-关系图"><a href="#7-4-关系图" class="headerlink" title="7.4. 关系图"></a>7.4. 关系图</h2><p>互联网的运作和结构<br>爬虫程序是收集信息的基础。  </p><p>==============================  </p><h1 id="8-元学习（与物）"><a href="#8-元学习（与物）" class="headerlink" title="8. 元学习（与物）"></a>8. 元学习（与物）</h1><p>起始、终止、空格和换行，循环次数<br>是啥 为啥 逻辑清晰、循序渐进 查阅此书<br>动其心者，当具有大本大源<br>不断学习新技术，自我提高，实现目标和理想。不断更新和进步：互联网科技、网站信息也随之不断改变。<br>不能应用的技术称为魔术，只能用于表演。<br>学习的道路没有什么捷径可走，唯一的方法就是不断尝试、不断失败、不断改进。<br>通过实战解决实际问题。问题及解决方案实践<br>增强学习效果<br>富有逻辑的框架解构学习。将网络爬虫技术进行框架性的解构<br>认真阅读、手输代码，反复练习，熟能生巧。提升你的编程能力和编程效率<br>从实践中检验自己学习了多少知识<br>进一步巩固<br>进阶问题<br>答案并不是唯一解，对比思路  </p><h1 id="9-个人提升（与人）"><a href="#9-个人提升（与人）" class="headerlink" title="9. 个人提升（与人）"></a>9. 个人提升（与人）</h1><p>了解技术团队的运作模式<br>向香港中文大学市场营销学的研究生讲解Python网络爬虫技术，让这些商科学生掌握一些大数据时代重要的技术能力。<br>KYM框架<br>Know Your Company（了解你的公司）<br>Know Your Competitor（了解你的竞争对手）<br>Know Your Customer（了解你的客户）  </p><h1 id="10-代码清单"><a href="#10-代码清单" class="headerlink" title="10. 代码清单"></a>10. 代码清单</h1><h2 id="10-1-基础语法"><a href="#10-1-基础语法" class="headerlink" title="10.1. 基础语法"></a>10.1. 基础语法</h2><h3 id="10-1-1-py"><a href="#10-1-1-py" class="headerlink" title="10.1.1. py"></a>10.1.1. py</h3><p>int(number)<br>float(number)<br>for key,value in dict.items()<br>Python 100例 <a href="https://www.w3cschool.cn/python/python-100-examples.html" target="_blank" rel="noopener">https://www.w3cschool.cn/python/python-100-examples.html</a>  </p><h4 id="10-1-1-1-类"><a href="#10-1-1-1-类" class="headerlink" title="10.1.1.1. 类"></a>10.1.1.1. 类</h4><pre><code class="py"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>   <span class="comment"># 创建类          </span>    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(self,name,age)</span>:</span>          <span class="comment"># _init_()方法称为类的构造方法。会自动执行。初始化以及规定传递的参数。self后面的参数列表。实例则传给self  </span>        <span class="comment"># self 仅在类的定义中使用。表示对整个传递来的对象进行操作。  </span>        <span class="comment"># 运行时类中self.会自动转为传进来obInstance.进行运算，即self = obInstance【自我理解】  </span>        self.name = name                      self.age = age              <span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(self)</span>:</span> <span class="comment">#通过self调用被封装的内容              </span>        <span class="keyword">print</span> (self.name)                      <span class="keyword">print</span> (self.age)      obj1 = Person(<span class="string">'santos'</span>,<span class="number">18</span>)      obj1.detail()  <span class="comment"># Python将obj1传给self参数，'santos'和18传给类的构造方法_init_中的name和age  </span><span class="comment"># 猫可以：喵喵叫、吃、喝、拉、撒  </span><span class="comment"># 狗可以：汪汪叫、吃、喝、拉、撒  </span><span class="comment"># 如果用继承的思想，就可以写成：  </span><span class="comment"># 动物：吃喝拉撒  </span><span class="comment"># 猫：喵喵叫（猫继承动物的功能）  </span><span class="comment"># 狗：汪汪叫（狗继承动物的功能）  </span><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span>      <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span>          <span class="keyword">print</span> (<span class="string">"%s吃 "</span> %self.name)      <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span>          <span class="keyword">print</span> (<span class="string">"%s喝 "</span> %self.name)      <span class="function"><span class="keyword">def</span> <span class="title">shit</span><span class="params">(self)</span>:</span>          <span class="keyword">print</span> (<span class="string">"%s拉 "</span> %self.name)      <span class="function"><span class="keyword">def</span> <span class="title">pee</span><span class="params">(self)</span>:</span>          <span class="keyword">print</span> (<span class="string">"%s撒 "</span> %self.name)  <span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span>      <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span>          self.name = name      <span class="function"><span class="keyword">def</span> <span class="title">cry</span><span class="params">(self)</span>:</span>          <span class="keyword">print</span> (<span class="string">'喵喵叫'</span>)  <span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span>      <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span>          self.name = name      <span class="function"><span class="keyword">def</span> <span class="title">cry</span><span class="params">(self)</span>:</span>          <span class="keyword">print</span> (<span class="string">'汪汪叫'</span>)  c1 = Cat(<span class="string">'小白家的小黑猫'</span>)  c1.eat()  c1.cry()  d1 = Dog(<span class="string">'胖子家的小瘦狗'</span>)  d1.eat()  <span class="comment"># 小白家的小黑猫吃  </span><span class="comment"># 喵喵叫  </span><span class="comment"># 胖子家的小瘦狗吃  </span></code></pre><h3 id="10-1-2-函数、类，可变与不可变"><a href="#10-1-2-函数、类，可变与不可变" class="headerlink" title="10.1.2. 函数、类，可变与不可变"></a>10.1.2. 函数、类，可变与不可变</h3><pre><code class="py">a = <span class="number">1</span>  <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span>      a = <span class="number">2</span>  fun(a)  <span class="keyword">print</span> (a)  &gt;&gt;&gt;<span class="number">1</span>  a为数字int，函数改变不了函数以外a的值。当一个引用传递给函数时，函数自动复制一份引用。函数里和函数外的引用是不一样的。  a = []  <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span>      a.append(<span class="number">1</span>)  fun(a)  <span class="keyword">print</span> (a)  &gt;&gt;&gt;[<span class="number">1</span>]  a为列表，函数将函数以外的a值改变了。函数内的引用指向的是可变对象列表a，函数内的列表a和函数外的列表a是同一个。  <span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>      name=<span class="string">"aaa"</span>  p1=Person()  p2=Person()  p1.name=<span class="string">"bbb"</span>  <span class="keyword">print</span> (p1.name)  <span class="keyword">print</span> (p2.name)  <span class="keyword">print</span> (Person.name)  &gt;&gt;&gt;bbb  &gt;&gt;&gt;aaa  &gt;&gt;&gt;aaa  p1.name=<span class="string">"bbb"</span>表示实例调用了类变量，其实就是函数传参的问题。p1.name一开始指向类变量name=<span class="string">"aaa"</span>，但是在实例的作用域里把类变量的引用改变了，就变成了一个实例变量，self.name不再引用Person的类变量name了。  <span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>      name=[]  p1=Person()  p2=Person()  p1.name.append(<span class="number">1</span>)  <span class="keyword">print</span> (p1.name)  <span class="keyword">print</span> (p2.name)  <span class="keyword">print</span> (Person.name)  &gt;&gt;&gt;[<span class="number">1</span>]  &gt;&gt;&gt;[<span class="number">1</span>]  &gt;&gt;&gt;[<span class="number">1</span>]  !类中的可变量的慎重使用！！！！！！！！！！！！！！！ist、dict等是可更改对象，因此修改一个指向的对象时会把类变量也改变了。  </code></pre><h2 id="10-2-基础算法"><a href="#10-2-基础算法" class="headerlink" title="10.2. 基础算法"></a>10.2. 基础算法</h2><h3 id="10-2-1-循环打印输出从1到100的所有奇数"><a href="#10-2-1-循环打印输出从1到100的所有奇数" class="headerlink" title="10.2.1. 循环打印输出从1到100的所有奇数"></a>10.2.1. 循环打印输出从1到100的所有奇数</h3><pre><code class="py"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):      <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:          <span class="keyword">print</span> (i)  </code></pre><h3 id="10-2-2-字符串批量替换"><a href="#10-2-2-字符串批量替换" class="headerlink" title="10.2.2. 字符串批量替换"></a>10.2.2. 字符串批量替换</h3><p>请将字符串“你好$$$我正在学Python@#@#现在需要&amp;<em>&amp;</em>&amp;修改字符串”中的符号变成一个空格，需要输出的格式为：“你好 我正在学Python现在需要 修改字符串”。  </p><pre><code class="py"><span class="comment"># 方法1  </span>str1 = <span class="string">'你好$$$我正在学Python@#@#现在需要&amp;%&amp;%&amp;修改字符串'</span>  str2 = str1.replace(<span class="string">'$$$'</span>, <span class="string">' '</span>).replace(<span class="string">'@#@#'</span>, <span class="string">' '</span>).replace(<span class="string">'&amp;%&amp;%&amp;'</span>, <span class="string">' '</span>)  <span class="keyword">print</span> (str2)  <span class="comment"># 方法2  </span><span class="keyword">import</span> re  str1 = <span class="string">'你好$$$我正在学Python@#@#现在需要&amp;%&amp;%&amp;修改字符串'</span>  str2 = re.sub(<span class="string">'[$@#&amp;%]+'</span>, <span class="string">' '</span> ,str1)  <span class="keyword">print</span> (str2)  </code></pre><h3 id="10-2-3-输出9×9乘法口诀表"><a href="#10-2-3-输出9×9乘法口诀表" class="headerlink" title="10.2.3. 输出9×9乘法口诀表"></a>10.2.3. 输出9×9乘法口诀表</h3><pre><code class="py"><span class="comment"># 此法会有多余的换行和末尾对于的空格  </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):      <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):          print(<span class="string">'{}×{}={}'</span>.format(j,i,j*i),end=<span class="string">' '</span>)      print(<span class="string">'\n'</span>)  <span class="comment"># 更好的方法，没有对齐  </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):      <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):          print(<span class="string">'{}×{}={} '</span>.format(j,i,j*i),end=<span class="string">''</span>)      print(<span class="string">''</span>)  <span class="comment"># 最好的方法 这里是对齐的。由此可见，'\t'是用来【显示】对齐的，但似乎len就是1  </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):      <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):          print(<span class="string">'{}×{}={}\t'</span>.format(j,i,j*i),end=<span class="string">''</span>)      print(<span class="string">''</span>)  <span class="comment"># 最好的方法 这里是对齐的  </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):      <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i+<span class="number">1</span>):          <span class="keyword">print</span> (<span class="string">"%dx%d=%d\t"</span> % (j, i, i*j), end=<span class="string">""</span>)      print(<span class="string">""</span>)  <span class="comment"># 1×1=1  </span><span class="comment"># 1×2=2 2×2=4  </span><span class="comment"># 1×3=3 2×3=6 3×3=9  </span><span class="comment"># 1×4=4 2×4=8 3×4=12 4×4=16  </span><span class="comment"># 1×5=5 2×5=10 3×5=15 4×5=20 5×5=25   </span><span class="comment"># 1×6=6 2×6=12 3×6=18 4×6=24 5×6=30 6×6=36  </span><span class="comment"># 1×7=7 2×7=14 3×7=21 4×7=28 5×7=35 6×7=42 7×7=49  </span><span class="comment"># 1×8=8 2×8=16 3×8=24 4×8=32 5×8=40 6×8=48 7×8=56 8×8=64  </span><span class="comment"># 1×9=9 2×9=18 3×9=27 4×9=36 5×9=45 6×9=54 7×9=63 8×9=72 9×9=81  </span><span class="comment"># 1×1=1  </span><span class="comment"># 1×2=2 2×2=4  </span><span class="comment"># 1×3=3 2×3=6 3×3=9  </span><span class="comment"># 1×4=4 2×4=8 3×4=12 4×4=16  </span><span class="comment"># 1×5=5 2×5=10 3×5=15 4×5=20 5×5=25  </span><span class="comment"># 1×6=6 2×6=12 3×6=18 4×6=24 5×6=30 6×6=36  </span><span class="comment"># 1×7=7 2×7=14 3×7=21 4×7=28 5×7=35 6×7=42 7×7=49  </span><span class="comment"># 1×8=8 2×8=16 3×8=24 4×8=32 5×8=40 6×8=48 7×8=56 8×8=64  </span><span class="comment"># 1×9=9 2×9=18 3×9=27 4×9=36 5×9=45 6×9=54 7×9=63 8×9=72 9×9=81  </span><span class="comment"># 1×1=1  </span><span class="comment"># 1×2=2   2×2=4  </span><span class="comment"># 1×3=3   2×3=6   3×3=9  </span><span class="comment"># 1×4=4   2×4=8   3×4=12  4×4=16  </span><span class="comment"># 1×5=5   2×5=10  3×5=15  4×5=20  5×5=25  </span><span class="comment"># 1×6=6   2×6=12  3×6=18  4×6=24  5×6=30  6×6=36  </span><span class="comment"># 1×7=7   2×7=14  3×7=21  4×7=28  5×7=35  6×7=42  7×7=49  </span><span class="comment"># 1×8=8   2×8=16  3×8=24  4×8=32  5×8=40  6×8=48  7×8=56  8×8=64  </span><span class="comment"># 1×9=9   2×9=18  3×9=27  4×9=36  5×9=45  6×9=54  7×9=63  8×9=72  9×9=81  </span><span class="comment"># 1x1=1  </span><span class="comment"># 1x2=2   2x2=4  </span><span class="comment"># 1x3=3   2x3=6   3x3=9  </span><span class="comment"># 1x4=4   2x4=8   3x4=12  4x4=16  </span><span class="comment"># 1x5=5   2x5=10  3x5=15  4x5=20  5x5=25  </span><span class="comment"># 1x6=6   2x6=12  3x6=18  4x6=24  5x6=30  6x6=36  </span><span class="comment"># 1x7=7   2x7=14  3x7=21  4x7=28  5x7=35  6x7=42  7x7=49  </span><span class="comment"># 1x8=8   2x8=16  3x8=24  4x8=32  5x8=40  6x8=48  7x8=56  8x8=64  </span><span class="comment"># 1x9=9   2x9=18  3x9=27  4x9=36  5x9=45  6x9=54  7x9=63  8x9=72  9x9=81  </span>print(len(<span class="string">'{}\t'</span>.format(<span class="number">5</span>*<span class="number">6</span>)))  print(len(<span class="string">'{}\t'</span>.format(<span class="number">5</span>*<span class="number">60</span>)))  print(len(<span class="string">'{}\t'</span>.format(<span class="number">5</span>*<span class="number">600</span>)))  print(len(<span class="string">'{}\t'</span>.format(<span class="number">5</span>*<span class="number">6000</span>)))  <span class="comment"># 3  </span><span class="comment"># 4  </span><span class="comment"># 5  </span><span class="comment"># 6  </span></code></pre><h3 id="10-2-4-利润分段计算"><a href="#10-2-4-利润分段计算" class="headerlink" title="10.2.4. 利润分段计算"></a>10.2.4. 利润分段计算</h3><p>请写出一个函数，当输入函数变量月利润为I时，能返回应发放奖金的总数。例如，输出“利润为100000元时，应发放奖金总数为10000元”。<br>其中，企业发放的奖金根据利润提成。<br>利润（I）低于或等于10万元时，奖金可提10%；<br>利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；<br>利润在20万元到40万元之间时，高于20万元的部分可提成5%；<br>利润在40万元到60万元之间时，高于40万元的部分可提成3%；<br>利润在60万元到100万元之间时，高于60万元的部分可提成1.5%；<br>利润高于100万元时，超过100万元的部分按1%提成。  </p><pre><code class="py"><span class="function"><span class="keyword">def</span> <span class="title">calcute_profit</span><span class="params">(I)</span>:</span>      I = I / <span class="number">10000</span>      <span class="keyword">if</span> I &lt;= <span class="number">10</span>:          a = I * <span class="number">0.01</span>          <span class="keyword">return</span> a * <span class="number">10000</span>      <span class="keyword">elif</span> I &lt;= <span class="number">20</span> <span class="keyword">and</span> I &gt; <span class="number">10</span>:          b =<span class="number">0.25</span> + I * <span class="number">0.075</span>          <span class="keyword">return</span> b * <span class="number">10000</span>      <span class="keyword">elif</span> I &lt;= <span class="number">40</span> <span class="keyword">and</span> I &gt; <span class="number">20</span>:          c = <span class="number">0.75</span> + I * <span class="number">0.05</span>          <span class="keyword">return</span> c * <span class="number">10000</span>      <span class="keyword">elif</span> I &lt;= <span class="number">60</span> <span class="keyword">and</span> I &gt; <span class="number">40</span>:          d = <span class="number">0.95</span> + I * <span class="number">0.03</span>          <span class="keyword">return</span> d * <span class="number">10000</span>      <span class="keyword">elif</span> I &lt;= <span class="number">60</span> <span class="keyword">and</span> I &gt; <span class="number">100</span>:          e = <span class="number">2</span> + I * <span class="number">0.015</span>          <span class="keyword">return</span> e * <span class="number">10000</span>      <span class="keyword">else</span>:          f = <span class="number">2.95</span> + I * <span class="number">0.01</span>          <span class="keyword">return</span> f * <span class="number">10000</span>  I = int(input(<span class="string">'净利润:'</span>))  profit = calcute_profit(I)  <span class="keyword">print</span> (<span class="string">'利润为%d元时，应发奖金总数为%d元'</span> % (I, profit))  <span class="function"><span class="keyword">def</span> <span class="title">calcute_profit</span><span class="params">(I)</span>:</span>      arr = [<span class="number">1000000</span>,<span class="number">600000</span>,<span class="number">400000</span>,<span class="number">200000</span>,<span class="number">100000</span>,<span class="number">0</span>] <span class="comment">#这应该就是各个分界值了，把它们放在列表里方便访问  </span>    rat = [<span class="number">0.01</span>,<span class="number">0.015</span>,<span class="number">0.03</span>,<span class="number">0.05</span>,<span class="number">0.075</span>,<span class="number">0.1</span>] <span class="comment">#这是各个分界值所对应的奖金比例值  </span>    r = <span class="number">0</span>                       <span class="comment">#这是总奖金的初始值  </span>    <span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):      <span class="comment">#有6个分界值当然要循环6次  </span>        <span class="keyword">if</span> I &gt; arr[idx]:              r = r + (I - arr[idx]) * rat[idx]              I = arr[idx]      <span class="keyword">return</span> r  I = int(input(<span class="string">'净利润:'</span>))  profit = calcute_profit(I)  <span class="keyword">print</span> (<span class="string">'利润为%d元时，应发奖金总数为%d元'</span> % (I, profit))  </code></pre><h3 id="10-2-5-字典排序"><a href="#10-2-5-字典排序" class="headerlink" title="10.2.5. 字典排序"></a>10.2.5. 字典排序</h3><p>用字典的值对字典进行排序，将{1: 2, 3: 4, 4:3, 2:1, 0:0}按照字典的值从大到小进行排序。  </p><pre><code class="py"><span class="keyword">import</span> operator  x = {<span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">4</span>, <span class="number">4</span>:<span class="number">3</span>, <span class="number">2</span>:<span class="number">1</span>, <span class="number">0</span>:<span class="number">0</span>}  sorted_x = sorted(x.items(), key=operator.itemgetter(<span class="number">1</span>))  <span class="keyword">print</span> (sorted_x)  </code></pre><p>[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]<br>对字典进行排序是【不可能】的，只有把字典【转换】成另一种方式才能排序。字典本身是无序的，但是如列表元组等其他类型是有序的，所以需要用一个元组列表来表示排序的字典。  </p><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p>批量书合成一页还是每本书单独有序号|很多个人网站每个条目有自己的序号，按序号抓可不重不漏<br>正则表达式的引号问题|转义<br>网页可能不存在|try、except<br>匹配结果为0的情况|try、except<br>编译器vscode跑太慢|换回python自带IDLE，快很多<br>为啥跑着跑着就停了|<br>一级风险：原网站换<br>五级风险：原作者取消网盘链接</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter</title>
      <link href="/Jupyter/"/>
      <url>/Jupyter/</url>
      
        <content type="html"><![CDATA[<p>jupyter命令一览。<br><a id="more"></a></p><p>输出去掉 <code>\n</code>：<a href="https://stackoverflow.com/questions/43835171/print-multiple-line-string-in-jupyter-notebook" target="_blank" rel="noopener">https://stackoverflow.com/questions/43835171/print-multiple-line-string-in-jupyter-notebook</a></p><p><a href="http://jupyter.org/" target="_blank" rel="noopener">http://jupyter.org/</a></p><p><code>pip install jupyter --user</code> 安装<br><code>jupyter notebook</code> 进入笔记本</p><h2 id="修改默认路径和浏览器"><a href="#修改默认路径和浏览器" class="headerlink" title="修改默认路径和浏览器"></a>修改默认路径和浏览器</h2><p>Windows默认在chrome里面打开：<br>1.命令行：jupyter notebook –generate-config<br>2.打开文件：jupyter_notebook_config.py<br>3.在文件头部添加:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line">webbrowser.register(<span class="string">'chrome'</span>, <span class="keyword">None</span>, webbrowser.GenericBrowser(<span class="string">u'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'</span>))</span><br><span class="line">c.NotebookApp.browser = <span class="string">'chrome'</span></span><br></pre></td></tr></table></figure></p><p>路径需要酌情调整。</p><h1 id="在nbviewer中查看"><a href="#在nbviewer中查看" class="headerlink" title="在nbviewer中查看"></a>在nbviewer中查看</h1><p>github文件的网址中把<code>https://github.com</code> 替换为<code>https://nbviewer.jupyter.org/github</code> 。<br>注意斜线个数。<a href="https://nbviewer.jupyter.org/github/cjql/myjupyter/blob/master/MySQL.ipynb" target="_blank" rel="noopener">典型示例</a>：<code>https://nbviewer.jupyter.org/github/cjql/myjupyter/blob/master/MySQL.ipynb</code><br><a href="http://nbviewer.jupyter.org/faq" target="_blank" rel="noopener">官方网站</a></p><h1 id="格式转换-html、md、pdf、letex"><a href="#格式转换-html、md、pdf、letex" class="headerlink" title="格式转换: html、md、pdf、letex"></a>格式转换: html、md、pdf、letex</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://cloud.tencent.com/developer/article/1008571" target="_blank" rel="noopener">格式转换</a></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p><a href="https://ipython.org/ipython-doc/3/notebook/nbconvert.html" target="_blank" rel="noopener">官方文档</a><br><a href="https://cloud.tencent.com/developer/article/1008490" target="_blank" rel="noopener">腾讯云入门教程1</a> <a href="https://hub.packtpub.com/getting-started-jupyter-notebook-part-1/" target="_blank" rel="noopener">英文参考文献</a><br><a href="https://cloud.tencent.com/developer/article/1008493" target="_blank" rel="noopener">腾讯云入门教程2</a> <a href="https://hub.packtpub.com/getting-started-jupyter-notebook-part-2/" target="_blank" rel="noopener">英文参考文献</a></p><h2 id="命令式"><a href="#命令式" class="headerlink" title="命令式"></a>命令式</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>jupyter nbconvert –to html notebook.ipynb</td><td>ipynb转为html格式</td></tr><tr><td>jupyter nbconvert –to html –template full notebook.ipynb</td><td>对生成的html格式进行配置，默认配置，提供完整的静态html格式，交互性更强。</td></tr><tr><td>jupyter nbconvert –to html –template basic notebook.ipynb</td><td>简化的html，用于嵌入网页、博客等，这不包括html标题。</td></tr><tr><td>jupyter nbconvert –to md notebook.ipynb</td><td>简单的Markdown格式输出，cell单元不受影响，代码cell缩进4个空格。</td></tr><tr><td>jupyter nbconvert –to letex notebook.ipynb</td><td>Letex导出格式，生成后缀名为NOTEBOOK_NAME.tex的文件。</td></tr><tr><td>jupyter nbconvert –to letex -template article notebook.ipynb</td><td>默认配置，Latex文章。</td></tr><tr><td>jupyter nbconvert –to letex -template report notebook.ipynb</td><td>Latex报告，提供目录和章节。</td></tr><tr><td>jupyter nbconvert –to letex -template basic notebook.ipynb</td><td>最基本的Latex输出，经常用来自定义配置。</td></tr><tr><td>jupyter nbconvert –to pdf notebook.ipynb</td><td>转换为pdf格式分模板配置与latex配置是一样的。需要提前安装xelatex。</td></tr><tr><td>sudo apt-get install texlive-full</td><td>方法是安装texLive套装，texlive-full的安装包有点大，约1G多。</td></tr></tbody></table><h2 id="面板式"><a href="#面板式" class="headerlink" title="面板式"></a>面板式</h2><p>ipynb转换为html、md、pdf等格式，还有另一种更简单的方法：在jupyter notebook中，选择<code>File-&gt;Download as</code>，直接选择需要转换的格式就可以了。需要注意的是，转换为pdf格式之前，同样要保证已经安装了xelatex。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 软件开发 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/git/"/>
      <url>/git/</url>
      
        <content type="html"><![CDATA[<p>沙盒：<a href="https://learngitbranching.js.org/?NODEMO" target="_blank" rel="noopener">https://learngitbranching.js.org/?NODEMO</a></p><ul><li>undo、reset 修正错误，不记入步数。</li><li>objective 打开任务对话框</li><li>levels 选择关卡</li><li>show solution 查看本关答案<br>todo</li><li>命令有哪些？对应的关卡是？</li><li>各个命令接的参数是什么</li><li>分支、head、星号、节点各有什么变化</li><li>哪些命令能移动分支</li><li>哪些命令能移动节点</li><li>移动整个分支还是部分节点</li><li>谁从哪移到哪</li><li>哪些命令能创建分支</li><li>哪些命令会创建commit</li><li>哪些命令会移动星号</li><li>哪些命令会改变HEAD默认位置<br>尚不熟练的关卡：<a id="more"></a><h1 id="1-命令大全"><a href="#1-命令大全" class="headerlink" title="1. 命令大全"></a>1. 命令大全</h1>git checkout HEAD file/to/restore 针对文件回退本地修改 <a href="https://blog.csdn.net/iefreer/article/details/7679631" target="_blank" rel="noopener">https://blog.csdn.net/iefreer/article/details/7679631</a><br>git reset –hard 放弃本地修改，直接覆盖<br>git commit。该命令不接受参数。新提交号，星号前移一步，分支前移，保存当前快照，每次都是带星号的分支（当前的活动分支）前移一步并伴随创建提交号。如果没有带星号的branch，则移动HEAD。<br>git branch：该命令不能接直接接commit参数。<br>git branch 【oldbranch】。×移动HEAD到【oldbranch】× 不能给分支取这个名字。<br>git branch 【oldbranch】【ref】。不能给分支取这个名字。<br>git branch 【newbranch】。在当前位置（星号或HEAD处）创建分支。提交号不变，星号不变。同提交号处多了【newbranch】分支。【newbranch】既不能与oldbranch重名，也不能与commit节点重名。<br>git branch 【newbranch】【ref】。在ref处创建newbranch，其他均不变。在指定位置创建分支。<br>git branch -f master HEAD~3。强制移动分支。将 master 分支强制指向 HEAD 的第 3 级父提交。如master有星号则移星，无则不移。level rampup3<br>git checkout 【分支名】。星号移到【分支名】那。提交号不变，分支不变。切换分支。<br>git checkout 【分支名】^。星号消失。HEAD出现在【分支名】的【第一个】父提交号上。<br>git checkout 【分支名】^2。星号消失。HEAD出现在【分支名】的【另一个】父提交号上。<br>git checkout 【提交号】。星号消失。HEAD指向【提交号】。<br>git checkout HEAD~4。星号消失。HEAD指向星号的第4父代提交号。level rampup3<br>git checkout HEAD~^2~2<br>git checkout -b 【分支名】。提交号不变，星号到【分支名】那，创建分支并切换到新的分支。<br>git merge 【分支1】。合并分支。创建commit，并拥有了2个父提交号。星号前移一步，【分支1】不动，当前分支前移。与commit命令唯一不同之处在于合并了【分支1】，用 git merge 把 【分支1】合并到当前分支<br>git merge 【提交号】。同git merge 【分支1】<br>git merge 【子提交号上的分支】。将当前分支连同星号一起移动到子提交号所在的提交号上。每一个分支都包含了代码库的所有修改！<br>git merge 【父提交号上的分支】。分支已经是最新的啦。<br>rebase：当前移动到目的；cherry-pick：目的移动到当前<br>git rebase 【分支1】。复制当前整个分支到【分支1】下。移动分支<br>git rebase 【分支1】【分支2】。将分支2的整个分支复制到分支1下。从共有父节点开始复制。<br>git rebase 【子提交号上的分支】。将当前分支连同星号一起移动到子提交号所在的提交号上。移动引用。移动分支<br>git rebase 【提交号】复制除提交号的兄弟提交外的的所有提交号到【提交号下】。移动分支<br>git rebase -i 【相对位置】。交互式，选择和排序到【相对位置】下，并移动分支名和星号。移动分支<br>git cherry-pick 【分支名】。把【分支名】在的最后一个提交号复制到当下。分支和星号同时前进。移动分支<br>git cherry-pick 【父辈提交号】。已经存在于你的改动集里，已忽略。<br>git cherry-pick 【提交号1，提交号2】。把选中的提交号复制到当下。分支和星号同时前进。移动分支<br>git tag 【tag】【提交号】。只加了tag，其他均不变。<br>git describe 【ref】。【ref】可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（HEAD）<br>git log。查看commit哈希值。<br>^。向上移动1个记录。level rampup2。<br>~【num】。向上移动【num】个记录。level rampup3。<br>git reset 【提交号或相对引用】。将星号和分支回退到【】指定的位置，被回退的部分并不会消失。<br>git revert 【提交号或相对引用】。远程将星号和分支回退到【】指定的位置，被回退的部分并不会消失。level rampup4。</li></ul><!-- more --><h1 id="2-基础篇"><a href="#2-基础篇" class="headerlink" title="2. 基础篇"></a>2. 基础篇</h1><p>循序渐进地介绍 Git 主要命令</p><h2 id="2-1-Git-Commit"><a href="#2-1-Git-Commit" class="headerlink" title="2.1. Git Commit"></a>2.1. Git Commit</h2><p>Git Commit<br>Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因。<br>提交记录可看作是项目的快照。就像是把整个目录复制，然后再粘贴一样，但比复制粘贴优雅许多！提交记录非常轻量，可以快速地在这些提交记录之间切换！把所有的差异打包到一起作为一个提交记录。</p><h2 id="2-2-Git-Branch"><a href="#2-2-Git-Branch" class="headerlink" title="2.2. Git Branch"></a>2.2. Git Branch</h2><p>Git Branch<br>Git 的分支也非常轻量。它们只是简单地指向某个提交纪录 —— 仅此而已。所以许多 Git 爱好者传颂：</p><p>早建分支！多用分支！</p><p>这是因为即使创建再多分的支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。</p><p>在将分支和提交记录结合起来后，我们会看到两者如何协作。现在只要记住使用分支其实就相当于在说：“我想基于这个提交以及它所有的父提交进行新的工作。”</p><h2 id="2-3-Git-Merge"><a href="#2-3-Git-Merge" class="headerlink" title="2.3. Git Merge"></a>2.3. Git Merge</h2><p>分支与合并<br>创建一个分支，在其上开发某个新功能，开发完成后再合并回主线。<br>第一种方法 —— git merge。在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”<br>通过图示更容易理解一些，咱们到下一页看一下。</p><h2 id="2-4-Git-Rebase"><a href="#2-4-Git-Rebase" class="headerlink" title="2.4. Git Rebase"></a>2.4. Git Rebase</h2><p>第二种合并分支的方法是 git rebase。Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。<br>Rebase：提交历史更线性。只使用 Rebase 的话，提交历史会异常清晰。</p><p>还是准备了两个分支；注意当前所在的分支是 bugFix（星号标识的是当前分支）<br>我们想要把 bugFix 分支里的工作直接移到 master 分支上。移动以后会使得两个分支的功能看起来像是按顺序开发，但实际上它们是并行开发的。</p><p>咱们这次用 git rebase 实现此目标</p><h1 id="3-高级篇"><a href="#3-高级篇" class="headerlink" title="3. 高级篇"></a>3. 高级篇</h1><p>Git 的超棒特性</p><h2 id="3-1-分离HEAD"><a href="#3-1-分离HEAD" class="headerlink" title="3.1. 分离HEAD"></a>3.1. 分离HEAD</h2><p>在提交树上移动<br>在你项目的提交树上前后移动的几种方法。</p><h3 id="3-1-1-HEAD"><a href="#3-1-1-HEAD" class="headerlink" title="3.1.1. HEAD"></a>3.1.1. HEAD</h3><p>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。<br>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><p>HEAD 通常情况下是指向【分支名】的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。<br>下面咱们通过实际操作看一下。我们将会观察提交前后 HEAD 的位置。</p><p><code>git commit C1;git checkout master;git commit;git checkout C2</code></p><p><code>cat .git/HEAD</code> 查看HEAD<br><code>git symbolic-ref HEAD</code> 查看HEAD的引用指向</p><h3 id="3-1-2-分离的-HEAD"><a href="#3-1-2-分离的-HEAD" class="headerlink" title="3.1.2. 分离的 HEAD"></a>3.1.2. 分离的 HEAD</h3><p>分离的 HEAD 就是让其指向了某个具体的【提交记录】而不是分支名。在命令执行之前的状态如下所示：<br>HEAD -&gt; master -&gt; C1。HEAD 指向 master， master 指向 C1</p><p><code>git checkout C1</code><br>现在变成了 HEAD -&gt; C1</p><p>想完成此关，从 bugFix 分支中分离出 HEAD 并让其指向一个提交记录。⇒ 分离head就是git checkout 接commit的hash值<br>通过哈希值指定提交记录。每个提交记录的哈希值显示在代表提交记录的圆圈中</p><h2 id="3-2-相对引用（-）"><a href="#3-2-相对引用（-）" class="headerlink" title="3.2. 相对引用（^）"></a>3.2. 相对引用（^）</h2><p><code>git log</code> :查看提交记录的哈希值。<br>Git 对哈希的处理很智能,只需要提供能够唯一标识提交记录的前几个字符即可。<br>相对引用:针对问题（通过哈希值指定提交记录很不方便）</p><p>相对引用两个简单的用法：<br>使用 ^ 向上移动 1 个提交记录<br>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 ~3</p><p>首先看看操作符 (^)。把这个符号加在引用名称的后面，表示让 Git 寻找指定提交记录的父提交。</p><p>所以 <code>master^</code> 相当于“master 的父节点”。</p><p><code>master^^</code> 是 master 的第二个父节点</p><p>现在咱们切换到 master 的父节点<br><code>git checkout master^</code></p><p>将 HEAD 作为相对引用的参照</p><p>git checkout C3;git checkout HEAD^;git checkout HEAD^;git checkout HEAD^;</p><p>要完成此关，切换到 bugFix 的父节点。这会进入分离 HEAD 状态。</p><p>如果你愿意的话，使用哈希值也可以过关，但请尽量使用相对引用！<br><code>git checkout C4^</code> 切换到C4的父节点。</p><h2 id="3-3-相对引用2（-）"><a href="#3-3-相对引用2（-）" class="headerlink" title="3.3. 相对引用2（~）"></a>3.3. 相对引用2（~）</h2><p>~操作符后面可以跟一个数字（可选，不跟数字时，向上移动一次），指定向上移动多少次。</p><p><code>git checkout HEAD~4</code></p><h3 id="3-3-1-强制修改分支位置"><a href="#3-3-1-强制修改分支位置" class="headerlink" title="3.3.1. 强制修改分支位置"></a>3.3.1. 强制修改分支位置</h3><p>可以直接使用 -f 选项让分支指向另一个提交(强制移动到指定的位置。)。例如:将 master 分支强制指向 HEAD 的第 3 级父提交。</p><p><code>git branch -f master HEAD~3</code></p><h2 id="3-4-撤销变更"><a href="#3-4-撤销变更" class="headerlink" title="3.4. 撤销变更"></a>3.4. 撤销变更</h2><p>在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。</p><p>主要有两种方法用来撤销变更 —— 一是 git reset，还有就是 git revert。接下来咱们逐个进行讲解。</p><h3 id="3-4-1-Git-Reset"><a href="#3-4-1-Git-Reset" class="headerlink" title="3.4.1. Git Reset"></a>3.4.1. Git Reset</h3><p>git reset 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。git reset 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。</p><p>让我们来看看演示：<br><code>git reset HEAD~1</code></p><h3 id="3-4-2-Git-Revert"><a href="#3-4-2-Git-Revert" class="headerlink" title="3.4.2. Git Revert"></a>3.4.2. Git Revert</h3><p>git reset 远程分支无效。为了撤销更改并分享给别人，我们需要使用 git revert。来看演示：</p><p><code>git revert HEAD</code></p><p>奇怪！在我们要撤销的提交记录后面居然多了一个新提交！这是因为新提交记录 C2’ 引入了更改 —— 这些更改刚好是用来撤销 C2 这个提交的。也就是说 【C2’ 的状态与 C1 是相同的】。revert 之后就可以把你的更改推送到远程仓库与别人分享啦。<br>要完成此关，分别撤销 local 分支和 pushed 分支上的最近一次提交。共需要撤销两个提交（每个分支一个）。<br>记住 pushed 是远程分支，local 是本地分支 —— 这么说你应该知道用分别哪种方法了吧？</p><h1 id="4-移动提交记录"><a href="#4-移动提交记录" class="headerlink" title="4. 移动提交记录"></a>4. 移动提交记录</h1><p>整理提交记录  自由修改提交树<br>到现在我们已经学习了 Git 的基础知识 —— 提交、分支以及在提交树上移动。 这些概念涵盖了 Git 90% 的功能，同样也足够满足开发者的日常需求</p><p>然而, 剩余的 10% 在处理复杂的工作流时(或者当你陷入困惑时）可能就显得尤为重要了。接下来要讨论的这个话题是“整理提交记录” —— 开发人员有时会说“我想要把这个提交放到这里, 那个提交放到刚才那个提交的后面”, 而接下来就讲的就是它的实现方式，非常清晰、灵活，还很生动。</p><p>看起来挺复杂, 其实是个很简单的概念。</p><h2 id="4-1-Git-Cherry-pick"><a href="#4-1-Git-Cherry-pick" class="headerlink" title="4.1. Git Cherry-pick"></a>4.1. Git Cherry-pick</h2><p>git cherry-pick &lt;提交号&gt;…<br>Cherry-pick将一些提交【复制】到当前所在的位置（HEAD）下面，简单而直接。 。</p><p>这里有一个仓库, 我们想将 side 分支上的工作复制到 master 分支，你立刻想到了之前学过的 rebase 了吧？但是咱们还是看看 cherry-pick 有什么本领吧。<br><code>git cherry-pick C2 C4</code></p><p>这就是了！我们只需要提交记录 C2 和 C4，所以 Git 就将被它们抓过来放到当前分支下了。 </p><p>要通过此关, 只需要简单的将三个分支中的提交记录复制到 master 上就可以了。<br>git cherry-pick C3 C4 C7</p><h2 id="4-2-交互式-rebase"><a href="#4-2-交互式-rebase" class="headerlink" title="4.2. 交互式 rebase"></a>4.2. 交互式 rebase</h2><p>cherry-pick：将选定的commit【复制】到当前位置下面。需要知道提交记录及其哈希值。<br>rebase：【交互式复制】。不清楚你想要的提交记录的哈希值，而要【从一系列的提交记录中找】到想要的记录<br>交互式 rebase 指的是使用带【参数 –interactive 的 rebase 命令, 简写为 -i】</p><p>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><p>在实际使用时，所谓的 UI 窗口一般会在文本编辑器 —— 如 Vim —— 中打开一个文件。 考虑到课程的初衷，我弄了一个对话框来模拟这些操作。</p><p>当 rebase UI界面打开时, 你能做3件事:</p><p>调整提交记录的顺序（通过鼠标拖放来完成）<br>删除你不想要的提交（通过切换 pick 的状态来完成，关闭就意味着你不想要这个提交记录）<br>合并提交。 遗憾的是由于某种逻辑的原因，我们的课程不支持此功能，因此我不会详细介绍这个操作。简而言之，它允许你把多个提交记录合并成一个。<br>接下来咱们看个实例</p><p>当你点击下面的按钮时，会出现一个交互对话框。对提交记录做个排序（当然你也可以删除某些提交），点击确定看结果</p><p><code>git rebase -i HEAD~4</code><br>HEAD后的数一直接到要复制到的节点。然后按顺序挑就OK。</p><p>拖动和挑选</p><p>Git 严格按照你在对话框中指定的方式进行了复制。</p><p>要通过本关, 做一次交互式的 rebase，整理成目标窗口中的提交顺序。 </p><h1 id="5-杂项"><a href="#5-杂项" class="headerlink" title="5. 杂项"></a>5. 杂项</h1><p>Git 技术、技巧与贴士大集合</p><h2 id="5-1-只取一个提交记录"><a href="#5-1-只取一个提交记录" class="headerlink" title="5.1. 只取一个提交记录"></a>5.1. 只取一个提交记录</h2><p>本地栈式提交<br>来看一个在开发中经常会遇到的情况：我正在解决某个特别棘手的 Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。</p><p>这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个 Bug 的根本原因，解决掉以后觉得沾沾自喜！</p><p>最后就差把 bugFix 分支里的工作合并回 master 分支了。你可以选择通过 fast-forward 快速合并到 master 分支上，但这样的话 master 分支就会包含我这些调试语句了。你肯定不想这样，应该还有更好的方式……</p><p>实际我们只要让 Git 复制解决问题的那一个提交记录就可以了。跟之前我们在“整理提交记录”中学到的一样，我们可以使用</p><p>git rebase -i<br>git cherry-pick<br>来达到目的。</p><p>由于我们刚刚闯过类似的关卡，所以要不要再尝试一次就看你自己了。但是如果你想试一把的话，确保 master 分支能得到 bugFix 分支上的相关提交。</p><p>git rebase -i HEAD~3<br>git branch if master c4’</p><h2 id="5-2-提交的技巧-1"><a href="#5-2-提交的技巧-1" class="headerlink" title="5.2. 提交的技巧 #1"></a>5.2. 提交的技巧 #1</h2><p>接下来这种情况也是很常见的：你之前在 newImage 分支上进行了一次提交，然后又基于它创建了 caption 分支，然后又提交了一次。<br>此时你想对的某个以前的提交记录进行一些小小的调整。比如设计师想修改一下 newImage 中图片的分辨率，尽管那个提交记录并不是最新的了。<br>我们可以通过下面的方法来克服困难：</p><p>先用 git rebase -i 将提交重新排序，然后把我们想要修改的提交记录挪到最前<br>然后用 commit –amend 来进行一些小修改<br>接着再用 git rebase -i 来将他们调回原来的顺序<br>最后我们把 master 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！<br>当然完成这个任务的方法不止上面提到的一种（我知道你在看 cherry-pick 啦），之后我们会多点关注这些技巧啦，但现在暂时只专注上面这种方法。 最后有必要说明一下目标状态中的那几个’ —— 我们把这个提交移动了两次，每移动一次会产生一个 ‘；而 C2 上多出来的那个是我们在使用了 amend 参数提交时产生的，所以最终结果就是这样了。</p><p>也就是说，我在对比结果的时候只会对比提交树的结构，对于 ‘ 的数量上的不同，并不纳入对比范围内。只要你的 master 分支结构与目标结构相同，我就算你通过。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~2</span><br><span class="line">git rebase -i HEAD~1</span><br><span class="line">git rebase -i HEAD~2</span><br><span class="line">git branch -f master</span><br></pre></td></tr></table></figure></p><p>todo:应该可以有更优解</p><h2 id="5-3-提交的技巧-2"><a href="#5-3-提交的技巧-2" class="headerlink" title="5.3. 提交的技巧 #2"></a>5.3. 提交的技巧 #2</h2><p>可以使用 rebase -i 对提交记录进行重新排序。只要把我们想要的提交记录挪到最前端，我们就可以很轻松的用 –amend 修改它，然后把它们重新排成我们想要的顺序。<br>但这样做就唯一的问题就是要进行两次排序，而这有可能造成由 rebase 而导致的冲突。下面还是看看 git cherry-pick 是怎么做的吧。</p><p>cherry-pick 可以将提交树上任何地方的提交记录取过来追加到 HEAD 上（只要不是 HEAD 上游的提交就没问题）。<br>git cherry-pick c2</p><p>这一关的目标和上一关一样，通过 –amend 改变提交记录 C2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git cherry-pick c2</span><br><span class="line">git branch -f master c1</span><br><span class="line">git cherry-pick c2<span class="string">' c3</span></span><br><span class="line"><span class="string"># or</span></span><br><span class="line"><span class="string">git checkout master</span></span><br><span class="line"><span class="string">git cherry-pick c2</span></span><br><span class="line"><span class="string">git commit --amend</span></span><br><span class="line"><span class="string">git cherry-pick c3</span></span><br></pre></td></tr></table></figure></p><h2 id="5-4-Git-Tag"><a href="#5-4-Git-Tag" class="headerlink" title="5.4. Git Tag"></a>5.4. Git Tag</h2><p>Git Tags<br>相信通过前面课程的学习你已经发现了：分支很容易被人为移动，并且当有新的提交时，它也会移动。分支很容易被改变，大部分分支还只是临时的，并且还一直在变。<br>你可能会问了：有没有什么可以永远指向某个提交记录的标识呢，比如软件发布新的大版本，或者是修正一些重要的 Bug 或是增加了某些新特性，有没有比分支更好的可以永远指向这些提交的方法呢？</p><p>当然有了！Git 的 tag 就是干这个用的啊，它们可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。</p><p>更难得的是，它们并不会随着新的提交而移动。你也不能检出到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。</p><p>咱们来看看标签到底是什么样。</p><p><code>git tag v1 C1</code><br>很容易吧！我们将这个标签命名为 v1，并且明确地让它指向提交记录 C1，如果你不指定提交记录，Git 会用 HEAD 所指向的位置。`<br>在这个关卡中，按照目标建立两个标签，然后检出到 v1 上面，要注意你会进到分离 HEAD 的状态 —— 这是因为不能直接在v1 上面做 commit。<br>在下个关卡中我们会介绍更多关于标签的有趣的应用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag v0 c1</span><br><span class="line">git tag v1 c2</span><br><span class="line">git checkout c2</span><br></pre></td></tr></table></figure></p><h2 id="5-5-Git-Describe"><a href="#5-5-Git-Describe" class="headerlink" title="5.5. Git Describe"></a>5.5. Git Describe</h2><p>Git Describe<br>由于标签在代码库中起着“锚点”的作用，Git 还为此专门设计了一个命令用来描述离你最近的锚点（也就是标签），它就是 git describe！</p><p>Git Describe 能帮你在提交历史中移动了多次以后找到方向；当你用 git bisect（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时， 可能会用到这个命令。<br>git describe 的​​语法是：</p><p><code>git describe &lt;ref&gt;</code></p><p><code>&lt;ref&gt;</code> 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（HEAD）。</p><p>它输出的结果是这样的：</p><p><code>&lt;tag&gt;_&lt;numCommits&gt;_g&lt;hash&gt;</code></p><p>tag 表示的是离 ref 最近的标签， numCommits 是表示这个 ref 与 tag 相差有多少个提交记录， hash 表示的是你所给定的 ref 所表示的提交记录哈希值的前几位。</p><p>当 ref 提交记录上有某个标签时，则只输出标签名称</p><p><code>git tag v2 c3</code><br>git describe master 会输出：</p><p>v1_2_gC2</p><p>git describe side 会输出：</p><p>v2_1_gC4</p><p>git describe 就是这样了！试着在这个关卡指定几个位置来感受一下这个命令吧！</p><p>当你准备进行下一关时，只要提交一次就可以通过这个关卡。算是我们送你的一个小礼物吧 :P</p><h1 id="6-高级话题"><a href="#6-高级话题" class="headerlink" title="6. 高级话题"></a>6. 高级话题</h1><p>只为真正的勇士！</p><h2 id="6-1-多次-Rebase"><a href="#6-1-多次-Rebase" class="headerlink" title="6.1. 多次 Rebase"></a>6.1. 多次 Rebase</h2><p>level advanced1<br>多分支 rebase<br>哥们儿，我们准备了很多分支！咱们把这些分支 rebase 到 master 上吧。</p><p>但是你的领导给你提了点要求 —— 他们希望得到有序的提交历史，也就是我们最终的结果应该是 C6’ 在 C7’ 上面， C5’ 在 C6’ 上面，依此类推。</p><p>即使你搞砸了也没关系，用 reset 命令就可以重新开始了。记得看看我们提供的答案，看你能否使用更少的命令来完成任务！<br>git rebase side anonther<br>git rebase bugFix anonther<br>git rebase master anonther<br>git branch -f master another</p><h2 id="6-2-两个父节点"><a href="#6-2-两个父节点" class="headerlink" title="6.2. 两个父节点"></a>6.2. 两个父节点</h2><p>选择父提交记录<br>操作符 ^ 与 ~ 符一样，后面也可以跟一个数字。</p><p>但是该操作符后面的数字与 ~ 后面的不同，并不是用来指定向上返回几代，而是指定合并提交记录的某个父提交。还记得前面提到过的一个合并提交有两个父提交吧，所以遇到这样的节点时该选择哪条路径就不是很清晰了。</p><p>Git 默认选择合并提交的“第一个”父提交，在操作符 ^ 后跟一个数字可以改变这一默认行为。</p><p>废话不多说，举个例子。</p><p>这里有一个合并提交记录。如果不加数字修改符直接检出 master^，会回到【第一个】父提交记录。</p><p>(在我们的图示中，第一个父提交记录是指合并提交记录正上方的那个提交记录。)</p><p><code>git checkout master^</code></p><p>现在来试试选择另一个父提交……</p><p><code>git checkout master^2</code></p><p>~ 后面的数字是垂直父节点的个数（早几辈）， ^ 后面的数字是水平父节点的个数（第几位叔叔）</p><p>使用 ^ 和 ~ 可以自由地在提交树中移动，非常给力：<br><code>git checkout HEAD~;git checkout HEAD^2;git checkout HEAD~2</code></p><p>更厉害的是，这些操作符还支持链式操作！试一下这个：<br>和前面的结果一样，但只用了一条命令。<br><code>git checkout HEAD~^2~2</code><br>和前面的结果一样，但只用了一条命令。</p><p>课后小练习<br>要完成此关，在指定的目标位置创建一个新的分支。</p><p>很明显可以简单地直接使用提交记录的哈希值（比如 C6），但我要求你使用刚刚讲到的相对引用修饰符！<br><code>git branch bugFix HEAD~^2~</code><br>git branch bugWork HEAD^^2^<br>git branch bugWork master^^2^<br>注意^2默认是正上方</p><h2 id="6-3-纠缠不清的分支"><a href="#6-3-纠缠不清的分支" class="headerlink" title="6.3. 纠缠不清的分支"></a>6.3. 纠缠不清的分支</h2><p>纠缠不清的分支<br>哇塞大神！这关我们要来点不同的！</p><p>现在我们的 master 分支是比 one、two 和 three 要多几个提交。出于某种原因，我们需要把 master 分支上最近的几次提交做不同的调整后，分别添加到各个的分支上。</p><p>one 需要重新排序并删除 C5，two 仅需要重排排序，而 three 只需要提交一次。</p><p>慢慢来，你会找到答案的 —— 记得通关之后用 show solution 看看我们的答案哦。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout one</span><br><span class="line">git cherry-pick ..</span><br><span class="line">git checkout two</span><br><span class="line">git cherry-pick ..</span><br><span class="line">git branch -f three c2</span><br></pre></td></tr></table></figure></p><p>和标准答案一样哦</p><h1 id="7-Push-amp-Pull-——-Git-远程仓库！"><a href="#7-Push-amp-Pull-——-Git-远程仓库！" class="headerlink" title="7. Push &amp; Pull —— Git 远程仓库！"></a>7. Push &amp; Pull —— Git 远程仓库！</h1><p>是时候分享你的代码了，让编码变得社交化吧</p><h2 id="7-1-Git-Clone"><a href="#7-1-Git-Clone" class="headerlink" title="7.1. Git Clone"></a>7.1. Git Clone</h2><p>远程仓库<br>远程仓库并不复杂, 在如今的云计算盛行的世界很容易把远程仓库想象成一个富有魔力的东西, 但实际上它们只是你的仓库在另个一台计算机上的拷贝。你可以通过因特网与这台计算机通信 —— 也就是增加或是获取提交记录</p><p>话虽如此, 远程仓库却有一系列强大的特性</p><p>首先也是最重要的的点, 远程仓库是一个强大的备份。本地仓库也有恢复文件到指定版本的能力, 但所有的信息都是保存在本地的。有了远程仓库以后，即使丢失了本地所有数据, 你仍可以通过远程仓库拿回你丢失的数据。</p><p>还有就是, 远程让代码社交化了! 既然你的项目被托管到别的地方了, 你的朋友可以更容易地为你的项目做贡献(或者拉取最新的变更)</p><p>现在用网站来对远程仓库进行可视化操作变得越发流行了(像 Github 或 Phabricator), 但远程仓库永远是这些工具的顶梁柱, 因此理解其概念非常的重要!<br>我们创建远程仓库的命令<br>直到现在, 教程都聚焦于本地仓库的操作（branch、merge、rebase 等等）。但我们现在需要学习远程仓库的操作 —— 我们需要一个配置这种环境的命令, 它就是 git clone。 从技术上来讲，git clone 命令在真实的环境下的作用是在本地创建一个远程仓库的拷贝（比如从 github.com）。 但在我们的教程中使用这个命令会有一些不同 —— 它会在远程创建一个你本地仓库的副本。显然这和真实命令的意思刚好相反，但是它帮咱们把本地仓库和远程仓库关联到了一起，在教程中就凑合着用吧。</p><p>git clone</p><p>就是它了! 现在我们有了一个自己项目的远程仓库。除了远程仓库使用虚线之外, 它们几乎没有什么差别 —— 在后面的关卡中, 你将会学习怎样在本地仓库和远程仓库间分享工作成果。<br>要完成本关, 用 git clone 复制下你的仓库就可以了。后续的课程我们会正式地学习</p><h2 id="7-2-远程分支"><a href="#7-2-远程分支" class="headerlink" title="7.2. 远程分支"></a>7.2. 远程分支</h2><p>远程分支<br>既然你已经看过 git clone 命令了，咱们深入地看一下发生了什么。</p><p>你可能注意到的第一个事就是在我们的本地仓库多了一个名为 o/master 的分支, 这种类型的分支就叫远程分支。由于远程分支的特性导致其拥有一些特殊属性。</p><p>远程分支反映了远程仓库(在你上次和它通信时)的状态。这会有助于你理解本地的工作与公共工作的差别 —— 这是你与别人分享工作成果前至关重要的一步.</p><p>远程分支有一个特别的属性，在你检出时自动进入分离 HEAD 状态。Git 这么做是出于不能直接在这些分支上进行操作的原因, 你必须在别的地方完成你的工作, （更新了远程分支之后）再用远程分享你的工作成果。</p><p>为什么有 o/？<br>你可能想问这些远程分支的前面的 o/ 是什么意思呢？好吧, 远程分支有一个命名规范 —— 它们的格式是:</p><p><code>&lt;remote name&gt;/&lt;branch name&gt;</code><br>因此，如果你看到一个名为 o/master 的分支，那么这个分支就叫 master，远程仓库的名称就是 o。</p><p>大多数的开发人员会将它们主要的远程仓库命名为 origin，并不是 o。这是因为当你用 git clone 某个仓库时，Git 已经帮你把远程仓库的名称设置为 origin 了</p><p>不过 origin 对于我们的 UI 来说太长了，因此不得不使用简写 o :) 但是要记住, 当你使用真正的 Git 时, 你的远程仓库默认为 origin!</p><p>说了这么多，让我们看看实例。<br>如果检出远程分支会怎么样呢？<br><code>git checkout o/master;git commit</code></p><p>正如你所见，Git 变成了分离 HEAD 状态，当添加新的提交时 o/master 也不会更新。这是因为 o/master 只有在远程仓库中相应的分支更新了以后才会更新。<br>要通过本关，在 master 分支上做一次提交；然后检出 o/master，再做一提交。这有助于你理解远程分支的不同，他们的更新只是反映了远程的状态。<br>git commit<br>git checkout c1<br>git commit</p><h2 id="7-3-Git-Fetch"><a href="#7-3-Git-Fetch" class="headerlink" title="7.3. Git Fetch"></a>7.3. Git Fetch</h2><p>Git Fetch<br>Git 远程仓库相当的操作实际可以归纳为两点：向远程仓库传输数据以及从远程仓库获取数据。既然我们能与远程仓库同步，那么就可以分享任何能被 Git 管理的更新（因此可以分享代码、文件、想法、情书等等）。</p><p>本节课我们将学习如何从远程仓库获取数据 —— 命令如其名，它就是 git fetch。</p><p>你会看到当我们从远程仓库获取数据时, 远程分支也会更新以反映最新的远程仓库。在上一了我们已经提及过这一点了。</p><p> Git示范<br>在解释 git fetch 前，我们先看看实例。这里我们有一个远程仓库, 它有两个我们本地仓库中没有的提交。</p><p><code>git fetch</code></p><p>就是这样了! C2,C3 被下载到了本地仓库，同时远程分支 o/master 也被更新，反映到了这一变化</p><p>git fetch 做了些什么<br>git fetch 完成了仅有的但是很重要的两步:</p><p>从远程仓库下载本地仓库中缺失的提交记录<br>更新远程分支指针(如 o/master)<br>git fetch 实际上将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态。</p><p>如果你还记得上一节课程中我们说过的，远程分支反映了远程仓库在你最后一次与它通信时的状态，git fetch 就是你与远程仓库通信的方式了！希望我说的够明白了，你已经了解 git fetch 与远程分支之间的关系了吧。</p><p>git fetch 通常通过互联网（使用 http:// 或 git:// 协议) 与远程仓库通信。</p><p>git fetch 不会做的事</p><ul><li>不会改变你本地仓库的状态。</li><li>不会更新你的 master 分支。</li><li>不会修改你磁盘上的文件。</li></ul><p>理解这一点很重要，因为许多开发人员误以为执行了 git fetch 以后，他们本地仓库就与远程仓库同步了。它可能已经将进行这一操作所需的所有数据都下载了下来，但是并没有修改你本地的文件。我们在后面的课程中将会讲解能完成该操作的命令 :D</p><p>所以, 你可以将 git fetch 的理解为单纯的下载操作。</p><p>要完成本关，只需用 git fetch 下载所有的提交！</p><h2 id="7-4-Git-Pull"><a href="#7-4-Git-Pull" class="headerlink" title="7.4. Git Pull"></a>7.4. Git Pull</h2><p>git pull origin master<br>Git Pull<br>既然我们已经知道了如何用 git fetch 获取远程的数据, 现在我们学习如何将这些变化更新到我们的工作当中。<br>其实有很多方法的 —— 当远程分支中有新的提交时，你可以像合并本地分支那样来合并远程分支。也就是说就是你可以执行以下命令:</p><p>git cherry-pick o/master<br>git rebase o/master<br>git merge o/master<br>等等<br>实际上，由于先抓取更新再合并到本地分支这个流程很常用，因此 Git 提供了一个专门的命令来完成这两个操作。它就是我们要讲的 git pull。<br>我们先来看看 fetch、merge 依次执行的效果<br><a href="http://mmbiz.qpic.cn/mmbiz_jpg/RpaIDoV1UhaWZZKJsUa8UULL7DsZselF0cSwxdkFsVEibtib0QaSd7TLZumAGGFV4IHe6zDDfoGdwZkiaBIyDGTxQ/0" target="_blank" rel="noopener">http://mmbiz.qpic.cn/mmbiz_jpg/RpaIDoV1UhaWZZKJsUa8UULL7DsZselF0cSwxdkFsVEibtib0QaSd7TLZumAGGFV4IHe6zDDfoGdwZkiaBIyDGTxQ/0</a><br>git fetch;git merge o/master;</p><p>星号依然绑定在master上，o/master随fetch向前一步，master随merge向前一步<br>git fetch 下载了 C3<br>git merge o/master 合并了这一提交记录<br>master 分支包含了远程仓库中的更新（在本例中远程仓库名为 origin）<br>git pull<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同样的结果！这清楚地说明了 git pull 就是 git fetch 和 git merge &lt;just-fetched-branch&gt; 的缩写！</span><br></pre></td></tr></table></figure></p><h2 id="7-5-模拟团队合作"><a href="#7-5-模拟团队合作" class="headerlink" title="7.5. 模拟团队合作"></a>7.5. 模拟团队合作</h2><p>这里有一件棘手的事 —— 为了接下来的课程, 我们需要先教你如何制造远程仓库的变更。</p><p>这意味着，我们需要“假装”你的同事、朋友、合作伙伴更新了远程仓库，有可能是某个特定的分支，或是几个提交记录。</p><p>为了做到这点，我们引入一个自造命令 git fakeTeamwork！它的名称已经说明了一切，先看演示..</p><p>fakeTeamwork 默认操作就是在远程仓库的 master 分支上做一次提交。</p><p>完成了 —— 远程仓库增加了一个新提交，我们还没有下载它，因为我们还没有执行 git fetch。<br>git fakeTeamwork</p><p>完成了 —— 远程仓库增加了一个新提交，我们还没有下载它，因为我们还没有执行 git fetch。<br>你还可以指定提交的分支或是数量，只需要在命令后加上它们就可以了。</p><p>git fakeTeamwork foo 3</p><ul><li>foo：分支名</li></ul><p>通过一个命令，我们就模拟队友推送了 3 个提交记录到远程仓库的 foo 分支。</p><p>接下来的关卡会相当的困难，所以在本关会让你做许多事情，先来热热身。</p><p>克隆一个远程仓库（用 git clone），再在刚创建的远程仓库中模拟一些修改，然后在你自己的本地分支上做一些提交，再拉取远程仓库的变更。这看起来像是包含了好几节的课程。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span></span><br><span class="line">git fakeTeamwork 2</span><br><span class="line">git commit</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></p><h2 id="7-6-Git-Push"><a href="#7-6-Git-Push" class="headerlink" title="7.6. Git Push"></a>7.6. Git Push</h2><p>OK，我们已经学过了如何从远程仓库获取更新并合并到本地的分支当中。这非常棒……但是我如何与大家分享我的成果呢？</p><p>嗯，上传自己分享内容与下载他人的分享刚好相反，那与 git pull 相反的命令是什么呢？git push！</p><p>git push 负责将你的变更上传到指定的远程仓库，并在远程仓库上合并你的新提交记录。一旦 git push 完成, 你的朋友们就可以从这个远程仓库下载你分享的成果了！</p><p>你可以将 git push 想象成发布你成果的命令。它有许多应用技巧，稍后我们会了解到，但是咱们还是先从基础的开始吧……</p><p>注意 —— git push 不带任何参数时的行为与 Git 的一个名为 push.default 的配置有关。它的默认值取决于你正使用的 Git 的版本，但是在教程中我们使用的是 upstream。 这没什么太大的影响，但是在你的项目中进行推送之前，最好检查一下这个配置。<br>这里我们准备了一些远程仓库中没有的提交记录, 咱们开始先上传吧!</p><p>git push<br>过去了, 远程仓库接收了 C2，远程仓库中的 master 分支也被更新到指向 C2 了，我们的远程分支 (o/master) 也同样被更新了。所有的分支都同步了！</p><p>o/master与远程master同步<br>要完成本关，需要向远程仓库分享两个提交记录。拿出十二分精神吧，后面的课程还会更难哦！</p><h2 id="7-7-偏离的提交历史"><a href="#7-7-偏离的提交历史" class="headerlink" title="7.7. 偏离的提交历史"></a>7.7. 偏离的提交历史</h2><p>现在我们已经知道了如何从其它地方 pull 提交记录，以及如何 push 我们自己的变更。看起来似乎没什么难度，但是为何还会让人们如此困惑呢？<br>困难来自于远程库提交历史的偏离。在讨论这个问题的细节前，我们先来看一个例子……<br>假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目旧版的代码，与远程仓库最新的代码不匹配了。</p><p>这种情况下, git push 就不知道该如何操作了。如果你执行 git push，Git 应该让远程仓库回到星期一那天的状态吗？还是直接在新代码的基础上添加你的代码，异或由于你的提交已经过时而直接忽略你的提交？</p><p>因为这情况（历史偏离）有许多的不确定性，Git 是不会允许你 push 变更的。实际上它会强制你先合并远程最新的代码，然后才能分享你的工作。</p><h3 id="7-7-1-git-push"><a href="#7-7-1-git-push" class="headerlink" title="7.7.1. git push"></a>7.7.1. git push</h3><p>为命令失败了！git push 失败是因为你最新提交的 C3 基于远程分支中的 C1。而远程仓库中该分支已经更新到 C2 了，所以 Git 拒绝了你的推送请求。<br>你需要做的就是使你的工作基于【最新】的远程分支。</p><h3 id="7-7-2-git-fetch-git-rebase-o-master-git-push"><a href="#7-7-2-git-fetch-git-rebase-o-master-git-push" class="headerlink" title="7.7.2. git fetch; git rebase o/master;git push"></a>7.7.2. git fetch; git rebase o/master;git push</h3><p>git rebase o/master 把当前commit和分支复制到o/master下</p><p>我们用 git fetch 更新了本地仓库中的远程分支，然后用 rebase 将我们的工作移动到最新的提交记录下，最后再用 git push 推送到远程仓库。<br>尽管 git merge 不会移动你的工作（它会创建新的合并提交），但是它会告诉 Git 你已经合并了远程仓库的所有变更。这是因为远程分支现在是你本地分支的祖先，也就是说你的提交已经包含了远程分支的所有变化。</p><h3 id="7-7-3-git-fetch-git-merge-o-master-git-push"><a href="#7-7-3-git-fetch-git-merge-o-master-git-push" class="headerlink" title="7.7.3. git fetch; git merge o/master;git push"></a>7.7.3. git fetch; git merge o/master;git push</h3><p>我们用 git fetch 更新了本地仓库中的远程分支，然后合并了新变更到我们的本地分支（为了包含远程仓库的变更），最后我们用 git push 把工作推送到远程仓库</p><h3 id="7-7-4-git-pull-–rebase-git-push"><a href="#7-7-4-git-pull-–rebase-git-push" class="headerlink" title="7.7.4. git pull –rebase;git push"></a>7.7.4. git pull –rebase;git push</h3><p>git pull 就是 fetch 和 merge 的简写<br>git pull –rebase 就是 fetch 和 rebase 的简写！</p><h3 id="7-7-5-git-pull-git-push"><a href="#7-7-5-git-pull-git-push" class="headerlink" title="7.7.5. git pull;git push"></a>7.7.5. git pull;git push</h3><p>由 fetch、rebase/merge 和 push 组成的工作流很普遍。后续课程我们会讲解更复杂的工作流，不过现在我们先解决这个关卡吧。</p><p>要完成本关，你需要完成以下几步：</p><p>克隆你的仓库<br>模拟一次远程提交（fakeTeamwork）<br>完成一次本地提交<br>用 rebase 发布你的工作<br>git clone<br>git fakeTeamwork<br>git commit<br>git pull –rebase<br>git push</p><h1 id="8-关于-origin-和它的周边-——-Git-远程仓库高级操作"><a href="#8-关于-origin-和它的周边-——-Git-远程仓库高级操作" class="headerlink" title="8. 关于 origin 和它的周边 —— Git 远程仓库高级操作"></a>8. 关于 origin 和它的周边 —— Git 远程仓库高级操作</h1><p>做一名仁慈的独裁者一定会很有趣……</p><h2 id="8-1-推送主分支"><a href="#8-1-推送主分支" class="headerlink" title="8.1. 推送主分支"></a>8.1. 推送主分支</h2><p>既然你应该很熟悉 fetch、pull、push 了，现在我们要通过一个新的工作流来测试你的这些技能。</p><p>在大型项目中开发人员通常会在（从 master 上分出来的）特性分支上工作，工作完成后只做一次集成。这跟前面课程的描述很相像（把 side 分支推送到远程仓库），不过本节我们会深入一些.</p><p>但是有些开发人员只在 master 上做 push、pull —— 这样的话 master 总是最新的，始终与远程分支 (o/master) 保持一致。</p><p>对于接下来这个工作流，我们集成了两个步骤：</p><p>将特性分支集成到 master 上<br>推送并更新远程分支<br>这个关卡的 Boss 很厉害 —— 以下是通关提示：</p><p>这里共有三个特性分支 —— side1 side2 和 side3<br>我需要将这三分支按顺序推送到远程仓库<br>因为远程仓库已经被更新过了，所以我们还要把那些工作合并过来<br>:O 紧张了？祝你好运！完成了本关, 你就向目标又迈近了一大步啦！<br>git checkout master<br>git pull<br>git cherry-pick c2<br>git cherry-pick c3 c4<br>git cherry-pick c5 c6 c7<br>git push<br>三个git cherry-pick 可合并为一句</p><h2 id="8-2-合并远程仓库"><a href="#8-2-合并远程仓库" class="headerlink" title="8.2. 合并远程仓库"></a>8.2. 合并远程仓库</h2><p>为什么不用 merge 呢?<br>为了 push 新变更到远程仓库，你要做的就是包含远程仓库中最新变更。意思就是只要你的本地分支包含了远程分支（如 o/master）中的最新变更就可以了，至于具体是用 rebase 还是 merge，并没有限制。</p><p>那么既然没有规定限制，为何前面几节都在着重于 rebase 呢？为什么在操作远程分支时不喜欢用 merge 呢？<br>在开发社区里，有许多关于 merge 与 rebase 的讨论。以下是关于 rebase 的优缺点：</p><p>优点:</p><p>Rebase 使你的提交树变得很干净, 所有的提交都在一条线上<br>缺点:</p><p>Rebase 修改了提交树的历史<br>比如, 提交 C1 可以被 rebase 到 C3 之后。这看起来 C1 中的工作是在 C3 之后进行的，但实际上是在 C3 之前。</p><p>一些开发人员喜欢保留提交历史，因此更偏爱 merge。而其他人（比如我自己）可能更喜欢干净的提交树，于是偏爱 rebase。仁者见仁，智者见智。 :D</p><p>本关，我们还是解决上一关卡中的问题，但是要用 merge 替换 rebase。这显然有点画蛇添足，但这只是为了更好的说明上面的观点。<br>git checkout master<br>git pull<br>git merge side1<br>git merge side2<br>git merge side3<br>git push<br>merge历史，rebase树</p><h2 id="8-3-远程追踪"><a href="#8-3-远程追踪" class="headerlink" title="8.3. 远程追踪"></a>8.3. 远程追踪</h2><p>远程跟踪分支<br>在前几节课程中有件事儿挺神奇的，Git 好像知道 master 与 o/master 是相关的。当然这些分支的名字是相似的，可能会让你觉得是依此将远程分支 master 和本地的 master 分支进行了关联。这种关联在以下两种情况下可以清楚地得到展示：</p><p>pull 操作时, 提交记录会被先下载到 o/master 上，之后再合并到本地的 master 分支。隐含的合并目标由这个关联确定的。<br>push 操作时, 我们把工作从 master 推到远程仓库中的 master 分支(同时会更新远程分支 o/master) 。这个推送的目的地也是由这种关联确定的！<br>直接了当地讲，master 和 o/master 的关联关系就是由分支的“remote tracking”属性决定的。master 被设定为跟踪 o/master —— 这意味着为 master 分支指定了推送的目的地以及拉取后合并的目标。</p><p>你可能想知道 master 分支上这个属性是怎么被设定的，你并没有用任何命令指定过这个属性呀！好吧, 当你克隆仓库的时候, Git 就自动帮你把这个属性设置好了。</p><p>当你克隆时, Git 会为远程仓库中的每个分支在本地仓库中创建一个远程分支（比如 o/master）。然后再创建一个跟踪远程仓库中活动分支的本地分支，默认情况下这个本地分支会被命名为 master。</p><p>克隆完成后，你会得到一个本地分支（如果没有这个本地分支的话，你的目录就是“空白”的），但是可以查看远程仓库中所有的分支（如果你好奇心很强的话）。这样做对于本地仓库和远程仓库来说，都是最佳选择。</p><p>这也解释了为什么会在克隆的时候会看到下面的输出：</p><p>local branch “master” set to track remote branch “o/master”<br>我能自己指定这个属性吗？<br>当然可以啦！你可以让任意分支跟踪 o/master, 然后该分支会像 master 分支一样得到隐含的 push 目的地以及 merge 的目标。 这意味着你可以在分支 totallyNotMaster 上执行 git push，将工作推送到远程仓库的 master 分支上。</p><p>有两种方法设置这个属性，第一种就是通过远程分支检出一个新的分支，执行:</p><p>git checkout -b totallyNotMaster o/master</p><p>就可以创建一个名为 totallyNotMaster 的分支，它跟踪远程分支 o/master。<br>闲话少说，咱们先看看演示！我们检出一个名叫 foo 的新分支，让其跟踪远程仓库中的 master</p><h3 id="8-3-1-git-checkout-b-foo-o-master-git-pull"><a href="#8-3-1-git-checkout-b-foo-o-master-git-pull" class="headerlink" title="8.3.1. git checkout -b foo o/master;git pull"></a>8.3.1. git checkout -b foo o/master;git pull</h3><ul><li>星号转移到foo </li><li>git pull使master与远程同步</li></ul><h3 id="8-3-2-git-checkout-b-foo-o-master-git-commit-git-push"><a href="#8-3-2-git-checkout-b-foo-o-master-git-commit-git-push" class="headerlink" title="8.3.2. git checkout -b foo o/master;git commit;git push"></a>8.3.2. git checkout -b foo o/master;git commit;git push</h3><p>第二种方法<br>另一种设置远程追踪分支的方法就是使用：git branch -u 命令，执行：</p><p>git branch -u o/master foo</p><p>这样 foo 就会跟踪 o/master 了。如果当前就在 foo 分支上, 还可以省略 foo：</p><p>git branch -u o/master</p><h3 id="8-3-3-git-checkout-u-foo-o-master-git-commit-git-push"><a href="#8-3-3-git-checkout-u-foo-o-master-git-commit-git-push" class="headerlink" title="8.3.3. git checkout -u foo o/master;git commit;git push"></a>8.3.3. git checkout -u foo o/master;git commit;git push</h3><p>OK! 本节我们在不检出 master 分支的情况下将工作推送到的远程仓库中的 master 分支上。因为这是高级课程, 就不做过多的提示了! :P<br>只需4步，我用了6步</p><h2 id="8-4-Git-push-的参数"><a href="#8-4-Git-push-的参数" class="headerlink" title="8.4. Git push 的参数"></a>8.4. Git push 的参数</h2><p>很好! 既然你知道了远程跟踪分支，我们可以开始揭开 git push、fetch 和 pull 的神秘面纱了。我们会逐个介绍这几个命令，它们在理念上是非常相似的。</p><p>首先来看 git push。在远程跟踪课程中，你已经学到了 Git 是通过当前检出分支的属性来确定远程仓库以及要 push 的目的地的。这是未指定参数时的行为，我们可以为 push 指定参数，语法是：</p><p>git push <remote> <place><br>git push origin master<br>切到本地仓库中的“master”分支，获取所有的提交，再到远程仓库“origin”中找到“master”分支，将远程仓库中没有的提交记录都添加上去，搞定之后告诉我。</place></remote></p><p>我们通过“place”参数来告诉 Git 提交记录来自于 master, 要推送到远程仓库中的 master。它实际就是要同步的两个仓库的位置。</p><p>需要注意的是，因为我们通过指定参数告诉了 Git 所有它需要的信息, 所以它就忽略了我们所检出的分支的属性！<br>我们看看指定参数的例子。注意下我们当前检出的位置。</p><h3 id="8-4-1-git-checkout-c0-git-push-origin-master"><a href="#8-4-1-git-checkout-c0-git-push-origin-master" class="headerlink" title="8.4.1. git checkout c0;git push origin master"></a>8.4.1. git checkout c0;git push origin master</h3><h3 id="8-4-2-git-checkout-c0-git-push"><a href="#8-4-2-git-checkout-c0-git-push" class="headerlink" title="8.4.2. git checkout c0;git push"></a>8.4.2. git checkout c0;git push</h3><p>本关我们要更新远程仓库中的 foo 和 master, 但是 git checkout 被禁用了！</p><p>注意：远程分支使用 o/ 开头是因为 origin/ 对于 UI 来说太长了。不用太在意这个，直接用 origin 作为远程仓库的名称就可以了。</p><p>git push origin master<br>git push origin foo</p><h2 id="8-5-Git-push-参数-2"><a href="#8-5-Git-push-参数-2" class="headerlink" title="8.5. Git push 参数 2"></a>8.5. Git push 参数 2</h2><p><place>参数详解<br>还记得之前课程说的吧，当为 git push 指定 place 参数为 master 时，我们同时指定了提交记录的来源和去向。</place></p><p>你可能想问 —— 如果来源和去向分支的名称不同呢？比如你想把本地的 foo 分支推送到远程仓库中的 bar 分支。</p><p>哎，很遗憾 Git 做不到…… 开个玩笑，别当真！当然是可以的啦 :) Git 拥有超强的灵活性（有点过于灵活了）</p><p>接下来咱们看看是怎么做的……<br>要同时为源和目的地指定 <place> 的话，只需要用冒号 : 将二者连起来就可以了：</place></p><p>git push origin <source>:<destination></destination></p><p>这个参数实际的值是个 refspec，“refspec” 是一个自造的词，意思是 Git 能识别的位置（比如分支 foo 或者 HEAD~1）</p><p>一旦你指定了独立的来源和目的地，就可以组织出言简意赅的远程操作命令了，让我们看看演示！</p><h3 id="8-5-1-git-push-origin-foo-master"><a href="#8-5-1-git-push-origin-foo-master" class="headerlink" title="8.5.1. git push origin foo^:master"></a>8.5.1. git push origin foo^:master</h3><p>如果你要推送到的目的分支不存在会怎么样呢？没问题！Git 会在远程仓库中根据你提供的名称帮你创建这个分支！</p><p>在这个关卡中，试着完成目标窗口展示的提交树，记住参数格式哟：</p><p><source>:<destination><br>git push origin master^:foo<br>git push origin foo:master</destination></p><h2 id="8-6-Git-fetch-的参数"><a href="#8-6-Git-fetch-的参数" class="headerlink" title="8.6. Git fetch 的参数"></a>8.6. Git fetch 的参数</h2><p>我们刚学习了 git push 的参数，很酷的 <place> 参数，还有用冒号分隔的 refspecs（<source>:<destination>）。 这些参数可以用于 git fetch 吗？</destination></place></p><p>你猜中了！git fetch 的参数和 git push 极其相似。他们的概念是相同的，只是方向相反罢了（因为现在你是下载，而非上传）</p><p>让我们逐个讨论下这些概念……</p><p><place> 参数<br>如果你像如下命令这样为 git fetch 设置 <place> 的话：</place></place></p><p>git fetch origin foo</p><p>Git 会到远程仓库的 foo 分支上，然后获取所有本地不存在的提交，放到本地的 o/foo 上。</p><p>来看个例子（还是前面的例子，只是命令不同了）</p><p>通过指定 place…</p><h3 id="8-6-1-git-fecth-origin-foo"><a href="#8-6-1-git-fecth-origin-foo" class="headerlink" title="8.6.1. git fecth origin foo"></a>8.6.1. git fecth origin foo</h3><p>只复制和移动了o/foo<br>相当于 git fecth origin foo:o/foo<br>你可能会好奇 —— 为何 Git 会将新提交放到 o/foo 而不是放到我本地的 foo 分支呢？之前不是说这样的 <place> 参数就是同时应用于本地和远程的位置吗？</place></p><p>好吧, 本例中 Git 做了一些特殊处理，因为你可能在 foo 分支上的工作还未完成，你也不想弄乱它。还记得在 git fetch 课程里我们讲到的吗 —— 它不会更新你的本地的非远程分支, 只是下载提交记录（这样, 你就可以对远程分支进行检查或者合并了）。<br>“如果我们指定 <source>:<destination> 会发生什么呢？”</destination></p><p>如果你觉得直接更新本地分支很爽，那你就用冒号分隔的 refspec 吧。不过，你不能在当前检出的分支上干这个事，但是其它分支是可以的。</p><p>这里有一点是需要注意的 —— source 现在指的是远程仓库中的位置，而 <destination> 才是要放置提交的本地仓库的位置。它与 git push 刚好相反，这是可以讲的通的，因为我们在往相反的方向传送数据。</destination></p><p>理论上虽然行的通，但开发人员很少这么做。我在这里介绍它主要是为了从概念上说明 fetch 和 push 的相似性，只是方向相反罢了。<br>带上参数后不移动o</p><h3 id="8-6-2-git-fetch-origin-foo-1-bar"><a href="#8-6-2-git-fetch-origin-foo-1-bar" class="headerlink" title="8.6.2. git fetch origin foo~1:bar"></a>8.6.2. git fetch origin foo~1:bar</h3><p>哇! 看见了吧, Git 将 foo~1 解析成一个 origin 仓库的位置，然后将那些提交记录下载到了本地的 bar 分支（一个本地分支）上。注意由于我们指定了目标分支，foo 和 o/foo 都没有被更新。<br>如果执行命令前目标分支不存在会怎样呢？我们看一下上个对话框中没有 bar 分支的情况。</p><p>看见了吧，跟 git push 一样，Git 会在 fetch 前自己创建立本地分支, 就像是 Git 在 push 时，如果远程仓库中不存在目标分支，会自己在建立一样。</p><p>没有参数呢?</p><p>如果 git fetch 没有参数，它会下载所有的提交记录到各个远程分支……</p><p>fetch移动的是o/，此时本地master和foo位置未变<br>好, 说得太多了！要完成本关，抓取目标窗口中指定的提交记录，使用这些魔幻的命令吧！<br>使用 fetch 时, 你必须指定 source 和 destination。 注意一下目标窗口, 因为提交对象的 ID 可能会变哦!<br>git fetch origin master:foo<br>git fetch origin foo^:master<br>git checkout foo<br>git merge master</p><h2 id="8-7-没有-source-的-source"><a href="#8-7-没有-source-的-source" class="headerlink" title="8.7. 没有 source 的 source"></a>8.7. 没有 source 的 source</h2><p>古怪的 <source><br>Git 有两种关于 <source> 的用法是比较诡异的，即你可以在 git push 或 git fetch 时不指定任何 source，方法就是仅保留冒号和 destination 部分，source 部分留空。</p><p>git push origin :side<br>git fetch origin :bugFix<br>我们分别来看一下这两条命令的作用……</p><h3 id="8-7-1-git-push-origin-foo"><a href="#8-7-1-git-push-origin-foo" class="headerlink" title="8.7.1. git push origin :foo"></a>8.7.1. git push origin :foo</h3><p>就是这样子, 我们通过给 push 传空值 source，成功删除了远程仓库中的 foo 分支, 这真有意思…</p><h3 id="8-7-2-git-fetch-origin-bar"><a href="#8-7-2-git-fetch-origin-bar" class="headerlink" title="8.7.2. git fetch origin :bar"></a>8.7.2. git fetch origin :bar</h3><p>如果 fetch 空 <source> 到本地，会在本地创建一个新分支。<br>很神奇吧！但无论怎么说, 这就是 Git！</p><p>这个关卡很容易 —— 只要删除一个远程的分支, 再用 git fetch 在本地创建一个新分支就可以了！<br>git push origin :foo<br>git fetch origin :bar</p><h2 id="8-8-Git-pull-的参数"><a href="#8-8-Git-pull-的参数" class="headerlink" title="8.8. Git pull 的参数"></a>8.8. Git pull 的参数</h2><p>既然你已经掌握关于 git fetch 和 git push 参数的方方面面了，关于 git pull 几乎没有什么可以讲的了 :)</p><p>因为 git pull 到头来就是 fetch 后跟 merge 的缩写。你可以理解为用同样的参数执行 git fetch，然后再 merge 你所抓取到的提交记录。</p><p>还可以和其它更复杂的参数一起使用, 来看一些例子:<br>以下命令在 Git 中是等效的:</p><p>git pull origin foo 相当于：</p><p>git fetch origin foo; git merge o/foo</p><p>还有…</p><p>git pull origin bar~1:bugFix 相当于：</p><p>git fetch origin bar~1:bugFix; git merge bugFix</p><p>看到了? git pull 实际上就是 fetch + merge 的缩写, git pull 唯一关注的是提交最终合并到哪里（也就是为 git fetch 所提供的 destination 参数）</p><p>一起来看个例子吧：</p><h3 id="8-8-1-git-pull-origin-master"><a href="#8-8-1-git-pull-origin-master" class="headerlink" title="8.8.1. git pull origin master"></a>8.8.1. git pull origin master</h3><p>如果我们指定要抓取的 place，所有的事情都会跟之前一样发生，只是增加了 merge 操作</p><p>看到了吧! 通过指定 master 我们更新了 o/master。然后将 o/master merge 到我们的检出位置，无论我们当前检出的位置是哪。</p><p>pull 也可以用 source:destination 吗? 当然喽, 看看吧:</p><p>哇, 这个命令做的事情真多。它先在本地创建了一个叫 foo 的分支，从远程仓库中的 master 分支中下载提交记录，并合并到 foo，然后再 merge 到我们的当前检出的分支 bar 上。操作够多的吧？！</p><h3 id="8-8-2-git-pull-origin-master-foo"><a href="#8-8-2-git-pull-origin-master-foo" class="headerlink" title="8.8.2. git pull origin master:foo"></a>8.8.2. git pull origin master:foo</h3><p>把远程master复制到本地foo分支，并与当前星号分支合并。foo是与远程master同步的。此时本地master和o/master均没变化</p><p>o/master遇:时不与远程同步。</p><p>你需要下载一些提交，然后创建一些新分支，再合并这些分支到其它分支,但这用不了几个命令 :P<br>git pull origin bar:foo<br>git pull origin master:side</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository" target="_blank" rel="noopener">https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository</a><br><a href="https://git-scm.com/book/zh/v2/Git-基础-记录每次更新到仓库" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/Git-基础-记录每次更新到仓库</a><br>下列哪个git命令不是合并代码用的：<em>|4203f518e5124ae89edc33b2149b85e7<br>下列关于git命令的表述正确的选项有（）</em>小米笔试题|c727e9ca97dd4e3fa4a60c4e264bb244<br>常用的git操作有以下哪些(&nbsp;)_用友笔试题|510cc401ca394fe7b498b5281025ac0b  </p><p>gitdesk cannot work  use git instead</p><p><source lang="git"></p><h1 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h1><p>git remote -v 【查看远程仓库】<br>git fetch origin master:temp 【从远程的origin仓库的master分支下载到本地，并新建一个temp分支】<br>git diff temp 【查看temp分支与本地原有分支的不同】<br>git merge temp 【将temp分支和本地分支合并】<br>git branch -d temp 【删除temp分支】</p><p>git remote add origin <a href="https://github.com/cjql/OxfordDictionary" target="_blank" rel="noopener">https://github.com/cjql/OxfordDictionary</a> 【将远程仓库设为origin。】<br>git pull origin master 【相当于git fetch 和 git merge。如果master正好是远程仓库】<br>git push<br><br>git远程分支与本地分支合并 <a href="https://blog.csdn.net/loongshawn/article/details/78864039" target="_blank" rel="noopener">https://blog.csdn.net/loongshawn/article/details/78864039</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 软件开发 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub</title>
      <link href="/GitHub/"/>
      <url>/GitHub/</url>
      
        <content type="html"><![CDATA[<p>github学习笔记。</p><ol><li>专注于完成现有的功能比完成新的开始更有价值。（一个善终强于无数个善始）</li><li><strong>不要直接提交给主分支。</strong> 有太多的分支，先集中解决其中一两个。</li><li>修故障，开新分支。添加新功能，开新分支。</li><li>好的经验法则，每个5~10分支提交一次。</li><li>提交信息：在做什么（向人展示你的工作），为什么做，为啥要采用你的提交。（description and detailed description）</li><li>WYSIWYG：所见即所得。WY死机。<a id="more"></a><h1 id="1-Git"><a href="#1-Git" class="headerlink" title="1. Git"></a>1. Git</h1><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1. 定义"></a>1.1. 定义</h2>Git是一种版本控制系统。能查看文件随历史编辑的变化情况。<h2 id="1-2-功能"><a href="#1-2-功能" class="headerlink" title="1.2. 功能"></a>1.2. 功能</h2></li><li>回退</li><li>大胆修改</li><li>修改原因</li><li>冲突解决</li><li>完整的历史记录</li><li>多分支历史记录</li><li>独立的多分支历史记录<h1 id="2-GitHub"><a href="#2-GitHub" class="headerlink" title="2. GitHub"></a>2. GitHub</h1>GitHub是一个网站，用于上传Git数据库的副本（存代码），也是功能强大的软件开发平台。可对代码及其修改进行说明、讨论和评估。</li><li>GitHub独立于Git的机制：<ol><li>共享库</li><li>fork</li><li>pull</li><li>issue</li><li>wiki<h1 id="3-GitHub与Git的区别"><a href="#3-GitHub与Git的区别" class="headerlink" title="3. GitHub与Git的区别"></a>3. GitHub与Git的区别</h1>GitHub的局限：</li></ol></li><li>重命名尤其是文件夹</li><li>只能在单个文件上修改</li><li>不能改写历史</li><li>不能在线解决冲突<br>Git的优势：</li><li>运行</li><li>测试</li><li>IDE</li><li>多个重命名</li><li>离线<h1 id="4-相关术语"><a href="#4-相关术语" class="headerlink" title="4. 相关术语"></a>4. 相关术语</h1></li><li>pulse、commit history：工作进展。</li><li>commit：保存修改。<ol><li>code和commit处都可以选分支，查看分支的历史要切换到待查的分支。</li></ol></li><li>commit message：提交消息。what、why、where（好在哪）。</li><li>branch：新功能。</li><li>feature branch：功能分支。</li><li>master：提供发布。</li><li>release branch：发布分支。Bug必修的分支。</li><li>tag：标签。可用于记录发布版本。</li><li>check out：查看。</li><li>issue：需求（旧Bug报告和新性能添加）。方向性讨论功能，跟踪缺陷。Pull Request时会自动创建Issue。数字是<strong>Open</strong>状态的Issue数。</li><li>PR(pull requests)：拉请求。请人复查分支历史流，并请求合并。最新变化和讨论。目前处于工作状态的所有不同功能。列表查看并管理。数字是Open的PR数量。正在做什么，每个修改的当前状态。<ol><li>merge PR ：仅对贡献者可见。</li><li>revert the merge：回退合并。</li><li>merge前可修改PR（修改时切换到PR所在的分支），以供审查和反馈。</li><li>merge前最好自己clone并运行。也可交给测试团队或部门做。</li><li>右边退订和订阅pull（评论、@、提交、合并、关闭）</li><li>多去评论，以帮助项目改善质量</li></ol></li><li>fork：分叉。到个人账户或组织。参与这个库开发的人数。可自行修改、提交。PR后可提交到最初的（被fork的）项目。</li><li>branch + PR（pull requests）：分支协作。</li><li>releases：发布的版本个数。</li><li>watch：关注。该仓库的更新信息都会显示在用户的公开活动中。</li><li>star：喜欢。做书签用。反应仓库的受关注程度。判断仓库热门程度的指标。</li><li>wiki：内容管理系统。便捷的链接页面。readme太长 ⇒ 用户文档和开发文档（待修bug、待加功能）。仅支持公开库。</li><li>settings。当前仓库的设置。<ol><li>Options</li><li>GitHub Pages：可直接在settings中设置。需公开库或者Pro。内容是readme的内容。</li><li>Collaborators</li><li>Branches</li><li>Webhooks：issue、PR自动发送到项目。（用于项目管理、Bug跟踪、自动化测试的持续集成服务器）</li><li>Notifications</li><li>Integrations &amp; services</li><li>Deploy keys</li><li>Secrets</li><li>Actions</li></ol></li><li><p>Insight</p><ol start="10"><li>SSH clone URL：克隆仓库时所需要的URL。</li><li>Referring sites：访客来之前访问的网站。</li><li>Pulse：显示该仓库最近的活动。issue和Pull Requests。周期可调。additions and deletions：增删行数。修改一行=增一行+删一行</li><li>Contributors：贡献值图（master exclude merge）。主图可分块拉取，以查看时间段内的情况。（私有库需额外添加合作者）</li><li>Community</li><li>Traffic：仅贡献者可见。访客信息。以图表形式显示该仓库的各项指标。</li><li>Commits：每周提交数。下图是上图被选中的周期块对应的日内分解图。</li><li>Code frequency：码频图。看显著变化，尤其是重构。</li><li>Dependency graph</li><li>Network：分支数。以图表行政显示仓库当前的状态及fork出的状态。同时会显示成员列表。</li><li>Forks：成员列表。</li></ol></li><li><p>顶层（根目录）、文件夹（目录）。</p><ol><li>../移动到父目录。</li><li>git只关心文件，无法将空文件夹添加到项目。<ol><li>约定：想建空文件夹就加.gitkeep文件。</li></ol></li></ol></li><li>readme.md：项目说明。（如何：安装、使用、自动化测试、对项目作贡献）</li><li>徽章（本质是用图片做显示的套娃）<a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a><ol start="21"><li>依赖项目及其版本</li><li>自动测试正在通过（passing）</li><li>依赖关系是最新的</li><li>适应的浏览器和操作系统版本</li><li><a href="https://github.com/twbs/bootstrap#status" target="_blank" rel="noopener">https://github.com/twbs/bootstrap#status</a></li><li><a href="https://bootstrap-slack.herokuapp.com/" target="_blank" rel="noopener"><img src="https://bootstrap-slack.herokuapp.com/badge.svg" alt="Slack"></a><br><a href="https://github.com/twbs/bootstrap/actions?workflow=Tests" target="_blank" rel="noopener"><img src="https://github.com/twbs/bootstrap/workflows/Tests/badge.svg" alt="Build Status"></a><br><a href="https://www.npmjs.com/package/bootstrap" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/v/bootstrap.svg" alt="npm version"></a><br><a href="https://rubygems.org/gems/bootstrap" target="_blank" rel="noopener"><img src="https://img.shields.io/gem/v/bootstrap.svg" alt="Gem version"></a><br><a href="https://atmospherejs.com/twbs/bootstrap" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/meteor-twbs%3Abootstrap-blue.svg" alt="Meteor Atmosphere"></a><br><a href="https://packagist.org/packages/twbs/bootstrap" target="_blank" rel="noopener"><img src="https://img.shields.io/packagist/vpre/twbs/bootstrap.svg" alt="Packagist Prerelease"></a><br><a href="https://www.nuget.org/packages/bootstrap/absoluteLatest" target="_blank" rel="noopener"><img src="https://img.shields.io/nuget/vpre/bootstrap.svg" alt="NuGet"></a><br><a href="https://david-dm.org/twbs/bootstrap?type=peer" target="_blank" rel="noopener"><img src="https://img.shields.io/david/peer/twbs/bootstrap.svg" alt="peerDependencies Status"></a><br><a href="https://david-dm.org/twbs/bootstrap?type=dev" target="_blank" rel="noopener"><img src="https://img.shields.io/david/dev/twbs/bootstrap.svg" alt="devDependency Status"></a><br><a href="https://coveralls.io/github/twbs/bootstrap?branch=master" target="_blank" rel="noopener"><img src="https://img.shields.io/coveralls/github/twbs/bootstrap/master.svg" alt="Coverage Status"></a><br><a href="https://github.com/twbs/bootstrap/tree/master/dist/css/bootstrap.min.css" target="_blank" rel="noopener"><img src="https://img.badgesize.io/twbs/bootstrap/master/dist/css/bootstrap.min.css?compression=gzip&amp;label=CSS+gzip+size" alt="CSS gzip size"></a><br><a href="https://github.com/twbs/bootstrap/tree/master/dist/js/bootstrap.min.js" target="_blank" rel="noopener"><img src="https://img.badgesize.io/twbs/bootstrap/master/dist/js/bootstrap.min.js?compression=gzip&amp;label=JS+gzip+size" alt="JS gzip size"></a><br><a href="https://www.browserstack.com/automate/public-build/SkxZcStBeExEdVJqQ2hWYnlWckpkNmNEY213SFp6WHFETWk2bGFuY3pCbz0tLXhqbHJsVlZhQnRBdEpod3NLSDMzaHc9PQ==--3d0b75245708616eb93113221beece33e680b229" target="_blank" rel="noopener"><img src="https://www.browserstack.com/automate/badge.svg?badge_key=SkxZcStBeExEdVJqQ2hWYnlWckpkNmNEY213SFp6WHFETWk2bGFuY3pCbz0tLXhqbHJsVlZhQnRBdEpod3NLSDMzaHc9PQ==--3d0b75245708616eb93113221beece33e680b229" alt="BrowserStack Status"></a><br><a href="#backers"><img src="https://img.shields.io/opencollective/backers/bootstrap.svg" alt="Backers on Open Collective"></a><br><a href="#sponsors"><img src="https://img.shields.io/opencollective/sponsors/bootstrap.svg" alt="Sponsors on Open Collective"></a><h1 id="5-区分"><a href="#5-区分" class="headerlink" title="5. 区分"></a>5. 区分</h1><h2 id="5-1-download-zip-与git-clone"><a href="#5-1-download-zip-与git-clone" class="headerlink" title="5.1. download zip 与git clone"></a>5.1. download zip 与git clone</h2>download zip：单纯下载到本地，无法查看日志和对仓库进行修改<br><a href="https://www.prestonlamb.com/blog/creating-a-docker-image-with-github-actions" target="_blank" rel="noopener">https://www.prestonlamb.com/blog/creating-a-docker-image-with-github-actions</a><h2 id="5-2-issue和PR"><a href="#5-2-issue和PR" class="headerlink" title="5.2. issue和PR"></a>5.2. issue和PR</h2></li></ol></li></ol><ul><li>issue：未做的，可以和master无关</li><li>PR：已修bug和新增功能，但尚未合并。必须有master和分支<h2 id="5-3-labels-和-milestone"><a href="#5-3-labels-和-milestone" class="headerlink" title="5.3. labels 和 milestone"></a>5.3. labels 和 milestone</h2></li></ul><ol><li>lables：可同时多个。可按字母和issue数排序。</li><li>milestone。只能有一个。可用来做deadline。可按更新时间、完成度（同milestone中关闭的issue占比）、到期、字母、issue数排序<h1 id="6-大文件传输"><a href="#6-大文件传输" class="headerlink" title="6. 大文件传输"></a>6. 大文件传输</h1><a href="https://git-lfs.github.com/" target="_blank" rel="noopener">https://git-lfs.github.com/</a></li><li>下载，安装</li><li>bash移动路径到对应仓库</li><li>git init</li><li>git lfs install</li><li>touch .gitattributes</li><li>git lfs track “*.pdf”</li><li>git lfs track “*.epub”</li><li>git add .gitattributes</li><li>git add *.epub</li><li>git commit -m “Add design file”</li><li>git remote add origin <a href="https://github.com/cqlj/allitebooks" target="_blank" rel="noopener">https://github.com/cqlj/allitebooks</a></li><li>git push origin master<br>重复6、8、9、10、11<pre><code class="bash">Git LFS has been disabled on your personal account cqlj because you’ve exceeded your data plan by at least 150%. Please purchase additional data packs to cover your bandwidth and storage usage:https://github.com/account/billing/data/upgradeCurrent usage as of 11 Jan 2020 09:20PM UTC:Bandwidth: 0.0 GB / 1 GB (0%)Storage: 7.37 GB / 1 GB (737%)</code></pre><h1 id="7-远程操控"><a href="#7-远程操控" class="headerlink" title="7. 远程操控"></a>7. 远程操控</h1>git init<br>echo “# allitebooks” &gt;&gt; README.md<br>git add README.md<br>git add -A(add all files)<br>git commit -m “first commit”<br>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:cqlj/allitebooks.git<h1 id="8-git-remote-v-for-checking-current-repository"><a href="#8-git-remote-v-for-checking-current-repository" class="headerlink" title="8. git remote -v (for checking current repository)"></a>8. git remote -v (for checking current repository)</h1><h1 id="9-git-pull-–rebase-origin-master"><a href="#9-git-pull-–rebase-origin-master" class="headerlink" title="9. git pull –rebase origin master"></a>9. git pull –rebase origin master</h1>git push -u origin master<h1 id="10-学习历程"><a href="#10-学习历程" class="headerlink" title="10. 学习历程"></a>10. 学习历程</h1><h2 id="10-1-Errors"><a href="#10-1-Errors" class="headerlink" title="10.1. Errors"></a>10.1. Errors</h2><h3 id="10-1-1-Updating-the-Git-index-failed"><a href="#10-1-1-Updating-the-Git-index-failed" class="headerlink" title="10.1.1. Updating the Git index failed."></a>10.1.1. Updating the Git index failed.</h3>参考：<a href="https://stackoverflow.com/questions/10573815/why-is-updating-the-git-index-failed-displayed" target="_blank" rel="noopener">stackoverflow</a><br>git config –global core.autocrlf false<br>Updating the Git index failed.  A rescan will be automatically started to resynchronize git-gui.<br>warning: LF will be replaced by CRLF in source/categories/index.md.<br>The file will have its original line endings in your working directory<h1 id="11-code"><a href="#11-code" class="headerlink" title="11. code"></a>11. code</h1>仓库文件列表。简要说明和URL<h2 id="11-1-commit-当前分支的提交历史"><a href="#11-1-commit-当前分支的提交历史" class="headerlink" title="11.1. commit 当前分支的提交历史"></a>11.1. commit 当前分支的提交历史</h2><h2 id="11-2-branches-分支列表"><a href="#11-2-branches-分支列表" class="headerlink" title="11.2. branches 分支列表"></a>11.2. branches 分支列表</h2><h2 id="11-3-releases-标签列表"><a href="#11-3-releases-标签列表" class="headerlink" title="11.3. releases 标签列表"></a>11.3. releases 标签列表</h2>可以将标签加入时的文件以归档形势（zip、tar.gz）下载到本地。软件在升级时一般需要打标签。<br><a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE</a><br>像其他版本控制系统（VCS）一样，Git 可以给历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 等等）。 在本节中，你将会学习如何列出已有的标签、如何创建新标签、以及不同类型的标签分别是什么。<h2 id="11-4-contributors-pull-requests被采纳的人数-作者"><a href="#11-4-contributors-pull-requests被采纳的人数-作者" class="headerlink" title="11.4. contributors pull requests被采纳的人数+作者"></a>11.4. contributors pull requests被采纳的人数+作者</h2><h1 id="12-删除不要的历史信息或敏感信息"><a href="#12-删除不要的历史信息或敏感信息" class="headerlink" title="12. 删除不要的历史信息或敏感信息"></a>12. 删除不要的历史信息或敏感信息</h1><a href="https://help.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository" target="_blank" rel="noopener">https://help.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository</a><br><a href="https://tecadmin.net/delete-commit-history-in-github/" target="_blank" rel="noopener">https://tecadmin.net/delete-commit-history-in-github/</a><br><a href="https://gist.github.com/stephenhardy/5470814" target="_blank" rel="noopener">https://gist.github.com/stephenhardy/5470814</a><br>[[HelpGitHub]] <a href="https://github.com/cjql/archive/wiki/_history" target="_blank" rel="noopener">https://github.com/cjql/archive/wiki/_history</a><br><table width="95%" align="center" border="1" rules="all" cellpadding="15"><br><tr><br><th>更新</th><br><th>教程</th><br><th>工具</th><br><th>大厂</th><br><th>其他</th><br></tr><br><td><br><font color="red">★MEMO★</font><br>[<a href="https://help.github.com/en/articles/using-keyboard-shortcuts" target="_blank" rel="noopener">https://help.github.com/en/articles/using-keyboard-shortcuts</a> shortcuts]<br>[<a href="https://blog.csdn.net/neilol/article/details/46568611" target="_blank" rel="noopener">https://blog.csdn.net/neilol/article/details/46568611</a> tips]<br><font color="red">★update★</font><br>[<a href="https://www.gitmemory.com/cjql" target="_blank" rel="noopener">https://www.gitmemory.com/cjql</a> cjql]<br>[<a href="https://github.com/issues?q=is%3Aissue+author%3Acjql+sort%3Aupdated-desc" target="_blank" rel="noopener">https://github.com/issues?q=is%3Aissue+author%3Acjql+sort%3Aupdated-desc</a> issue]<br>[<a href="https://github.com/search?o=desc&amp;q=user%3Acjql+&amp;s=updated&amp;type=Repositories" target="_blank" rel="noopener">https://github.com/search?o=desc&amp;q=user%3Acjql+&amp;s=updated&amp;type=Repositories</a> repo]<br>[<a href="https://github.com/cjql/webs/wiki/_history" target="_blank" rel="noopener">https://github.com/cjql/webs/wiki/_history</a> wiki]<br>[<a href="https://github.com/search?o=desc&amp;q=user%3Acjql+&amp;s=updated&amp;type=Wikis" target="_blank" rel="noopener">https://github.com/search?o=desc&amp;q=user%3Acjql+&amp;s=updated&amp;type=Wikis</a> wikis]<br><font color="red">★scan★</font><br>[<a href="https://github.com/settings/repositories" target="_blank" rel="noopener">https://github.com/settings/repositories</a> repos]<br>[<a href="https://github.com/watching" target="_blank" rel="noopener">https://github.com/watching</a> watching]<br>[<a href="https://github.com/trending" target="_blank" rel="noopener">https://github.com/trending</a> trending]<br>[<a href="https://github.com/settings/blocked_users" target="_blank" rel="noopener">https://github.com/settings/blocked_users</a> 封禁用户]<br>[<a href="https://github-contributions.now.sh/" target="_blank" rel="noopener">https://github-contributions.now.sh/</a> 贡献墙]<br>[<a href="https://github.blog/changelog/" target="_blank" rel="noopener">https://github.blog/changelog/</a> changelog]<br></td><br>[<a href="https://github.com/tiimgreen/github-cheat-sheet/" target="_blank" rel="noopener">https://github.com/tiimgreen/github-cheat-sheet/</a> cheatsheet]<br>[<a href="https://github.github.com/training-kit/downloads/zh_CN/github-git-cheat-sheet/" target="_blank" rel="noopener">https://github.github.com/training-kit/downloads/zh_CN/github-git-cheat-sheet/</a> cheatsheet]<br>[<a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md</a> cheatsheetzh]<br>[<a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">https://git-scm.com/book/en/v2</a> GitDoc]<br>[<a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="noopener">http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/</a> stanford]<br>[<a href="https://github.com/geeeeeeeeek/git-recipes" target="_blank" rel="noopener">https://github.com/geeeeeeeeek/git-recipes</a> geeeeeeeeek]<br>[<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a> 廖雪峰]<br>[<a href="https://www.yangzhiping.com/tech/github.html" target="_blank" rel="noopener">https://www.yangzhiping.com/tech/github.html</a> 阳志平]<br>[<a href="https://github.com/gotgit/gotgithub" target="_blank" rel="noopener">https://github.com/gotgit/gotgithub</a> 中文教程]<br>[<a href="http://gitimmersion.com/index.html" target="_blank" rel="noopener">http://gitimmersion.com/index.html</a> gitimmersion]<br>[<a href="https://www.git-tower.com/learn/" target="_blank" rel="noopener">https://www.git-tower.com/learn/</a> Version Control]<br>[<a href="http://justinhileman.info/article/git-pretty/" target="_blank" rel="noopener">http://justinhileman.info/article/git-pretty/</a> 美化git ]<br>[<a href="http://codemancers.com/blog/posts/2014-05-01-using-git-for-knowledge-sharing/" target="_blank" rel="noopener">http://codemancers.com/blog/posts/2014-05-01-using-git-for-knowledge-sharing/</a>  sharing]<br><font color="red">★gitignore★</font><br>[<a href="https://www.gitignore.io/" target="_blank" rel="noopener">https://www.gitignore.io/</a> Create]<br>[<a href="https://karan.goel.io/joe/" target="_blank" rel="noopener">https://karan.goel.io/joe/</a> Joe]<br>[<a href="https://blog.csdn.net/qq19414123/article/details/53435591" target="_blank" rel="noopener">https://blog.csdn.net/qq19414123/article/details/53435591</a> csdn]<br>[<a href="https://segmentfault.com/q/1010000004164312?_ea=513255" target="_blank" rel="noopener">https://segmentfault.com/q/1010000004164312?_ea=513255</a> segmentfault]<br>[<a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">https://learngitbranching.js.org/</a> branch]<br>[<a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">https://github.com/vinta/awesome-python</a> python]<br>[<a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">https://github.com/sindresorhus/awesome</a> others]<br>[<a href="https://api.github.com/users/cjql" target="_blank" rel="noopener">https://api.github.com/users/cjql</a> API]<br>[<a href="https://developer.github.com/v3/issues/labels/" target="_blank" rel="noopener">https://developer.github.com/v3/issues/labels/</a> labels]<br>[<a href="https://github.com/badges/shields" target="_blank" rel="noopener">https://github.com/badges/shields</a> shields]<br>[<a href="https://github.com/racaljk/hosts" target="_blank" rel="noopener">https://github.com/racaljk/hosts</a> hosts]<br>[<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">https://www.sourcetreeapp.com/</a> Sourcetree]<br>[<a href="http://gogs.io/" target="_blank" rel="noopener">http://gogs.io/</a> hosts]<br>[<a href="https://github.com/citizenlab/chat-censorship" target="_blank" rel="noopener">https://github.com/citizenlab/chat-censorship</a> censorship]<br>[<a href="https://github.com/FruitieX/teleirc" target="_blank" rel="noopener">https://github.com/FruitieX/teleirc</a> teleirc]<br><font color="red">★search★</font><br>[<a href="https://github.com/issues?q=author:cjql+sort:updated-desc+label" target="_blank" rel="noopener">https://github.com/issues?q=author:cjql+sort:updated-desc+label</a>: issue]<br>[<a href="https://github.com/search/advanced" target="_blank" rel="noopener">https://github.com/search/advanced</a> 高级搜索]<br>[<a href="https://github.com/google" target="_blank" rel="noopener">https://github.com/google</a> Google]<br>[<a href="https://github.com/apple" target="_blank" rel="noopener">https://github.com/apple</a> Apple]<br>[<a href="https://github.com/facebook" target="_blank" rel="noopener">https://github.com/facebook</a> Facebook]<br>[<a href="https://github.com/twitter" target="_blank" rel="noopener">https://github.com/twitter</a> Twitter]<br>[<a href="https://github.com/microsoft" target="_blank" rel="noopener">https://github.com/microsoft</a> Microsoft]<br>[<a href="https://github.com/square" target="_blank" rel="noopener">https://github.com/square</a> Square]<br>[<a href="https://github.com/alibaba" target="_blank" rel="noopener">https://github.com/alibaba</a> alibaba]<br>[<a href="https://github.com/torvalds/linux" target="_blank" rel="noopener">https://github.com/torvalds/linux</a> linux]<br>[<a href="https://github.com/rails/rails" target="_blank" rel="noopener">https://github.com/rails/rails</a> rails]<br>[<a href="https://github.com/nodejs/node" target="_blank" rel="noopener">https://github.com/nodejs/node</a> NodeJS]<br>[<a href="https://github.com/apple/swift" target="_blank" rel="noopener">https://github.com/apple/swift</a> Swift]<br>[<a href="https://github.com/jashkenas/coffeescript" target="_blank" rel="noopener">https://github.com/jashkenas/coffeescript</a> Coffeescript]<br>[<a href="https://github.com/ruby/ruby" target="_blank" rel="noopener">https://github.com/ruby/ruby</a> Ruby]<br>[<a href="https://github.com/torvalds" target="_blank" rel="noopener">https://github.com/torvalds</a> Torvalds]<br>[<a href="https://github.com/dhh" target="_blank" rel="noopener">https://github.com/dhh</a> Dhh]<br>[<a href="https://github.com/JakeWharton" target="_blank" rel="noopener">https://github.com/JakeWharton</a> JakeWharton]<br>[<a href="https://try.github.io/" target="_blank" rel="noopener">https://try.github.io/</a> try]<br>[<a href="https://github.com/Gazler/githug" target="_blank" rel="noopener">https://github.com/Gazler/githug</a> githug: Git your game on]<br>[<a href="http://lingavin.com/githugtong-guan-gong-lue.html" target="_blank" rel="noopener">http://lingavin.com/githugtong-guan-gong-lue.html</a> githug通关攻略]<br>[<a href="https://github.com/git-game/git-game" target="_blank" rel="noopener">https://github.com/git-game/git-game</a> git-game: terminal game to test git skills ]<br>[<a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">https://learngitbranching.js.org/</a> Learn Git Branching:形象直观的图形化练习网站。]<br>[<a href="http://blog.jobbole.com/tag/pro-git/" target="_blank" rel="noopener">http://blog.jobbole.com/tag/pro-git/</a> 伯乐在线:git详解系列]<br>[<a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="noopener">http://backlogtool.com/git-guide/cn/</a> 猴子都能懂的Git入门]<br>[<a href="https://segmentfault.com/a/1190000011380397" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011380397</a> GitHub上的12个骚操作]<br>[<a href="https://www.atlassian.com/git?atl_source=cac-bitbucket-1&amp;atl_medium=ace&amp;atl_campaign=ACE-158-Stash-GIT-on-Bitbucket-CAC_git&quot;" target="_blank" rel="noopener">https://www.atlassian.com/git?atl_source=cac-bitbucket-1&amp;atl_medium=ace&amp;atl_campaign=ACE-158-Stash-GIT-on-Bitbucket-CAC_git&quot;</a> bitbucket的教程]<br><a href="https://blog.csdn.net/chaishen10000" target="_blank" rel="noopener">https://blog.csdn.net/chaishen10000</a><br>Sorry, we had to truncate this directory to 1,000 files.<br>Large files detected. You may want to try [<a href="https://git-lfs.github.com" target="_blank" rel="noopener">https://git-lfs.github.com</a> Git Large File Storage]<br>[<a href="https://www.cnblogs.com/scale/p/6258457.html" target="_blank" rel="noopener">https://www.cnblogs.com/scale/p/6258457.html</a> 中文乱码]<br>git config –global i18n.commitencoding utf-8<br>git config –global i18n.logoutputencoding gbk<br>git config –global gui.encoding utf-8<br></table><br><a href="https://services.github.com/" target="_blank" rel="noopener">https://services.github.com/</a>  GitHub产品大全，包括Learning Lab、Developer API等<h1 id="13-搜索"><a href="#13-搜索" class="headerlink" title="13. 搜索"></a>13. 搜索</h1>默认搜索是从master分支搜索代码，只有小于384k的代码才是可以搜索到的<br><a href="https://help.github.com/categories/searching-for-information-on-github/" target="_blank" rel="noopener">https://help.github.com/categories/searching-for-information-on-github/</a><br><a href="https://github.com/search?q=icon+size:&gt;200000+extension:css&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=icon+size:&gt;200000+extension:css&amp;type=Code</a><br>匹配文件名：<a href="https://github.com/search?q=minitest+filename:test_helper" target="_blank" rel="noopener">https://github.com/search?q=minitest+filename:test_helper</a><br><a href="http://blog.sina.com.cn/s/blog_4e60b09d0102vcso.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_4e60b09d0102vcso.html</a><br>文件<a href="https://github.com/search?q=octocat+in:file&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=octocat+in:file&amp;type=Code</a><br>路径<a href="https://github.com/search?q=octocat+in:path&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=octocat+in:path&amp;type=Code</a><br>文件或路径<a href="https://github.com/search?q=octocat+in:file,path&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=octocat+in:file,path&amp;type=Code</a><br>语言<a href="https://github.com/search?q=display+language:scss&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=display+language:scss&amp;type=Code</a><br>关键词<a href="https://github.com/search?q=Integer&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=Integer&amp;type=Code</a><br>大小<a href="https://github.com/search?q=element+language:xml+size:100&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=element+language:xml+size:100&amp;type=Code</a><br>作者<a href="https://github.com/search?q=user:cjqlhttps://github.com/search?q=user:cjql+php" target="_blank" rel="noopener">https://github.com/search?q=user:cjqlhttps://github.com/search?q=user:cjql+php</a><br>精确匹配<a href="https://github.com/search?q=user:cjql+&quot;公元前613年&quot;&amp;type=Issues" target="_blank" rel="noopener">https://github.com/search?q=user:cjql+&quot;公元前613年&quot;&amp;type=Issues</a><h1 id="14-参考书"><a href="#14-参考书" class="headerlink" title="14. 参考书"></a>14. 参考书</h1>GitHub入门，李新叶，Introducing GitHub，Peter Bell&amp; Brent Beer，2015年8月。（无源码）<h1 id="15-GitHub"><a href="#15-GitHub" class="headerlink" title="15. GitHub"></a>15. GitHub</h1>专注于完成现有的功能比完成新的开始更有价值。（一个善终强于无数个善始）<br><strong>不要直接提交给主分支。</strong> 有太多的分支，先集中解决其中一两个。<br>修故障，开新分支。添加新功能，开新分支。<br>好的经验法则，每个5~10分支提交一次。<br>提交信息：在做什么（向人展示你的工作），为什么做，为啥要采用你的提交。（description and detailed description）<br>WYSIWYG：所见即所得。WY死机。    <h2 id="15-1-Git"><a href="#15-1-Git" class="headerlink" title="15.1. Git"></a>15.1. Git</h2>定义    Git是一种版本控制系统。能查看文件随历史编辑的变化情况。<br>功能<br>回退<br>大胆修改<br>修改原因<br>冲突解决<br>完整的历史记录<br>多分支历史记录<br>独立的多分支历史记录    <h2 id="15-2-GitHub"><a href="#15-2-GitHub" class="headerlink" title="15.2. GitHub"></a>15.2. GitHub</h2>GitHub是一个网站，用于上传Git数据库的副本（存代码），也是功能强大的软件开发平台。可对代码及其修改进行说明、讨论和评估。<br>GitHub独立于Git的机制：<br>共享库<br>fork<br>pull<br>issue<br>wiki    <h2 id="15-3-GitHub与Git的区别"><a href="#15-3-GitHub与Git的区别" class="headerlink" title="15.3. GitHub与Git的区别"></a>15.3. GitHub与Git的区别</h2>GitHub的局限：<br>重命名尤其是文件夹<br>只能在单个文件上修改<br>不能改写历史<br>不能在线解决冲突<br>Git的优势：<br>运行<br>测试<br>IDE<br>多个重命名<br>离线    <h2 id="15-4-区分"><a href="#15-4-区分" class="headerlink" title="15.4. 区分"></a>15.4. 区分</h2><h3 id="15-4-1-download-zip-与git-clone"><a href="#15-4-1-download-zip-与git-clone" class="headerlink" title="15.4.1. download zip 与git clone"></a>15.4.1. download zip 与git clone</h3>download zip：单纯下载到本地，无法查看日志和对仓库进行修改<br><a href="https://www.prestonlamb.com/blog/creating-a-docker-image-with-github-actions" target="_blank" rel="noopener">https://www.prestonlamb.com/blog/creating-a-docker-image-with-github-actions</a>    <h3 id="15-4-2-issue和PR"><a href="#15-4-2-issue和PR" class="headerlink" title="15.4.2. issue和PR"></a>15.4.2. issue和PR</h3></li></ol><ul><li>issue：未做的，可以和master无关    </li><li>PR：已修bug和新增功能，但尚未合并。必须有master和分支    <h3 id="15-4-3-labels-和-milestone"><a href="#15-4-3-labels-和-milestone" class="headerlink" title="15.4.3. labels 和 milestone"></a>15.4.3. labels 和 milestone</h3></li><li>lables：可同时多个。可按字母和issue数排序。    </li><li>milestone。只能有一个。可用来做deadline。可按更新时间、完成度（同milestone中关闭的issue占比）、到期、字母、issue数排序    <h2 id="15-5-大文件传输"><a href="#15-5-大文件传输" class="headerlink" title="15.5. 大文件传输"></a>15.5. 大文件传输</h2><a href="https://git-lfs.github.com/" target="_blank" rel="noopener">https://git-lfs.github.com/</a>    </li><li>下载，安装    </li><li>bash移动路径到对应仓库    </li><li>git init    </li><li>git lfs install    </li><li>touch .gitattributes    </li><li>git lfs track “*.pdf”    </li><li>git lfs track “*.epub”    </li><li>git add .gitattributes    </li><li>git add *.epub    </li><li>git commit -m “Add design file”    </li><li>git remote add origin <a href="https://github.com/cqlj/allitebooks" target="_blank" rel="noopener">https://github.com/cqlj/allitebooks</a>    </li><li>git push origin master<br>重复6、8、9、10、11    <pre><code class="bash">Git LFS has been disabled on your personal account cqlj because you’ve exceeded your data plan by at least 150%. Please purchase additional data packs to cover your bandwidth and storage usage:    https://github.com/account/billing/data/upgrade    Current usage as of 11 Jan 2020 09:20PM UTC:    Bandwidth: 0.0 GB / 1 GB (0%)Storage: 7.37 GB / 1 GB (737%)</code></pre><h2 id="15-6-远程操控"><a href="#15-6-远程操控" class="headerlink" title="15.6. 远程操控"></a>15.6. 远程操控</h2>git init<br>echo “## allitebooks” &gt;&gt; README.md<br>git add README.md<br>git commit -m “first commit”<br>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:cqlj/allitebooks.git    <h2 id="15-7-git-remote-v-for-checking-current-repository"><a href="#15-7-git-remote-v-for-checking-current-repository" class="headerlink" title="15.7. git remote -v (for checking current repository)"></a>15.7. git remote -v (for checking current repository)</h2><h2 id="15-8-git-pull-–rebase-origin-master"><a href="#15-8-git-pull-–rebase-origin-master" class="headerlink" title="15.8. git pull –rebase origin master"></a>15.8. git pull –rebase origin master</h2>git push -u origin master    </li></ul><h2 id="15-9-Errors"><a href="#15-9-Errors" class="headerlink" title="15.9. Errors"></a>15.9. Errors</h2><p><strong>Updating the Git index failed</strong><br>git config –global core.autocrlf false<br>Updating the Git index failed.    A rescan will be automatically started to resynchronize git-gui.<br>warning: LF will be replaced by CRLF in source/categories/index.md.<br>The file will have its original line endings in your working directory<br><strong>Sorry, we had to truncate this directory to 1,000 files.</strong><br>Large files detected. You may want to try<br><a href="https://git-lfs.github.com" target="_blank" rel="noopener">Git_Large_File_Storage</a><br><a href="https://www.cnblogs.com/scale/p/6258457.html" target="_blank" rel="noopener"><strong>中文乱码</strong></a><br>git config –global i18n.commitencoding utf-8<br>git config –global i18n.logoutputencoding gbk<br>git config –global gui.encoding utf-8<br><a href="https://services.github.com/" target="_blank" rel="noopener">https://services.github.com/</a>    GitHub产品大全，包括Learning Lab、Developer API等    </p><h2 id="15-10-其他"><a href="#15-10-其他" class="headerlink" title="15.10. 其他"></a>15.10. 其他</h2><p><a href="https://help.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository" target="_blank" rel="noopener">https://help.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository</a><br><a href="https://tecadmin.net/delete-commit-history-in-github/" target="_blank" rel="noopener">https://tecadmin.net/delete-commit-history-in-github/</a><br><a href="https://gist.github.com/stephenhardy/5470814" target="_blank" rel="noopener">https://gist.github.com/stephenhardy/5470814</a><br><a href="https://github.com/cjql/archive/wiki/_history" target="_blank" rel="noopener">https://github.com/cjql/archive/wiki/_history</a><br>★MEMO★<br><a href="https://help.github.com/en/articles/using-keyboard-shortcuts" target="_blank" rel="noopener">shortcuts</a><br><a href="https://blog.csdn.net/neilol/article/details/46568611" target="_blank" rel="noopener">tips</a><br>★update★<br><a href="https://www.gitmemory.com/cjql" target="_blank" rel="noopener">cjql</a><br><a href="https://github.com/issues?q=is%3Aissue+author%3Acjql+sort%3Aupdated-desc" target="_blank" rel="noopener">issue</a><br><a href="https://github.com/search?o=desc&amp;q=user%3Acjql+&amp;s=updated&amp;type=Repositories" target="_blank" rel="noopener">repo</a><br><a href="https://github.com/cjql/webs/wiki/_history" target="_blank" rel="noopener">wiki</a><br><a href="https://github.com/search?o=desc&amp;q=user%3Acjql+&amp;s=updated&amp;type=Wikis" target="_blank" rel="noopener">wikis</a><br>★scan★<br><a href="https://github.com/settings/repositories" target="_blank" rel="noopener">repos</a><br><a href="https://github.com/watching" target="_blank" rel="noopener">watching</a><br><a href="https://github.com/trending" target="_blank" rel="noopener">trending</a><br><a href="https://github.com/settings/blocked_users" target="_blank" rel="noopener">封禁用户</a><br><a href="https://github-contributions.now.sh/" target="_blank" rel="noopener">贡献墙</a><br><a href="https://github.blog/changelog/" target="_blank" rel="noopener">changelog</a><br><a href="https://github.com/tiimgreen/github-cheat-sheet/" target="_blank" rel="noopener">cheatsheet</a><br><a href="https://github.github.com/training-kit/downloads/zh_CN/github-git-cheat-sheet/" target="_blank" rel="noopener">cheatsheet</a><br><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="noopener">cheatsheetzh</a><br><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">GitDoc</a><br><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="noopener">stanford</a><br><a href="https://github.com/geeeeeeeeek/git-recipes" target="_blank" rel="noopener">geeeeeeeeek</a><br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰</a><br><a href="https://www.yangzhiping.com/tech/github.html" target="_blank" rel="noopener">阳志平</a><br><a href="https://github.com/gotgit/gotgithub" target="_blank" rel="noopener">中文教程</a><br><a href="http://gitimmersion.com/index.html" target="_blank" rel="noopener">gitimmersion</a><br><a href="https://www.git-tower.com/learn/" target="_blank" rel="noopener">Version Control</a><br><a href="http://justinhileman.info/article/git-pretty/" target="_blank" rel="noopener">美化git </a><br><a href="http://codemancers.com/blog/posts/2014-05-01-using-git-for-knowledge-sharing/" target="_blank" rel="noopener"> sharing</a><br>★gitignore★<br><a href="https://www.gitignore.io/" target="_blank" rel="noopener">Create</a><br><a href="https://karan.goel.io/joe/" target="_blank" rel="noopener">Joe</a><br><a href="https://blog.csdn.net/qq19414123/article/details/53435591" target="_blank" rel="noopener">csdn</a><br><a href="https://segmentfault.com/q/1010000004164312?_ea=513255" target="_blank" rel="noopener">segmentfault</a><br><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">branch</a><br><a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">python</a><br><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">others</a><br><a href="https://api.github.com/users/cjql" target="_blank" rel="noopener">API</a><br><a href="https://developer.github.com/v3/issues/labels/" target="_blank" rel="noopener">labels</a><br><a href="https://github.com/badges/shields" target="_blank" rel="noopener">shields</a><br><a href="https://github.com/racaljk/hosts" target="_blank" rel="noopener">hosts</a><br><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Sourcetree</a><br><a href="http://gogs.io/" target="_blank" rel="noopener">hosts</a><br><a href="https://github.com/citizenlab/chat-censorship" target="_blank" rel="noopener">censorship</a><br><a href="https://github.com/FruitieX/teleirc" target="_blank" rel="noopener">teleirc</a><br>★Famous★<br><a href="https://github.com/google" target="_blank" rel="noopener">Google</a><br><a href="https://github.com/apple" target="_blank" rel="noopener">Apple</a><br><a href="https://github.com/facebook" target="_blank" rel="noopener">Facebook</a><br><a href="https://github.com/twitter" target="_blank" rel="noopener">Twitter</a><br><a href="https://github.com/microsoft" target="_blank" rel="noopener">Microsoft</a><br><a href="https://github.com/square" target="_blank" rel="noopener">Square</a><br><a href="https://github.com/alibaba" target="_blank" rel="noopener">alibaba</a><br><a href="https://github.com/torvalds/linux" target="_blank" rel="noopener">linux</a><br><a href="https://github.com/rails/rails" target="_blank" rel="noopener">rails</a><br><a href="https://github.com/nodejs/node" target="_blank" rel="noopener">NodeJS</a><br><a href="https://github.com/apple/swift" target="_blank" rel="noopener">Swift</a><br><a href="https://github.com/jashkenas/coffeescript" target="_blank" rel="noopener">Coffeescript</a><br><a href="https://github.com/ruby/ruby" target="_blank" rel="noopener">Ruby</a><br><a href="https://github.com/torvalds" target="_blank" rel="noopener">Torvalds</a><br><a href="https://github.com/dhh" target="_blank" rel="noopener">Dhh</a><br><a href="https://github.com/JakeWharton" target="_blank" rel="noopener">JakeWharton</a><br>★學習教程★<br><a href="https://try.github.io/" target="_blank" rel="noopener">try</a><br><a href="https://github.com/Gazler/githug" target="_blank" rel="noopener">githug: Git your game on</a><br><a href="http://lingavin.com/githugtong-guan-gong-lue.html" target="_blank" rel="noopener">githug通关攻略</a><br><a href="https://github.com/git-game/git-game" target="_blank" rel="noopener">git-game: terminal game to test git skills </a><br><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Learn Git Branching:形象直观的图形化练习网站。</a><br><a href="http://blog.jobbole.com/tag/pro-git/" target="_blank" rel="noopener">伯乐在线:git详解系列</a><br><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="noopener">猴子都能懂的Git入门</a><br><a href="https://segmentfault.com/a/1190000011380397" target="_blank" rel="noopener">GitHub上的12个骚操作</a><br><a href="https://www.atlassian.com/git?atl_source=cac-bitbucket-1&amp;atl_medium=ace&amp;atl_campaign=ACE-158-Stash-GIT-on-Bitbucket-CAC_git&quot;" target="_blank" rel="noopener">bitbucket的教程</a><br><a href="https://blog.csdn.net/chaishen10000" target="_blank" rel="noopener">https://blog.csdn.net/chaishen10000</a>    </p><h2 id="15-11-搜索"><a href="#15-11-搜索" class="headerlink" title="15.11. 搜索"></a>15.11. 搜索</h2><p>私有库的code也能被搜索到。<br>默认搜索是从master分支搜索代码，只有小于384k的代码才是可以搜索到的<br><a href="https://github.com/search/advanced" target="_blank" rel="noopener">https://github.com/search/advanced</a><br><a href="https://github.com/issues?q=author:cjql+sort:updated-desc+label" target="_blank" rel="noopener">https://github.com/issues?q=author:cjql+sort:updated-desc+label</a>:<br><a href="https://help.github.com/categories/searching-for-information-on-github/" target="_blank" rel="noopener">https://help.github.com/categories/searching-for-information-on-github/</a><br><a href="https://github.com/search?q=icon+size:&gt;200000+extension:css&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=icon+size:&gt;200000+extension:css&amp;type=Code</a><br><a href="https://github.com/search?q=minitest+filename:test_helper" target="_blank" rel="noopener">https://github.com/search?q=minitest+filename:test_helper</a>    匹配文件名<br><a href="https://github.com/search?q=octocat+in:file&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=octocat+in:file&amp;type=Code</a>     文件<br><a href="https://github.com/search?q=octocat+in:path&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=octocat+in:path&amp;type=Code</a>    路径<br><a href="https://github.com/search?q=octocat+in:file,path&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=octocat+in:file,path&amp;type=Code</a>    文件或路径<br><a href="https://github.com/search?q=display+language:scss&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=display+language:scss&amp;type=Code</a>    语言<br><a href="https://github.com/search?q=Integer&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=Integer&amp;type=Code</a>    关键词<br><a href="https://github.com/search?q=element+language:xml+size:100&amp;type=Code" target="_blank" rel="noopener">https://github.com/search?q=element+language:xml+size:100&amp;type=Code</a>    大小<br><a href="https://github.com/search?q=user:cjql" target="_blank" rel="noopener">https://github.com/search?q=user:cjql</a><br><a href="https://github.com/search?q=user:cjql+php" target="_blank" rel="noopener">https://github.com/search?q=user:cjql+php</a>    作者<br><a href="https://github.com/search?q=user:cjql+&quot;公元前613年&quot;&amp;type=Issues" target="_blank" rel="noopener">https://github.com/search?q=user:cjql+&quot;公元前613年&quot;&amp;type=Issues</a>    精确匹配<br><a href="http://blog.sina.com.cn/s/blog_4e60b09d0102vcso.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_4e60b09d0102vcso.html</a>    </p><h2 id="15-12-参考书"><a href="#15-12-参考书" class="headerlink" title="15.12. 参考书"></a>15.12. 参考书</h2><p>GitHub入门，李新叶，Introducing GitHub，Peter Bell&amp; Brent Beer，2015年8月。（无源码）  </p><h2 id="15-13-GitHub选项卡"><a href="#15-13-GitHub选项卡" class="headerlink" title="15.13. GitHub选项卡"></a>15.13. GitHub选项卡</h2><p>code    仓库文件列表。简要说明和URL<br>commit 当前分支的提交历史<br>branches 分支列表<br>releases 标签列表<br>可以将标签加入时的文件以归档形势（zip、tar.gz）下载到本地。软件在升级时一般需要打标签。<br><a href="https://git-scm.com/book/zh/v2/Git-基础-打标签" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/Git-基础-打标签</a><br>像其他版本控制系统（VCS）一样，Git 可以给历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 等等）。 在本节中，你将会学习如何列出已有的标签、如何创建新标签、以及不同类型的标签分别是什么。    </p><h3 id="15-13-1-contributors-pull-requests被采纳的人数-作者"><a href="#15-13-1-contributors-pull-requests被采纳的人数-作者" class="headerlink" title="15.13.1. contributors pull requests被采纳的人数+作者"></a>15.13.1. contributors pull requests被采纳的人数+作者</h3><p>pulse、commit history：工作进展。<br>commit：保存修改。    code和commit处都可以选分支，查看分支的历史要切换到待查的分支。<br>commit message：提交消息。what、why、where（好在哪）。<br>branch：新功能。<br>feature branch：功能分支。<br>master：提供发布。<br>release branch：发布分支。Bug必修的分支。<br>tag：标签。可用于记录发布版本。<br>check out：查看。<br>issue：需求（旧Bug报告和新性能添加）。方向性讨论功能，跟踪缺陷。Pull Request时会自动创建Issue。数字是<strong>Open</strong>状态的Issue数。<br>PR(pull requests)：拉请求。请人复查分支历史流，并请求合并。最新变化和讨论。目前处于工作状态的所有不同功能。列表查看并管理。数字是Open的PR数量。正在做什么，每个修改的当前状态。<br>merge PR ：仅对贡献者可见。<br>revert the merge：回退合并。<br>merge前可修改PR（修改时切换到PR所在的分支），以供审查和反馈。<br>merge前最好自己clone并运行。也可交给测试团队或部门做。<br>右边退订和订阅pull（评论、@、提交、合并、关闭）<br>多去评论，以帮助项目改善质量<br>fork：分叉。到个人账户或组织。参与这个库开发的人数。可自行修改、提交。PR后可提交到最初的（被fork的）项目。<br>branch + PR（pull requests）：分支协作。<br>releases：发布的版本个数。<br>watch：关注。该仓库的更新信息都会显示在用户的公开活动中。<br>star：喜欢。做书签用。反应仓库的受关注程度。判断仓库热门程度的指标。<br>wiki：内容管理系统。便捷的链接页面。readme太长 ⇒ 用户文档和开发文档（待修bug、待加功能）。仅支持公开库。<br>settings。当前仓库的设置。<br>Options。<br>GitHub Pages：可直接在settings中设置。需公开库或者Pro。内容是readme的内容。<br>Collaborators<br>Branches<br>Webhooks：issue、PR自动发送到项目。（用于项目管理、Bug跟踪、自动化测试的持续集成服务器）<br>Notifications<br>Integrations &amp; services<br>Deploy keys<br>Secrets<br>Actions<br>Insight<br>SSH clone URL：克隆仓库时所需要的URL。<br>Referring sites：访客来之前访问的网站。<br>Pulse：显示该仓库最近的活动。issue和Pull Requests。周期可调。additions and deletions：增删行数。修改一行=增一行+删一行<br>Contributors：贡献值图（master exclude merge）。主图可分块拉取，以查看时间段内的情况。（私有库需额外添加合作者）<br>Community<br>Traffic：仅贡献者可见。访客信息。以图表形式显示该仓库的各项指标。<br>Commits：每周提交数。下图是上图被选中的周期块对应的日内分解图。<br>Code frequency：码频图。看显著变化，尤其是重构。<br>Dependency graph<br>. Network：分支数。以图表行政显示仓库当前的状态及fork出的状态。同时会显示成员列表。<br>. Forks：成员列表。<br>顶层（根目录）、文件夹（目录）。<br>../移动到父目录。<br>git只关心文件，无法将空文件夹添加到项目。约定：想建空文件夹就加.gitkeep文件。<br>readme.md：项目说明。（如何：安装、使用、自动化测试、对项目作贡献）<br>徽章（本质是用图片做显示的套娃）<a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a>  <a href="https://github.com/cjql/00diary/issues/130" target="_blank" rel="noopener">https://github.com/cjql/00diary/issues/130</a><br>依赖项目及其版本<br>自动测试正在通过（passing）<br>依赖关系是最新的<br>适应的浏览器和操作系统版本<br><a href="https://github.com/twbs/bootstrap#status" target="_blank" rel="noopener">https://github.com/twbs/bootstrap#status</a><br>徽章  </p><h2 id="15-14-排错"><a href="#15-14-排错" class="headerlink" title="15.14. 排错"></a>15.14. 排错</h2><p>fatal: refusing to merge unrelated histories<br><a href="https://blog.csdn.net/lindexi_gd/article/details/52554159" target="_blank" rel="noopener">https://blog.csdn.net/lindexi_gd/article/details/52554159</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 软件开发 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/Docker/"/>
      <url>/Docker/</url>
      
        <content type="html"><![CDATA[<p>Docker笔记。<br><a id="more"></a><br>镜像的构建、容器的运行监控、网络的管理、仓库的应用、集群的部署。<br>容器技术与Docker概念@<br>容器技术概念@<br>容器技术的发展历史（历程、前世今生）@<br>容器技术的原理@<br>Docker与其他容器技术的区别@<br>Docker与虚拟机的异同，客观评价两者的优缺点@<br>启动简单的容器@<br>容器与容器云对软件行业的影响@<br>Registry@Registry是Docker公司为了更方便镜像流通而设计的一种镜像仓库。像手机上的应用商店一样，用户可以在上面发布镜像和拉取镜像，官方的Docker Hub还提供更高级的企业服务。<br>hierarchy@Stack：define the interactions of all the services<br>Services:define how containers behave in production<br>Container (you are here)<br>数据卷@数据卷是挂载到容器的一个目录，它与容器的生命周期独立，不会因为容器的销毁而消失。</p><h1 id="1-cheatsheet"><a href="#1-cheatsheet" class="headerlink" title="1. cheatsheet"></a>1. cheatsheet</h1><p>命令分类：管理、镜像、容器、仓库、网络、数据卷、编排。<br>分类在每次版本发布时都有调整。<br><a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/docker/</a><br><a href="https://docs.docker.com/engine/reference/commandline/build/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/build/</a><br><code>docker、-v、info、--help、image/container ls (--all/-aq)、run hello-world、logs \&lt;names&gt;</code></p><h2 id="1-1-List-Docker-CLI-commands"><a href="#1-1-List-Docker-CLI-commands" class="headerlink" title="1.1. List Docker CLI commands"></a>1.1. List Docker CLI commands</h2><p>docker<br>docker container –help  </p><h2 id="1-2-Display-Docker-version-and-info"><a href="#1-2-Display-Docker-version-and-info" class="headerlink" title="1.2. Display Docker version and info"></a>1.2. Display Docker version and info</h2><p>docker –version<br>docker version<br>docker info  Docker的各项运行状态信息（容器数量、状态，镜像数量，服务版本，存储驱动、根目录，数据卷，插件，网络，安全，硬件等信息）。<br>$ docker inspect 检查容器或者镜像详细信息。输出的内容却相当丰富。</p><h2 id="1-3-Execute-Docker-image"><a href="#1-3-Execute-Docker-image" class="headerlink" title="1.3. Execute Docker image"></a>1.3. Execute Docker image</h2><p>docker run hello-world  </p><h2 id="1-4-List-Docker-images"><a href="#1-4-List-Docker-images" class="headerlink" title="1.4. List Docker images"></a>1.4. List Docker images</h2><p>docker image ls  </p><h2 id="1-5-List-Docker-containers-running-all-all-in-quiet-mode"><a href="#1-5-List-Docker-containers-running-all-all-in-quiet-mode" class="headerlink" title="1.5. List Docker containers (running, all, all in quiet mode)"></a>1.5. List Docker containers (running, all, all in quiet mode)</h2><p>docker container ls<br>docker container ls –all<br>docker container ls -aq  </p><p>注意冒号和双斜线<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd c:</span><br><span class="line">cd cd C:\\docker\\demo</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></p><p><a href="https://user-images.githubusercontent.com/32757669/55721943-4d69ef00-5a37-11e9-9e58-903acf750d44.png" target="_blank" rel="noopener">https://user-images.githubusercontent.com/32757669/55721943-4d69ef00-5a37-11e9-9e58-903acf750d44.png</a><br><img src="https://user-images.githubusercontent.com/32757669/55720183-cf0b4e00-5a32-11e9-9b41-33c365290b09.png" alt="image"></p><p><code>docker kill &lt;containerID&gt;</code><br>通常在容器无响应时使用。<br>与stop的区别：<br>stop给容器的进程发送SIGTERM信号，默认行为是会导致容器退出，当然，容器内程序可以捕获该信号并自行处理，例如可以选择忽略。<br>kill给容器的进程发送SIGKILL信号，该信号将会使容器必然退出。<br>事件查看events<br>容器依附attach<br>容器信息本地查看ps<br>容器停止stop<br>容器创建create<br>容器删除rm<br>容器变化查看diff<br>容器启动run<br>容器启动start<br>容器导入import<br>容器导出export<br>容器提交commit<br>容器日志logs<br>容器暂停pause<br>容器暂停恢复unpause<br>容器更新update<br>容器状态查看stats<br>容器端口port<br>容器进入exec<br>容器进程查看top<br>容器重启restart<br>容器重命名rename<br>拉取镜像pull<br>推送镜像push<br>数据卷管理volume<br>文件复制cp<br>服务管理service<br>登出仓库logout<br>登录仓库login<br>等待设置wait<br>管理节点node<br>网络管理network<br>镜像删除rmi<br>镜像历史查看history<br>镜像导出save<br>镜像搜索search<br>镜像本地查看images<br>镜像构建build<br>镜像标签tags<br>集群管理swarm</p><h1 id="2-简介"><a href="#2-简介" class="headerlink" title="2. 简介"></a>2. 简介</h1><p>Linux、Windows和Mac OS平台上的Docker操作基本一致。<br>Docker作为一个2013年才诞生的开源项目。</p><h1 id="3-背景介绍"><a href="#3-背景介绍" class="headerlink" title="3. 背景介绍"></a>3. 背景介绍</h1><p>容器技术早在Docker之前就有。<br>Docker清晰、易用、用户体验友好。发展迅速、火爆。在容器技术领域有领先地位。国内外有很多创业公司以Docker技术起家，Docker在中国的推广基本上靠国内几家与Docker相关的初创公司。开发者、企业、云计算厂商陆续在用。<br>伴随而来的是各种复杂的需求与Docker尚不算完善的功能所产生的矛盾，这些问题制约着企业容器化的脚步。</p><h1 id="4-企业级容器云的实战经验"><a href="#4-企业级容器云的实战经验" class="headerlink" title="4. 企业级容器云的实战经验"></a>4. 企业级容器云的实战经验</h1><h1 id="5-为什么学习Docker"><a href="#5-为什么学习Docker" class="headerlink" title="5. 为什么学习Docker"></a>5. 为什么学习Docker</h1><p>简化”换电脑换服务器”等迁移工作的环境配置问题。避免这个程序只有在我的机器上才可以运行的问题。</p><h1 id="6-相关术语"><a href="#6-相关术语" class="headerlink" title="6. 相关术语"></a>6. 相关术语</h1><h2 id="6-1-虚拟化技术"><a href="#6-1-虚拟化技术" class="headerlink" title="6.1. 虚拟化技术"></a>6.1. 虚拟化技术</h2><p>通过各种虚拟化技术来实现软件的<strong>迁移和分发</strong>，解决了迁移过程中的诸多难题。<br><strong>最常见的就是虚拟机或KVM技术</strong>。在虚拟机里完成<strong>开发再迁移到线上</strong>不会出现环境问题。<br>性能低下、分发流程麻烦、耗时和成本昂贵等问题。在云计算时代这些问题更加突出。传统的软件开发和运维的烦琐流程感到吃力。<br><strong>虚拟化技术</strong>开始普及。</p><h2 id="6-2-容器技术"><a href="#6-2-容器技术" class="headerlink" title="6.2. 容器技术"></a>6.2. 容器技术</h2><p>低成本、启动快、体积小和分发迅速</p><h3 id="6-2-1-第一代运维"><a href="#6-2-1-第一代运维" class="headerlink" title="6.2.1. 第一代运维"></a>6.2.1. 第一代运维</h3><p>通过Shell脚本的方式使用SSH连接到所有服务器然后执行相同的指令，并把日志保存起来归档。维护服务器是一项繁重的工作，工程师不得不把大量的时间耗费在<strong>服务器管理</strong>上。</p><h3 id="6-2-2-第二代运维"><a href="#6-2-2-第二代运维" class="headerlink" title="6.2.2. 第二代运维"></a>6.2.2. 第二代运维</h3><p>虚拟化技术的普及、云计算的出现、企业需要管理的服务器数量大幅增长。数据中心由企业内部发展到全球。运维成本愈发昂贵。<br><strong>运维工具</strong>（如<strong>Ansible、Puppet、SaltStack和Chef</strong>）改变云计算时代服务器运维方式。可以通过这些工具快速地完成对上百台甚至上千台服务器的管理操作。它极大地解决了管理庞大服务器集群的难题，使人们可以在屏幕面前通过一个界面管理所有服务器。但本质上这些工具都是通过SSH或者类似于SSH的方式连接到服务器来管理<strong>服务器集群</strong>。第二代运维和第一代运维并没有发生根本性的改变。</p><h3 id="6-2-3-第三代运维（容器时代）"><a href="#6-2-3-第三代运维（容器时代）" class="headerlink" title="6.2.3. 第三代运维（容器时代）"></a>6.2.3. 第三代运维（容器时代）</h3><p>前两代运维速度是硬伤。SSH连接来交换信息十分耗时，其他复杂的管理操作更耗时。<br>而随着容器技术的爆发，<strong>以Docker为代表的容器技术</strong>开始发力，并随着DevOps概念的普及，使运维发生了根本性的改变。<br><strong>容器集群管理</strong>不再是通过低效的SSH来连接服务器，甚至不需要登录服务器就可以完成对服务器的管理。<br>通过容器管理集群可以抛弃传统的“SSH+秘钥”的连接方式来连接服务器，这对大规模集群来说是一个极大的变革。<br>而且在速度上，容器技术在上百台服务器上启动应用只需要一眨眼的时间，这使得运维的工作大大减轻。<br>运维和开发在容器时代逐步“融为一体”，形成一个流水线车间的工作环境。这对于软件行业来说无疑是一次巨大的变革。</p><h1 id="7-镜像的构建、容器的运行监控、网络的管理、仓库的应用、集群的部署"><a href="#7-镜像的构建、容器的运行监控、网络的管理、仓库的应用、集群的部署" class="headerlink" title="7. 镜像的构建、容器的运行监控、网络的管理、仓库的应用、集群的部署"></a>7. 镜像的构建、容器的运行监控、网络的管理、仓库的应用、集群的部署</h1><h1 id="8-Docker的基本使用方法与实现原理（内部原理）"><a href="#8-Docker的基本使用方法与实现原理（内部原理）" class="headerlink" title="8. Docker的基本使用方法与实现原理（内部原理）"></a>8. Docker的基本使用方法与实现原理（内部原理）</h1><h1 id="9-从不同的角度分析问题并提出对应的解决办法"><a href="#9-从不同的角度分析问题并提出对应的解决办法" class="headerlink" title="9. 从不同的角度分析问题并提出对应的解决办法"></a>9. 从不同的角度分析问题并提出对应的解决办法</h1><h1 id="10-实战技巧拓展"><a href="#10-实战技巧拓展" class="headerlink" title="10. 实战技巧拓展"></a>10. 实战技巧拓展</h1><h1 id="11-根据不同类型的开发环境构建基础开发环境镜像"><a href="#11-根据不同类型的开发环境构建基础开发环境镜像" class="headerlink" title="11. 根据不同类型的开发环境构建基础开发环境镜像"></a>11. 根据不同类型的开发环境构建基础开发环境镜像</h1><h1 id="12-直接使用Docker进入测试开发"><a href="#12-直接使用Docker进入测试开发" class="headerlink" title="12. 直接使用Docker进入测试开发"></a>12. 直接使用Docker进入测试开发</h1><h1 id="13-根据不同类型的应用部署"><a href="#13-根据不同类型的应用部署" class="headerlink" title="13. 根据不同类型的应用部署"></a>13. 根据不同类型的应用部署</h1><h1 id="14-Docker分别在Linux、Windows和Mac-OS系统下的安装方法，以及二进制安装方法。"><a href="#14-Docker分别在Linux、Windows和Mac-OS系统下的安装方法，以及二进制安装方法。" class="headerlink" title="14. Docker分别在Linux、Windows和Mac OS系统下的安装方法，以及二进制安装方法。"></a>14. Docker分别在Linux、Windows和Mac OS系统下的安装方法，以及二进制安装方法。</h1><h1 id="15-Docker基础知识"><a href="#15-Docker基础知识" class="headerlink" title="15. Docker基础知识"></a>15. Docker基础知识</h1><h2 id="15-1-Docker的基本操作"><a href="#15-1-Docker的基本操作" class="headerlink" title="15.1. Docker的基本操作"></a>15.1. Docker的基本操作</h2><p>Docker基础、Docker镜像、Docker file文件、Docker仓库、Docker容器、数据卷的使用方法与原理及网络管理</p><h2 id="15-2-简单应用，等内容。通过对本篇内容的学习，读者可以掌握最常用的Docker知识。"><a href="#15-2-简单应用，等内容。通过对本篇内容的学习，读者可以掌握最常用的Docker知识。" class="headerlink" title="15.2. 简单应用，等内容。通过对本篇内容的学习，读者可以掌握最常用的Docker知识。"></a>15.2. 简单应用，等内容。通过对本篇内容的学习，读者可以掌握最常用的Docker知识。</h2><h1 id="16-Docker进阶实战（在实际开发中的应用实例）"><a href="#16-Docker进阶实战（在实际开发中的应用实例）" class="headerlink" title="16. Docker进阶实战（在实际开发中的应用实例）"></a>16. Docker进阶实战（在实际开发中的应用实例）</h1><p>操作系统、编排工具Compose、Web服务器与应用、数据库、编程语言、Docker API、私有仓库、集群网络、Docker安全<br>Docker在容器云环境中的应用<br>在实际生产环境中应用Docker</p><h1 id="17-容器技术大观"><a href="#17-容器技术大观" class="headerlink" title="17. 容器技术大观"></a>17. 容器技术大观</h1><p>容器，用来放东西的道具。容器技术借鉴了工业运输的发展经验。低成本，标准化。<br>虚拟化技术分类：</p><ul><li>基于<strong>硬件</strong>虚拟化，基于<strong>软件</strong>虚拟化。</li><li><strong>硬件</strong>虚拟化、<strong>半</strong>虚拟化和<strong>操作系统</strong>虚拟化。<br>虚拟化技术分类： <strong>应用</strong>虚拟化（如Wine）和<strong>平台</strong>虚拟化（如虚拟机）<blockquote><p>硬件虚拟化并不多见，大都是半虚拟化与软件结合，应用较为广泛的则是基于软件的虚拟化技术。<br>容器技术属于操作系统虚拟化，属于平台虚拟化的一种。<br>Docker∈容器技术∈操作系统虚拟化。有时这种分类会因为技术的发展而有变动。其相较于其他主流虚拟化技术更轻量。</p></blockquote></li></ul><p>同样，软件行业的容器技术也是在尝试打造一套标准化的软件构建、分发流程，以降低运维成本，提高软件安全与运行稳定等。与工业运输的集装箱不同，容器技术要复杂得多。它不仅仅是要打造一个运输用的“集装箱”，还要保证软件在容器内能够运行，在操作系统上打造一个“独立的箱子”。这需要解决文件系统、网络、硬件等多方面的问题。经过长时间的发展，容器技术已经逐步成熟，并在Docker的诞生下迎来它的繁荣时代。<br>读者大可把容器理解为一个沙盒，每个容器是独立的，容器之间可以相互通信。</p><p>与传统软件行业的开发和运维相比，容器虚拟化可以更高效地构建应用，也更容易管理维护。举个简单的例子，常见的LAMP组合开发网站，按照传统的做法自然是各种安装，然后配置、测试、发布，中间麻烦事一大堆，相信不少读者深有体会。<br>当服务器需要搬迁时，往往需要再执行一次以前的部署步骤，极大地浪费了运维人员的时间。最可怕的是搬迁后往往因为一些不可预知的原因而导致软件无法正常运行，只能一头扎进代码中找Bug。<br>如果使用了容器技术，运维只需要一句简单的命令即可部署一整套LAMP环境，并且不需要复杂的配置与测试。即便搬迁也只是打包传输即可。即使在另一台机器上，软件也不会出现“水土不服”的情况。这无疑节约了运维人员的大量时间。<br>而对于开发者来说，一处构建，到处运行，大概是梦寐以求的事情。这也是很多跨平台语言的宣传标语之一。但不管是怎样的跨平台语言，在很多细节上都需要不少调整才能运行在另一个平台上。但容器技术则不一样，开发者可以使用熟悉的编程语言开发软件，之后用容器技术打包构建，便可以一键运行在所有支持该容器技术的平台上。<br>容器技术具有更快的交付和部署速度，而且相较于其他虚拟化技术，容器技术更加轻量。</p><p>软件行业上的容器是从文件系统隔离开始的。最早的容器技术大概是chroot（1979年）了，它最初是一个UNIX操作系统上的系统调用，用于将一个进程及其子进程的根目录改变到文件系统中的一个新位置，让这些进程只能访问到该目录。直到今天，主流Linux上还有这个工具。<br>打开一个终端，输入chroot–help，查看一下这个古老的命令。<br>$ chroot ——help<br>用法：chroot [选项] 新根 [命令 [参数]……]<br>或：chroot 选项<br>以指定的新根为运行指定命令时的根目录。<br>——userspec=用户:组 指定所用的用户及用户组(可使用“数字”或“名字”)<br>——groups=组列表 指定可供选择的用户组列表，形如组1，组2，组3……<br>——help 显示此帮助信息并退出<br>——version 显示版本信息并退出<br>If no command is given, run ‘${SHELL} -i’ (default：’/bin/sh -i’).<br>请向<a href="mailto:bug-coreutils@gnu.org" target="_blank" rel="noopener">bug-coreutils@gnu.org</a> 报告chroot 的错误<br>GNU coreutils 的主页：<br>GNU 软件一般性帮助：<br>要获取完整文档，请运行：info coreutils ‘chroot invocation’<br>chroot这个命令主要用来把用户的文件系统根目录切换到指定的目录下，实现简单的文件系统隔离。可以说chroot的出现是为了提高安全性，但这种技术并不能防御来自其他方面的攻击，黑客依然可以逃离设定访问宿主机上的其他文件。</p><p>容器技术的发展<br>2000年，由R&amp;D Associates公司的Derrick T.Woolworth为FreeBSD引入的FreeBSD Jails成为了最早的容器技术之一。与chroot不同的是，它可以为文件系统、用户、网络等的隔离增加进程沙盒功能。因此，它可以为每个jail指定IP地址，可以对软件的安装和配置进行定制等。<br>紧接着出现了Linux VServer，这是另外一种jail机制，用于对计算机系统上的资源（如文件系统、CPU处理时间、网络地址和内存等）进行安全划分。每个所划分的分区叫做一个安全上下文（Security Context），在其中的虚拟系统叫做虚拟私有服务器（Virtual Private Server，VPS）。<br>在2004和2005年期间分别出现了Solaris Containers和OpenVZ技术，在可控性和便捷性上更胜一筹，如图1.3所示。<br>￼<br>图1.3 常见的容器技术<br>到了2006年，Google公司公开了Process Containers技术，用于对一组进程进行限制、记账、隔离资源（CPU、内存、磁盘I/O、网络等）。后来为了避免和Linux内核上下文中的“容器”一词混淆，而改名为Control Groups（简写为Groups）。2007年被合并到了Linux2.6.24内核中。<br>在前面Cgroups等技术出现以后，容器技术有了更快的发展。如图1.4给出了容器技术的发展史。</p><p>图1.4 容器技术发展史<br>2008年出现了LXC（LinuX Containers），它是第一个最完善的Linux容器管理器的实现方案，是通过Cgroups和Linux名字空间namespace实现的。LXC存在于liblxc库中，提供了各种编程语言的API实现。与其他容器技术不同的是，LXC可以工作在普通的Linux内核上，而不需要增加补丁。<br>LXC的出现为后面一系列工具的出现奠定了基础。2011年CloudFoundry发布了Warden。不像LXC，Warden并不紧密耦合到Linux上，而是可以工作在任何可以提供隔离环境的操作系统上。它以后台守护进程的方式运行，为容器管理提供了API。<br>在2013年，Google公司发布了Lmctfy，它是一个Google容器技术的开源版本，提供Linux应用容器。Google启动这个项目，旨在提供性能可保证的、高资源利用率的、资源共享的、可超售的、接近零消耗的容器。Lmctfy首次发布于2013年10月。到了2015年，Google公司决定贡献其核心的Lmctfy概念，并抽象成libcontainer。现在为Kubernetes所用的cAdvisor工具就是从Lmctfy项目的成果开始的。<br>libcontainer项目最初由Docker发起，现在已经被移交给了开放容器基金会（Open Container Foundation）。<br>同年，dotCloud发布了Docker（Logo是一条鲸鱼驮着一堆集装箱，如图1.5所示）——至今最流行和使用最广泛的容器管理系统。在LXC的基础上，Docker进一步优化了容器的使用体验，使得容器更容易操作和管理。</p><p>Docker提供了从构建、运行、管理、监控等一系列工具，引入了一整个管理容器的生态系统，包括高效分层的容器镜像模型、全局和本地的容器注册库、清晰的REST API、命令行等。这是Docker与其他容器平台最大的不同。在如图1.6中可以看到Docker跨越了多个层面，整合了一系列零散的工具从而达到一系列便捷的操作。这是当时Docker从众多容器技术中脱颖而出的一个重要原因。<br>￼</p><p>围绕Docker的生态系统更有数不胜数的工具，极大地方便了开发者使用容器技术。关于Docker的更多特性，将在第2章介绍。<br>Docker开始阶段使用的也是LXC，之后采用自己开发的libcontainer替代了LXC。<br>之后出于各种原因，CoreOS启动项目Rocket，非常类似于Docker，但是修复了一些Docker中发现的问题。与Docker相比，Rocket是在一个更加开放的标准App Container规范上实现的。现今不少容器管理工具都支持Rocket与Docker。<br>2015年微软公司也在Windows Server上为其基于Windows的应用添加了容器支持，称之为Windows Containers，与Windows Server 2016一同发布。通过该实现，Docker可以原生地在Windows上运行Docker容器，而不需要启动一个虚拟机来运行Docker（Windows上早期运行Docker需要使用Linux虚拟机）。同年，Mac OS也原生支持运行Docker容器。如图1.7所示为官网给出的下载按钮。至此Docker完成了三大平台的适配。</p><p>容器虚拟化技术经过几十年不断的发展与完善，相继加入了pivot_root等很多技术。市场上也出现了一些商业化的容器技术公司。在这些公司与全球开发者的共同努力下，容器技术得到不断推进和发展。最后核心容器技术进入了Linux的内核主线，再后来诸多大厂加入开发的libcontainer，使得如今人人皆可得心应手地操作容器。<br>1.3 容器的原理</p><p>前文提到，容器的核心技术是Cgroups与namespace，在此基础上还有一些其他工具共同构成容器技术。容器本质上是宿主机上的进程。容器技术通过namespace实现资源隔离，通过Cgroups实现资源控制，通过rootfs实现文件系统隔离，再加上容器引擎自身的特性来管理容器的生命周期。<br>简单来说，本书所说的Docker的早期其实就相当于LXC的管理引擎，LXC是Cgroups的管理工具，Cgroups是namespace的用户空间管理接口。namespace是Linux内核在task_struct中对进程组管理的基础机制。</p><p>1.3.1 从namespace说起<br>想要实现资源隔离，第一个想到的就是chroot命令。通过它可以实现文件系统隔离，这是最早的容器技术。但是在分布式的环境下，容器必须要有独立的IP、端口和路由等，自然就有了网络隔离。同时，进程通信隔离、权限隔离等也需要考虑到，因此基本上一个容器需要做到6项基本隔离，也就是Linux内核中提供的6种namespace隔离，如表1.1所示。<br>表1.1 namespace说明</p><p>当然，一项完善的容器技术还需要处理很多工作。<br>对namespace的操作主要是通过clone()、setns()、unshare()这3个系统调用来完成的。<br>clone()可以用来创建新的namespace。clone()有一个flags参数，该参数以CLONE_NEW<em>为格式，包括CLONE_NEWNS、CLONE_NEWIPC、CLONE_NEWUTS、CLONE_NEWNET、CLONE_NEWPID和CLONE_NEWUSER，通过传入这些参数后，由clone()创建出来的新进程就位于新的namespace之中了。<br>因为Mount namespace是第一个实现的namespace，当初实现没有考虑到还有其他namespace的出现，因此用了CLONE_NEWNS的名字，而不是CLONE_NEWMNT之类的名字。其他CLONE_NEW</em>都可以看名字知用途。<br>那么，如何为已有的进程创建新的namespace呢？这就需要用到unshare()了，使用unshare()调用的进程会被放进新的namespace里面。而setns()则是将进程放到已有的namespace中，docker exec命令的实现原理就是setns()。<br>事实上，开发namespace的主要目的之一就是实现轻量级虚拟化服务，在同一个namespace下的进程可以彼此响应，而对外界进程隔离，这样在一个namespace下，进程仿佛处于一个独立的系统环境中，以达到容器的目的。<br>上面介绍的是一些概念，下面来实践一下。因为user namespace是在Linux内核3.8之后才支持的，所以本节讨论的namespace均是3.8以后的版本。</p><p>在了解namespace API之前，先来了解如何查看进程的namespace。在root用户模式下执行：</p><h1 id="18-ls-l-proc-ns"><a href="#18-ls-l-proc-ns" class="headerlink" title="18. ls -l /proc/$$/ns"></a>18. ls -l /proc/$$/ns</h1><p>total 0<br>lrwxrwxrwx 1 root root 0 6月 10 20:29 ipc -&gt; ipc:[4026531839]<br>lrwxrwxrwx 1 root root 0 6月 10 20:29 mnt -&gt; mnt:[4026531840]<br>lrwxrwxrwx 1 root root 0 6月 10 20:29 net -&gt; net:[4026531956]<br>lrwxrwxrwx 1 root root 0 6月 10 20:29 pid -&gt; pid:[4026531836]<br>lrwxrwxrwx 1 root root 0 6月 10 20:29 user -&gt; user:[4026531837]<br>lrwxrwxrwx 1 root root 0 6月 10 20:29 uts -&gt; uts:[4026531838]<br>这里的$$是指当前进程ID号。可以看到诸如4026531839这样的数字，表示当前进程指向的namespace。当两个进程指向同一串数字时，表示它们处于同一个namespace下。</p><p>使用clone()创建新的namespace<br>创建一个namespace的方法是使用clone()系统调用，它会创建一个新的进程。为了说明创建的过程，给出clone()的原型如下：<br>int clone(int(<em>child_func)(void </em>), void <em>child_stack, int flags, void</em>arg);<br>本质上，clone()是一个通用的fork()版本。fork()的功能由flags参数控制。总的来说，约有超过20个不同的CLONE_<em>标志控制clone()提供不同的功能，包括父子进程是否共享如虚拟内存、打开的文件描述符和子进程等资源。如果调用clone()时设置了一个CLONE_NEW</em>标志，一个与之对应的新的命名空间将被创建，新的进程属于该命名空间。可以使用多个CLONE_NEW<em>标志的组合。<br>3．使用setns()关联一个已经存在的namespace<br>当一个namespace没有进程时还保持其打开，这么做是为了后续添加进程到该namespace。而添加这个功能就是使用setns()系统调用来完成，这使得调用的进程能够和namespace关联，docker exec就需要用到这个方法：<br>int setns(int fd, int nstype);<br>·fd参数指明了关联的namespace，其指向了\proc\PID\ns目录下一个符号链接的文件描述符。可以通过打开这些符号链接指向的文件或者打开一个绑定到符号链接的文件来获得文件描述符。<br>·nstype参数运行调用者检查fd指向的命名空间的类型，如果这个参数等于数，将不会检查。当调用者已经知道namespace的类型时这会很有用。当nstype被赋值为CLONE_NEW</em>的常量时，内核会检查fd指向的namespace的类型。<br>要把namespace利用起来，还要使用execve()函数（或者其他的exec()函数），使得我们能够构建一个简单但是有用的工具，该函数可以执行用户命令。</p><p>使用unshare()在已有进程上进行namespace隔离<br>unshare()和clone()有些像，不同的地方是前者运行在原有进程上，相当于跳出原来namespace操作，Linux自带的unshare()就是通过调用unshare()这个API来实现的。<br>$ unshare<br>Usage:<br>unshare [options] [args……]<br>-h, ——help usage information (this)<br>-m, ——mount unshare mounts namespace<br>-u, ——uts unshare UTS namespace (hostname etc)<br>-i, ——ipc unshare System V IPC namespace<br>-n, ——net unshare network namespace<br>For more information see unshare(1).<br>由于Docker没有使用这个系统调用，所以不展开。除此之外，像fork()这样的函数也可以实现namespace隔离，但并不属于namespace API的一部分。有兴趣的读者可以扫描以下二维码阅读相关资料。</p><p>认识Cgroups<br>Cgrous是Linux内核提供的一种可以限制、记录、隔离进程组（process groups）所使用的物理资源（如CPU，内存，I/O等）的机制。最初由Google公司的工程师提出，后来被整合进Linux内核。Cgroups也是LXC为实现虚拟化所使用的资源管理手段，可以说没有Cgroups就没有LXC。<br>目前，Cgroups有一套进程分组框架，不同资源由不同子系统控制。一个子系统就是一个资源控制器，比如CPU子系统就是控制CPU时间分配的一个控制器。子系统必须附加（attach）到一个层级上才能起作用，一个子系统附加到某个层级以后，这个层级上的所有控制族群（control groups）都受到这个子系统的控制。<br>Croups各个子系统作用如下。<br>·Blkio：为块设备设定输入/输出限制，比如物理设备（磁盘、固态硬盘、USB等）。<br>·Cpu：提供对CPU的Cgroups任务访问。<br>·Cpuacct：生成Cgroups中任务所使用的CPU报告。<br>·Cpuset：为Cgroups中的任务分配独立CPU（在多核系统）和内存节点。<br>·Devices：允许或者拒绝Cgroups中的任务访问设备。<br>·Freezer：挂起或者恢复Cgroups中的任务。<br>·Memory：设定Cgroups中任务使用的内存限制，并自动生成由那些任务使用的内存资源报告。<br>·Net_cls：使用等级识别符（classid）标记网络数据包，可允许Linux流量控制程序（tc）识别从具体Cgroup中生成的数据包。<br>·Net_prio：设置进程的网络流量优先级。<br>·Huge_tlb：限制HugeTLB的使用。<br>·Perf_event：允许Perf工具基于Cgroups分组做性能监测。<br>这样说理解起来也很吃力，下面就通过命令来挂载Cgroupfs。</p><h1 id="19-mount-t-cgroup-o-cpuset-cpuset-sys-fs-cgroup-cpuset"><a href="#19-mount-t-cgroup-o-cpuset-cpuset-sys-fs-cgroup-cpuset" class="headerlink" title="19. mount -t cgroup -o cpuset cpuset /sys/fs/cgroup/cpuset"></a>19. mount -t cgroup -o cpuset cpuset /sys/fs/cgroup/cpuset</h1><p>这个动作一般情况下已经在Linux启动的时候做了。<br>查看Cgroupfs：</p><h1 id="20-cpuset-ls"><a href="#20-cpuset-ls" class="headerlink" title="20. cpuset ls"></a>20. cpuset ls</h1><p>cgroup.clone_children cpuset.memory_pressure_enabled</p><p>cgroup.procs cpuset.memory_spread_page<br>cgroup.sane_behavior cpuset.memory_spread_slab<br>cpuset.cpu_exclusive cpuset.mems<br>cpuset.cpus cpuset.sched_load_balance<br>cpuset.effective_cpus cpuset.sched_relax_domain_level<br>cpuset.effective_mems docker<br>cpuset.mem_exclusive notify_on_release<br>cpuset.mem_hardwall release_agent<br>cpuset.memory_migrate tasks<br>cpuset.memory_pressure</p><p>主流Linux发行版下，都可以通过/etc/cgconfig.conf或者cgroup-bin的相关指令来配置Cgroups。<br>mount {<br>cpuset = /sys/fs/cgroup/cpuset;<br>momory = /sys/fs/cgroup/momory;<br>}<br>group cnsworder/test {<br>perm {<br>task {<br>uid = root;<br>gid = root;<br>}<br>admin {<br>uid = root;<br>gid = root;<br>}<br>}</p><p>cpu.shares = 1000;<br>}<br>}<br>然后通过命令行把一个进程移动到这个Cgroups之中。</p><h1 id="21-mount-t-group-o-cpu-cpu-sys-fs-cgroup-cpuset"><a href="#21-mount-t-group-o-cpu-cpu-sys-fs-cgroup-cpuset" class="headerlink" title="21. mount -t group -o cpu cpu /sys/fs/cgroup/cpuset"></a>21. mount -t group -o cpu cpu /sys/fs/cgroup/cpuset</h1><h1 id="22-cgcreate-g-cpu-momory-cnsworder"><a href="#22-cgcreate-g-cpu-momory-cnsworder" class="headerlink" title="22. cgcreate -g cpu,momory:/cnsworder"></a>22. cgcreate -g cpu,momory:/cnsworder</h1><h1 id="23-chown-root-root-sys-fs-cgroup-cpuset-cnsworder-test"><a href="#23-chown-root-root-sys-fs-cgroup-cpuset-cnsworder-test" class="headerlink" title="23. chown root:root /sys/fs/cgroup/cpuset/cnsworder/test/*"></a>23. chown root:root /sys/fs/cgroup/cpuset/cnsworder/test/*</h1><h1 id="24-chown-root-root-sys-fs-cgroup-cpuset-cnsworder-test-task"><a href="#24-chown-root-root-sys-fs-cgroup-cpuset-cnsworder-test-task" class="headerlink" title="24. chown root:root /sys/fs/cgroup/cpuset/cnsworder/test/task"></a>24. chown root:root /sys/fs/cgroup/cpuset/cnsworder/test/task</h1><h1 id="25-cgrun-g-cpu-momory-cnsworder-test-bash"><a href="#25-cgrun-g-cpu-momory-cnsworder-test-bash" class="headerlink" title="25. cgrun -g cpu,momory:/cnsworder/test bash"></a>25. cgrun -g cpu,momory:/cnsworder/test bash</h1><p>容器的创建<br>前面只是非常简单地介绍了namespace和Cgroups两个概念。实际上各个namespace的具体介绍与各个Cgroups子系统的介绍都没有深入讲解到，但通过前面两节的学习，相信读者已经大致有了容器创建过程的雏形。<br>（1）系统调用clone()创建新进程，拥有自己的namespace。<br>该进程拥有自己的pid、mount、user、net、ipc和uts namespace。</p><h1 id="26-pid-clone-fun-stack-flags-clone-arg"><a href="#26-pid-clone-fun-stack-flags-clone-arg" class="headerlink" title="26. pid =clone(fun,stack,flags,clone_arg);"></a>26. pid =clone(fun,stack,flags,clone_arg);</h1><p>（2）将pid写入Cgroup子系统这样就受到Cgroups子系统控制。</p><h1 id="27-echo-pid-gt-sys-fs-cgroup-cpu-tasks"><a href="#27-echo-pid-gt-sys-fs-cgroup-cpu-tasks" class="headerlink" title="27. echo$pid &gt;/sys/fs/cgroup/cpu/tasks"></a>27. echo$pid &gt;/sys/fs/cgroup/cpu/tasks</h1><h1 id="28-echo-pid-gt-sys-fs-cgroup-cpuset-tasks"><a href="#28-echo-pid-gt-sys-fs-cgroup-cpuset-tasks" class="headerlink" title="28. echo$pid &gt;/sys/fs/cgroup/cpuset/tasks"></a>28. echo$pid &gt;/sys/fs/cgroup/cpuset/tasks</h1><h1 id="29-echo-pid-gt-sys-fs-cgroup-bikio-tasks"><a href="#29-echo-pid-gt-sys-fs-cgroup-bikio-tasks" class="headerlink" title="29. echo$pid &gt;/sys/fs/cgroup/bikio/tasks"></a>29. echo$pid &gt;/sys/fs/cgroup/bikio/tasks</h1><h1 id="30-echo-pid-gt-sys-fs-cgroup-memory-tasks"><a href="#30-echo-pid-gt-sys-fs-cgroup-memory-tasks" class="headerlink" title="30. echo$pid &gt;/sys/fs/cgroup/memory/tasks"></a>30. echo$pid &gt;/sys/fs/cgroup/memory/tasks</h1><h1 id="31-echo-pid-gt-sys-fs-cgroup-devices-tasks"><a href="#31-echo-pid-gt-sys-fs-cgroup-devices-tasks" class="headerlink" title="31. echo$pid &gt;/sys/fs/cgroup/devices/tasks"></a>31. echo$pid &gt;/sys/fs/cgroup/devices/tasks</h1><h1 id="32-echo-pid-gt-sys-fs-cgroup-feezer-tasks"><a href="#32-echo-pid-gt-sys-fs-cgroup-feezer-tasks" class="headerlink" title="32. echo$pid &gt;/sys/fs/cgroup/feezer/tasks"></a>32. echo$pid &gt;/sys/fs/cgroup/feezer/tasks</h1><p>（3）通过pivot_root系统调用，使进程进入一个新的rootfs，之后通过exec()系统调用，在新的namespace、Cgroups、rootfs中执行/bin/bash。<br>fun(){<br>pivot_root(“path_of_rootfs/“，path)；<br>exec(“/bin/bash”);<br>}<br>通过上面的操作，成功地在一个容器中运行了/bin/bash。<br>1.4 容器云<br>每一项技术成熟后都会衍生出一系列技术，例如当Docker推开容器世界的大门时，围绕容器技术的生态系统迅速发展起来。<br>无论是<strong>个人</strong>还是<strong>企业</strong>，在使用上都有各种各样的需求，例如<strong>跨主机连接</strong>容器，各种类型的<strong>负载均衡</strong>，<strong>持续构建、集成和交付</strong>，以及<strong>大规模容器管理</strong>等。<br>虽然Docker提供了较为便捷的操作方式，</p><h2 id="32-1-Docker的不足"><a href="#32-1-Docker的不足" class="headerlink" title="32.1. Docker的不足"></a>32.1. Docker的不足</h2><p>在<strong>开发、生产环境</strong>中，<strong>网络、存储、集群和高可用</strong>等问题层出不穷。仅凭Docker难以面面俱到。</p><h2 id="32-2-Docker的发展方向"><a href="#32-2-Docker的发展方向" class="headerlink" title="32.2. Docker的发展方向"></a>32.2. Docker的发展方向</h2><p>从容器到容器云。围绕Docker容器云还有很多需要开发者去完善的地方。</p><h2 id="32-3-Docker生态区"><a href="#32-3-Docker生态区" class="headerlink" title="32.3. Docker生态区"></a>32.3. Docker生态区</h2><h1 id="33-展望"><a href="#33-展望" class="headerlink" title="33. 展望"></a>33. 展望</h1><p>国内现在以Docker容器云为“卖点”的初创公司不在百家之下，国外更是不用言说。<br>可见如图1.8展示了目前Docker的生态圈的一部分。<br>可以看到这些工具围绕Docker进行扩展补充，已经形成了非常发达的生态系统网络。<br>图1.8 容器技术生态圈</p><h1 id="34-概念"><a href="#34-概念" class="headerlink" title="34. 概念"></a>34. 概念</h1><h2 id="34-1-容器云"><a href="#34-1-容器云" class="headerlink" title="34.1. 容器云"></a>34.1. 容器云</h2><p>容器云是以容器为资源分割和调度的基本单位，通过容器封装软件运行环境，为用户提供一个集构建、发布和运行于一体的分布式应用平台。</p><h2 id="34-2-微服务"><a href="#34-2-微服务" class="headerlink" title="34.2. 微服务"></a>34.2. 微服务</h2><p>微服Microservices在软件架构上可以将容器用于部署。微服务只是一个相比标准的Web服务超快的<strong>轻量级Web服务</strong>。这是通过将功能单元（也许是一个单一服务或API方法）打包到一个服务中，并内嵌其到一个轻量级Web服务器软件中实现的。</p><h2 id="34-3-容器云与IaaS、PaaS"><a href="#34-3-容器云与IaaS、PaaS" class="headerlink" title="34.3. 容器云与IaaS、PaaS"></a>34.3. 容器云与IaaS、PaaS</h2><p>容器云可以共享与隔离资源、编排与部署容器。在这一点上容器云与IaaS相似。<br>但是容器云也可以渗透到应用支撑与运行时环境，在这一点上与PaaS类似。</p><h2 id="34-4-Docker与其他容器技术"><a href="#34-4-Docker与其他容器技术" class="headerlink" title="34.4. Docker与其他容器技术"></a>34.4. Docker与其他容器技术</h2><p>容器技术<br>基础：Docker、CoreOS的Rocket项目等等。<br>发展：容器云。<br>突破性发展：微服务（Microservices）、Serverless。Docker与微服务结合开辟了新蓝海。<br>容器基本概念<br>容器运行原理<br>容器调用方法<br>容器技术的历史<br>Docker Swarm集群管理方式</p><h1 id="35-容器技术与Docker（Docker在容器技术中的位置）"><a href="#35-容器技术与Docker（Docker在容器技术中的位置）" class="headerlink" title="35. 容器技术与Docker（Docker在容器技术中的位置）"></a>35. 容器技术与Docker（Docker在容器技术中的位置）</h1><p>容器成就了Docker，而Docker也极大地促进了容器技术的发展。<br>关于容器是否是Docker的核心技术在业内一直存在争议。Docker的核心是对分层镜像的创新使用，还是统一了应用的打包分发和部署方式。<br>因为Docker的创新不一定要依赖容器技术，像基于传统的hypervisor也可以做到。<br>官方对Docker核心技术功能的描述“Build，Ship and Run”中也确实没有体现与容器相关的内容。<br>实际上，从Docker公司的表现来看，它不会单纯地只是做一个CaaS（容器即服务）服务商。</p><h1 id="36-参考"><a href="#36-参考" class="headerlink" title="36. 参考"></a>36. 参考</h1><p>《Docker从入门到实战》，黄婧钧，2017</p><h1 id="37-Docker资源"><a href="#37-Docker资源" class="headerlink" title="37. Docker资源"></a>37. Docker资源</h1><p>Docker官方英文资源：</p><p>docker官网：<a href="http://www.docker.com" target="_blank" rel="noopener">http://www.docker.com</a><br>Docker windows入门：<a href="https://docs.docker.com/windows/" target="_blank" rel="noopener">https://docs.docker.com/windows/</a><br>Docker Linux 入门：<a href="https://docs.docker.com/linux/" target="_blank" rel="noopener">https://docs.docker.com/linux/</a><br>Docker mac 入门：<a href="https://docs.docker.com/mac/" target="_blank" rel="noopener">https://docs.docker.com/mac/</a><br>Docker 用户指引：<a href="https://docs.docker.com/engine/userguide/" target="_blank" rel="noopener">https://docs.docker.com/engine/userguide/</a><br>Docker 官方博客：<a href="http://blog.docker.com/" target="_blank" rel="noopener">http://blog.docker.com/</a><br>Docker Hub: <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a><br>Docker开源： <a href="https://www.docker.com/open-source" target="_blank" rel="noopener">https://www.docker.com/open-source</a><br>Docker中文资源：</p><p>Docker中文网站：<a href="http://www.docker.org.cn" target="_blank" rel="noopener">http://www.docker.org.cn</a><br>Docker入门教程: <a href="http://www.docker.org.cn/book/docker.html" target="_blank" rel="noopener">http://www.docker.org.cn/book/docker.html</a><br>Docker安装手册：<a href="http://www.docker.org.cn/book/install.html" target="_blank" rel="noopener">http://www.docker.org.cn/book/install.html</a><br>一小时Docker教程 ：<a href="https://blog.csphere.cn/archives/22" target="_blank" rel="noopener">https://blog.csphere.cn/archives/22</a><br>Docker纸质书：<a href="http://www.docker.org.cn/dockershuji.html" target="_blank" rel="noopener">http://www.docker.org.cn/dockershuji.html</a><br>DockerPPT：<a href="http://www.docker.org.cn/dockerppt.html" target="_blank" rel="noopener">http://www.docker.org.cn/dockerppt.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 软件开发 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20200502</title>
      <link href="/20200502/"/>
      <url>/20200502/</url>
      
        <content type="html"><![CDATA[<h1 id="每日英语"><a href="#每日英语" class="headerlink" title="每日英语"></a>每日英语</h1><p>A useful minimum set of commands<br>Everyday Git</p><p>SYNOPSIS<br>20 Commands Or So</p><p>can broadly be grouped into four categories<br>a small set of useful command</p><p>crash course<br>daemon</p><p># </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
